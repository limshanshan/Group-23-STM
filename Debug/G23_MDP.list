
G23_MDP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000053e8  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08005570  08005570  00006570  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005588  08005588  0000700c  2**0
                  CONTENTS
  4 .ARM          00000008  08005588  08005588  00006588  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005590  08005590  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005590  08005590  00006590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005594  08005594  00006594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08005598  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000700c  2**0
                  CONTENTS
 10 .bss          00000744  2000000c  2000000c  0000700c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000750  20000750  0000700c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012a6b  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000026df  00000000  00000000  00019aa7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011d0  00000000  00000000  0001c188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e1d  00000000  00000000  0001d358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000026ef  00000000  00000000  0001e175  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015869  00000000  00000000  00020864  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dd6a8  00000000  00000000  000360cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00113775  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004c30  00000000  00000000  001137b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000053  00000000  00000000  001183e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005558 	.word	0x08005558

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08005558 	.word	0x08005558

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004bc:	f001 f9c2 	bl	8001844 <HAL_Init>

  /* USER CODE BEGIN Init */
  OLED_Init();
 80004c0:	f000 fd9a 	bl	8000ff8 <OLED_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c4:	f000 f81a 	bl	80004fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004c8:	f000 fc42 	bl	8000d50 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80004cc:	f000 fc16 	bl	8000cfc <MX_USART3_UART_Init>
  MX_I2C1_Init();
 80004d0:	f000 f916 	bl	8000700 <MX_I2C1_Init>
  MX_TIM8_Init();
 80004d4:	f000 fb66 	bl	8000ba4 <MX_TIM8_Init>
  MX_TIM2_Init();
 80004d8:	f000 f9e0 	bl	800089c <MX_TIM2_Init>
  MX_TIM3_Init();
 80004dc:	f000 fa32 	bl	8000944 <MX_TIM3_Init>
  MX_TIM1_Init();
 80004e0:	f000 f93c 	bl	800075c <MX_TIM1_Init>
  MX_TIM4_Init();
 80004e4:	f000 fa82 	bl	80009ec <MX_TIM4_Init>
  MX_ADC1_Init();
 80004e8:	f000 f866 	bl	80005b8 <MX_ADC1_Init>
  MX_TIM6_Init();
 80004ec:	f000 faee 	bl	8000acc <MX_TIM6_Init>
  MX_TIM7_Init();
 80004f0:	f000 fb22 	bl	8000b38 <MX_TIM7_Init>
  MX_ADC2_Init();
 80004f4:	f000 f8b2 	bl	800065c <MX_ADC2_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004f8:	bf00      	nop
 80004fa:	e7fd      	b.n	80004f8 <main+0x40>

080004fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b094      	sub	sp, #80	@ 0x50
 8000500:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000502:	f107 0320 	add.w	r3, r7, #32
 8000506:	2230      	movs	r2, #48	@ 0x30
 8000508:	2100      	movs	r1, #0
 800050a:	4618      	mov	r0, r3
 800050c:	f004 fff8 	bl	8005500 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000510:	f107 030c 	add.w	r3, r7, #12
 8000514:	2200      	movs	r2, #0
 8000516:	601a      	str	r2, [r3, #0]
 8000518:	605a      	str	r2, [r3, #4]
 800051a:	609a      	str	r2, [r3, #8]
 800051c:	60da      	str	r2, [r3, #12]
 800051e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000520:	2300      	movs	r3, #0
 8000522:	60bb      	str	r3, [r7, #8]
 8000524:	4b22      	ldr	r3, [pc, #136]	@ (80005b0 <SystemClock_Config+0xb4>)
 8000526:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000528:	4a21      	ldr	r2, [pc, #132]	@ (80005b0 <SystemClock_Config+0xb4>)
 800052a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800052e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000530:	4b1f      	ldr	r3, [pc, #124]	@ (80005b0 <SystemClock_Config+0xb4>)
 8000532:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000534:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000538:	60bb      	str	r3, [r7, #8]
 800053a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800053c:	2300      	movs	r3, #0
 800053e:	607b      	str	r3, [r7, #4]
 8000540:	4b1c      	ldr	r3, [pc, #112]	@ (80005b4 <SystemClock_Config+0xb8>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	4a1b      	ldr	r2, [pc, #108]	@ (80005b4 <SystemClock_Config+0xb8>)
 8000546:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800054a:	6013      	str	r3, [r2, #0]
 800054c:	4b19      	ldr	r3, [pc, #100]	@ (80005b4 <SystemClock_Config+0xb8>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000554:	607b      	str	r3, [r7, #4]
 8000556:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000558:	2302      	movs	r3, #2
 800055a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800055c:	2301      	movs	r3, #1
 800055e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000560:	2310      	movs	r3, #16
 8000562:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000564:	2300      	movs	r3, #0
 8000566:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000568:	f107 0320 	add.w	r3, r7, #32
 800056c:	4618      	mov	r0, r3
 800056e:	f002 fa5f 	bl	8002a30 <HAL_RCC_OscConfig>
 8000572:	4603      	mov	r3, r0
 8000574:	2b00      	cmp	r3, #0
 8000576:	d001      	beq.n	800057c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000578:	f000 fc90 	bl	8000e9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800057c:	230f      	movs	r3, #15
 800057e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000580:	2300      	movs	r3, #0
 8000582:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000584:	2300      	movs	r3, #0
 8000586:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000588:	2300      	movs	r3, #0
 800058a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800058c:	2300      	movs	r3, #0
 800058e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000590:	f107 030c 	add.w	r3, r7, #12
 8000594:	2100      	movs	r1, #0
 8000596:	4618      	mov	r0, r3
 8000598:	f002 fcc2 	bl	8002f20 <HAL_RCC_ClockConfig>
 800059c:	4603      	mov	r3, r0
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d001      	beq.n	80005a6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80005a2:	f000 fc7b 	bl	8000e9c <Error_Handler>
  }
}
 80005a6:	bf00      	nop
 80005a8:	3750      	adds	r7, #80	@ 0x50
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	40023800 	.word	0x40023800
 80005b4:	40007000 	.word	0x40007000

080005b8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b084      	sub	sp, #16
 80005bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005be:	463b      	mov	r3, r7
 80005c0:	2200      	movs	r2, #0
 80005c2:	601a      	str	r2, [r3, #0]
 80005c4:	605a      	str	r2, [r3, #4]
 80005c6:	609a      	str	r2, [r3, #8]
 80005c8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005ca:	4b21      	ldr	r3, [pc, #132]	@ (8000650 <MX_ADC1_Init+0x98>)
 80005cc:	4a21      	ldr	r2, [pc, #132]	@ (8000654 <MX_ADC1_Init+0x9c>)
 80005ce:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80005d0:	4b1f      	ldr	r3, [pc, #124]	@ (8000650 <MX_ADC1_Init+0x98>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005d6:	4b1e      	ldr	r3, [pc, #120]	@ (8000650 <MX_ADC1_Init+0x98>)
 80005d8:	2200      	movs	r2, #0
 80005da:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80005dc:	4b1c      	ldr	r3, [pc, #112]	@ (8000650 <MX_ADC1_Init+0x98>)
 80005de:	2200      	movs	r2, #0
 80005e0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80005e2:	4b1b      	ldr	r3, [pc, #108]	@ (8000650 <MX_ADC1_Init+0x98>)
 80005e4:	2201      	movs	r2, #1
 80005e6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005e8:	4b19      	ldr	r3, [pc, #100]	@ (8000650 <MX_ADC1_Init+0x98>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005f0:	4b17      	ldr	r3, [pc, #92]	@ (8000650 <MX_ADC1_Init+0x98>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005f6:	4b16      	ldr	r3, [pc, #88]	@ (8000650 <MX_ADC1_Init+0x98>)
 80005f8:	4a17      	ldr	r2, [pc, #92]	@ (8000658 <MX_ADC1_Init+0xa0>)
 80005fa:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005fc:	4b14      	ldr	r3, [pc, #80]	@ (8000650 <MX_ADC1_Init+0x98>)
 80005fe:	2200      	movs	r2, #0
 8000600:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000602:	4b13      	ldr	r3, [pc, #76]	@ (8000650 <MX_ADC1_Init+0x98>)
 8000604:	2201      	movs	r2, #1
 8000606:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000608:	4b11      	ldr	r3, [pc, #68]	@ (8000650 <MX_ADC1_Init+0x98>)
 800060a:	2200      	movs	r2, #0
 800060c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000610:	4b0f      	ldr	r3, [pc, #60]	@ (8000650 <MX_ADC1_Init+0x98>)
 8000612:	2201      	movs	r2, #1
 8000614:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000616:	480e      	ldr	r0, [pc, #56]	@ (8000650 <MX_ADC1_Init+0x98>)
 8000618:	f001 f9aa 	bl	8001970 <HAL_ADC_Init>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000622:	f000 fc3b 	bl	8000e9c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000626:	230d      	movs	r3, #13
 8000628:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800062a:	2301      	movs	r3, #1
 800062c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800062e:	2300      	movs	r3, #0
 8000630:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000632:	463b      	mov	r3, r7
 8000634:	4619      	mov	r1, r3
 8000636:	4806      	ldr	r0, [pc, #24]	@ (8000650 <MX_ADC1_Init+0x98>)
 8000638:	f001 fb0c 	bl	8001c54 <HAL_ADC_ConfigChannel>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000642:	f000 fc2b 	bl	8000e9c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000646:	bf00      	nop
 8000648:	3710      	adds	r7, #16
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	20000028 	.word	0x20000028
 8000654:	40012000 	.word	0x40012000
 8000658:	0f000001 	.word	0x0f000001

0800065c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b084      	sub	sp, #16
 8000660:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000662:	463b      	mov	r3, r7
 8000664:	2200      	movs	r2, #0
 8000666:	601a      	str	r2, [r3, #0]
 8000668:	605a      	str	r2, [r3, #4]
 800066a:	609a      	str	r2, [r3, #8]
 800066c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800066e:	4b21      	ldr	r3, [pc, #132]	@ (80006f4 <MX_ADC2_Init+0x98>)
 8000670:	4a21      	ldr	r2, [pc, #132]	@ (80006f8 <MX_ADC2_Init+0x9c>)
 8000672:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000674:	4b1f      	ldr	r3, [pc, #124]	@ (80006f4 <MX_ADC2_Init+0x98>)
 8000676:	2200      	movs	r2, #0
 8000678:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800067a:	4b1e      	ldr	r3, [pc, #120]	@ (80006f4 <MX_ADC2_Init+0x98>)
 800067c:	2200      	movs	r2, #0
 800067e:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8000680:	4b1c      	ldr	r3, [pc, #112]	@ (80006f4 <MX_ADC2_Init+0x98>)
 8000682:	2200      	movs	r2, #0
 8000684:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000686:	4b1b      	ldr	r3, [pc, #108]	@ (80006f4 <MX_ADC2_Init+0x98>)
 8000688:	2200      	movs	r2, #0
 800068a:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800068c:	4b19      	ldr	r3, [pc, #100]	@ (80006f4 <MX_ADC2_Init+0x98>)
 800068e:	2200      	movs	r2, #0
 8000690:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000694:	4b17      	ldr	r3, [pc, #92]	@ (80006f4 <MX_ADC2_Init+0x98>)
 8000696:	2200      	movs	r2, #0
 8000698:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800069a:	4b16      	ldr	r3, [pc, #88]	@ (80006f4 <MX_ADC2_Init+0x98>)
 800069c:	4a17      	ldr	r2, [pc, #92]	@ (80006fc <MX_ADC2_Init+0xa0>)
 800069e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006a0:	4b14      	ldr	r3, [pc, #80]	@ (80006f4 <MX_ADC2_Init+0x98>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80006a6:	4b13      	ldr	r3, [pc, #76]	@ (80006f4 <MX_ADC2_Init+0x98>)
 80006a8:	2201      	movs	r2, #1
 80006aa:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80006ac:	4b11      	ldr	r3, [pc, #68]	@ (80006f4 <MX_ADC2_Init+0x98>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006b4:	4b0f      	ldr	r3, [pc, #60]	@ (80006f4 <MX_ADC2_Init+0x98>)
 80006b6:	2201      	movs	r2, #1
 80006b8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80006ba:	480e      	ldr	r0, [pc, #56]	@ (80006f4 <MX_ADC2_Init+0x98>)
 80006bc:	f001 f958 	bl	8001970 <HAL_ADC_Init>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 80006c6:	f000 fbe9 	bl	8000e9c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80006ca:	230c      	movs	r3, #12
 80006cc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80006ce:	2301      	movs	r3, #1
 80006d0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80006d2:	2300      	movs	r3, #0
 80006d4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80006d6:	463b      	mov	r3, r7
 80006d8:	4619      	mov	r1, r3
 80006da:	4806      	ldr	r0, [pc, #24]	@ (80006f4 <MX_ADC2_Init+0x98>)
 80006dc:	f001 faba 	bl	8001c54 <HAL_ADC_ConfigChannel>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 80006e6:	f000 fbd9 	bl	8000e9c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80006ea:	bf00      	nop
 80006ec:	3710      	adds	r7, #16
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	20000070 	.word	0x20000070
 80006f8:	40012100 	.word	0x40012100
 80006fc:	0f000001 	.word	0x0f000001

08000700 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000704:	4b12      	ldr	r3, [pc, #72]	@ (8000750 <MX_I2C1_Init+0x50>)
 8000706:	4a13      	ldr	r2, [pc, #76]	@ (8000754 <MX_I2C1_Init+0x54>)
 8000708:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800070a:	4b11      	ldr	r3, [pc, #68]	@ (8000750 <MX_I2C1_Init+0x50>)
 800070c:	4a12      	ldr	r2, [pc, #72]	@ (8000758 <MX_I2C1_Init+0x58>)
 800070e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000710:	4b0f      	ldr	r3, [pc, #60]	@ (8000750 <MX_I2C1_Init+0x50>)
 8000712:	2200      	movs	r2, #0
 8000714:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000716:	4b0e      	ldr	r3, [pc, #56]	@ (8000750 <MX_I2C1_Init+0x50>)
 8000718:	2200      	movs	r2, #0
 800071a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800071c:	4b0c      	ldr	r3, [pc, #48]	@ (8000750 <MX_I2C1_Init+0x50>)
 800071e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000722:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000724:	4b0a      	ldr	r3, [pc, #40]	@ (8000750 <MX_I2C1_Init+0x50>)
 8000726:	2200      	movs	r2, #0
 8000728:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800072a:	4b09      	ldr	r3, [pc, #36]	@ (8000750 <MX_I2C1_Init+0x50>)
 800072c:	2200      	movs	r2, #0
 800072e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000730:	4b07      	ldr	r3, [pc, #28]	@ (8000750 <MX_I2C1_Init+0x50>)
 8000732:	2200      	movs	r2, #0
 8000734:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000736:	4b06      	ldr	r3, [pc, #24]	@ (8000750 <MX_I2C1_Init+0x50>)
 8000738:	2200      	movs	r2, #0
 800073a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800073c:	4804      	ldr	r0, [pc, #16]	@ (8000750 <MX_I2C1_Init+0x50>)
 800073e:	f002 f80b 	bl	8002758 <HAL_I2C_Init>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000748:	f000 fba8 	bl	8000e9c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800074c:	bf00      	nop
 800074e:	bd80      	pop	{r7, pc}
 8000750:	200000b8 	.word	0x200000b8
 8000754:	40005400 	.word	0x40005400
 8000758:	00061a80 	.word	0x00061a80

0800075c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b096      	sub	sp, #88	@ 0x58
 8000760:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000762:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000766:	2200      	movs	r2, #0
 8000768:	601a      	str	r2, [r3, #0]
 800076a:	605a      	str	r2, [r3, #4]
 800076c:	609a      	str	r2, [r3, #8]
 800076e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000770:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000774:	2200      	movs	r2, #0
 8000776:	601a      	str	r2, [r3, #0]
 8000778:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800077a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800077e:	2200      	movs	r2, #0
 8000780:	601a      	str	r2, [r3, #0]
 8000782:	605a      	str	r2, [r3, #4]
 8000784:	609a      	str	r2, [r3, #8]
 8000786:	60da      	str	r2, [r3, #12]
 8000788:	611a      	str	r2, [r3, #16]
 800078a:	615a      	str	r2, [r3, #20]
 800078c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800078e:	1d3b      	adds	r3, r7, #4
 8000790:	2220      	movs	r2, #32
 8000792:	2100      	movs	r1, #0
 8000794:	4618      	mov	r0, r3
 8000796:	f004 feb3 	bl	8005500 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800079a:	4b3e      	ldr	r3, [pc, #248]	@ (8000894 <MX_TIM1_Init+0x138>)
 800079c:	4a3e      	ldr	r2, [pc, #248]	@ (8000898 <MX_TIM1_Init+0x13c>)
 800079e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 5-1;
 80007a0:	4b3c      	ldr	r3, [pc, #240]	@ (8000894 <MX_TIM1_Init+0x138>)
 80007a2:	2204      	movs	r2, #4
 80007a4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007a6:	4b3b      	ldr	r3, [pc, #236]	@ (8000894 <MX_TIM1_Init+0x138>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 64000-1;
 80007ac:	4b39      	ldr	r3, [pc, #228]	@ (8000894 <MX_TIM1_Init+0x138>)
 80007ae:	f64f 12ff 	movw	r2, #63999	@ 0xf9ff
 80007b2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007b4:	4b37      	ldr	r3, [pc, #220]	@ (8000894 <MX_TIM1_Init+0x138>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007ba:	4b36      	ldr	r3, [pc, #216]	@ (8000894 <MX_TIM1_Init+0x138>)
 80007bc:	2200      	movs	r2, #0
 80007be:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007c0:	4b34      	ldr	r3, [pc, #208]	@ (8000894 <MX_TIM1_Init+0x138>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80007c6:	4833      	ldr	r0, [pc, #204]	@ (8000894 <MX_TIM1_Init+0x138>)
 80007c8:	f002 fd8a 	bl	80032e0 <HAL_TIM_Base_Init>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80007d2:	f000 fb63 	bl	8000e9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007d6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007da:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80007dc:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80007e0:	4619      	mov	r1, r3
 80007e2:	482c      	ldr	r0, [pc, #176]	@ (8000894 <MX_TIM1_Init+0x138>)
 80007e4:	f003 f972 	bl	8003acc <HAL_TIM_ConfigClockSource>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80007ee:	f000 fb55 	bl	8000e9c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80007f2:	4828      	ldr	r0, [pc, #160]	@ (8000894 <MX_TIM1_Init+0x138>)
 80007f4:	f002 fdc3 	bl	800337e <HAL_TIM_PWM_Init>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80007fe:	f000 fb4d 	bl	8000e9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000802:	2300      	movs	r3, #0
 8000804:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000806:	2300      	movs	r3, #0
 8000808:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800080a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800080e:	4619      	mov	r1, r3
 8000810:	4820      	ldr	r0, [pc, #128]	@ (8000894 <MX_TIM1_Init+0x138>)
 8000812:	f003 fe75 	bl	8004500 <HAL_TIMEx_MasterConfigSynchronization>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800081c:	f000 fb3e 	bl	8000e9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000820:	2360      	movs	r3, #96	@ 0x60
 8000822:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000824:	2300      	movs	r3, #0
 8000826:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000828:	2300      	movs	r3, #0
 800082a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800082c:	2300      	movs	r3, #0
 800082e:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000830:	2300      	movs	r3, #0
 8000832:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000834:	2300      	movs	r3, #0
 8000836:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000838:	2300      	movs	r3, #0
 800083a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800083c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000840:	2200      	movs	r2, #0
 8000842:	4619      	mov	r1, r3
 8000844:	4813      	ldr	r0, [pc, #76]	@ (8000894 <MX_TIM1_Init+0x138>)
 8000846:	f003 f87f 	bl	8003948 <HAL_TIM_PWM_ConfigChannel>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000850:	f000 fb24 	bl	8000e9c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000854:	2300      	movs	r3, #0
 8000856:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000858:	2300      	movs	r3, #0
 800085a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800085c:	2300      	movs	r3, #0
 800085e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000860:	2300      	movs	r3, #0
 8000862:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000864:	2300      	movs	r3, #0
 8000866:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000868:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800086c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800086e:	2300      	movs	r3, #0
 8000870:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000872:	1d3b      	adds	r3, r7, #4
 8000874:	4619      	mov	r1, r3
 8000876:	4807      	ldr	r0, [pc, #28]	@ (8000894 <MX_TIM1_Init+0x138>)
 8000878:	f003 febe 	bl	80045f8 <HAL_TIMEx_ConfigBreakDeadTime>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8000882:	f000 fb0b 	bl	8000e9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000886:	4803      	ldr	r0, [pc, #12]	@ (8000894 <MX_TIM1_Init+0x138>)
 8000888:	f000 fe88 	bl	800159c <HAL_TIM_MspPostInit>

}
 800088c:	bf00      	nop
 800088e:	3758      	adds	r7, #88	@ 0x58
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	2000010c 	.word	0x2000010c
 8000898:	40010000 	.word	0x40010000

0800089c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b08c      	sub	sp, #48	@ 0x30
 80008a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80008a2:	f107 030c 	add.w	r3, r7, #12
 80008a6:	2224      	movs	r2, #36	@ 0x24
 80008a8:	2100      	movs	r1, #0
 80008aa:	4618      	mov	r0, r3
 80008ac:	f004 fe28 	bl	8005500 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008b0:	1d3b      	adds	r3, r7, #4
 80008b2:	2200      	movs	r2, #0
 80008b4:	601a      	str	r2, [r3, #0]
 80008b6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008b8:	4b21      	ldr	r3, [pc, #132]	@ (8000940 <MX_TIM2_Init+0xa4>)
 80008ba:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80008be:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80008c0:	4b1f      	ldr	r3, [pc, #124]	@ (8000940 <MX_TIM2_Init+0xa4>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008c6:	4b1e      	ldr	r3, [pc, #120]	@ (8000940 <MX_TIM2_Init+0xa4>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80008cc:	4b1c      	ldr	r3, [pc, #112]	@ (8000940 <MX_TIM2_Init+0xa4>)
 80008ce:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80008d2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008d4:	4b1a      	ldr	r3, [pc, #104]	@ (8000940 <MX_TIM2_Init+0xa4>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008da:	4b19      	ldr	r3, [pc, #100]	@ (8000940 <MX_TIM2_Init+0xa4>)
 80008dc:	2200      	movs	r2, #0
 80008de:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80008e0:	2303      	movs	r3, #3
 80008e2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80008e4:	2300      	movs	r3, #0
 80008e6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80008e8:	2301      	movs	r3, #1
 80008ea:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80008ec:	2300      	movs	r3, #0
 80008ee:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80008f0:	2300      	movs	r3, #0
 80008f2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80008f4:	2300      	movs	r3, #0
 80008f6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80008f8:	2301      	movs	r3, #1
 80008fa:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80008fc:	2300      	movs	r3, #0
 80008fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000900:	2300      	movs	r3, #0
 8000902:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000904:	f107 030c 	add.w	r3, r7, #12
 8000908:	4619      	mov	r1, r3
 800090a:	480d      	ldr	r0, [pc, #52]	@ (8000940 <MX_TIM2_Init+0xa4>)
 800090c:	f002 fde9 	bl	80034e2 <HAL_TIM_Encoder_Init>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000916:	f000 fac1 	bl	8000e9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800091a:	2300      	movs	r3, #0
 800091c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800091e:	2300      	movs	r3, #0
 8000920:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000922:	1d3b      	adds	r3, r7, #4
 8000924:	4619      	mov	r1, r3
 8000926:	4806      	ldr	r0, [pc, #24]	@ (8000940 <MX_TIM2_Init+0xa4>)
 8000928:	f003 fdea 	bl	8004500 <HAL_TIMEx_MasterConfigSynchronization>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000932:	f000 fab3 	bl	8000e9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000936:	bf00      	nop
 8000938:	3730      	adds	r7, #48	@ 0x30
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	20000154 	.word	0x20000154

08000944 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b08c      	sub	sp, #48	@ 0x30
 8000948:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800094a:	f107 030c 	add.w	r3, r7, #12
 800094e:	2224      	movs	r2, #36	@ 0x24
 8000950:	2100      	movs	r1, #0
 8000952:	4618      	mov	r0, r3
 8000954:	f004 fdd4 	bl	8005500 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000958:	1d3b      	adds	r3, r7, #4
 800095a:	2200      	movs	r2, #0
 800095c:	601a      	str	r2, [r3, #0]
 800095e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000960:	4b20      	ldr	r3, [pc, #128]	@ (80009e4 <MX_TIM3_Init+0xa0>)
 8000962:	4a21      	ldr	r2, [pc, #132]	@ (80009e8 <MX_TIM3_Init+0xa4>)
 8000964:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000966:	4b1f      	ldr	r3, [pc, #124]	@ (80009e4 <MX_TIM3_Init+0xa0>)
 8000968:	2200      	movs	r2, #0
 800096a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800096c:	4b1d      	ldr	r3, [pc, #116]	@ (80009e4 <MX_TIM3_Init+0xa0>)
 800096e:	2200      	movs	r2, #0
 8000970:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000972:	4b1c      	ldr	r3, [pc, #112]	@ (80009e4 <MX_TIM3_Init+0xa0>)
 8000974:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000978:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800097a:	4b1a      	ldr	r3, [pc, #104]	@ (80009e4 <MX_TIM3_Init+0xa0>)
 800097c:	2200      	movs	r2, #0
 800097e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000980:	4b18      	ldr	r3, [pc, #96]	@ (80009e4 <MX_TIM3_Init+0xa0>)
 8000982:	2200      	movs	r2, #0
 8000984:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000986:	2303      	movs	r3, #3
 8000988:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800098a:	2300      	movs	r3, #0
 800098c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800098e:	2301      	movs	r3, #1
 8000990:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000992:	2300      	movs	r3, #0
 8000994:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000996:	2300      	movs	r3, #0
 8000998:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800099a:	2300      	movs	r3, #0
 800099c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800099e:	2301      	movs	r3, #1
 80009a0:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80009a2:	2300      	movs	r3, #0
 80009a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80009a6:	2300      	movs	r3, #0
 80009a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80009aa:	f107 030c 	add.w	r3, r7, #12
 80009ae:	4619      	mov	r1, r3
 80009b0:	480c      	ldr	r0, [pc, #48]	@ (80009e4 <MX_TIM3_Init+0xa0>)
 80009b2:	f002 fd96 	bl	80034e2 <HAL_TIM_Encoder_Init>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80009bc:	f000 fa6e 	bl	8000e9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009c0:	2300      	movs	r3, #0
 80009c2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009c4:	2300      	movs	r3, #0
 80009c6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80009c8:	1d3b      	adds	r3, r7, #4
 80009ca:	4619      	mov	r1, r3
 80009cc:	4805      	ldr	r0, [pc, #20]	@ (80009e4 <MX_TIM3_Init+0xa0>)
 80009ce:	f003 fd97 	bl	8004500 <HAL_TIMEx_MasterConfigSynchronization>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80009d8:	f000 fa60 	bl	8000e9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80009dc:	bf00      	nop
 80009de:	3730      	adds	r7, #48	@ 0x30
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	2000019c 	.word	0x2000019c
 80009e8:	40000400 	.word	0x40000400

080009ec <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b08a      	sub	sp, #40	@ 0x28
 80009f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009f2:	f107 0318 	add.w	r3, r7, #24
 80009f6:	2200      	movs	r2, #0
 80009f8:	601a      	str	r2, [r3, #0]
 80009fa:	605a      	str	r2, [r3, #4]
 80009fc:	609a      	str	r2, [r3, #8]
 80009fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a00:	f107 0310 	add.w	r3, r7, #16
 8000a04:	2200      	movs	r2, #0
 8000a06:	601a      	str	r2, [r3, #0]
 8000a08:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000a0a:	463b      	mov	r3, r7
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	601a      	str	r2, [r3, #0]
 8000a10:	605a      	str	r2, [r3, #4]
 8000a12:	609a      	str	r2, [r3, #8]
 8000a14:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000a16:	4b2b      	ldr	r3, [pc, #172]	@ (8000ac4 <MX_TIM4_Init+0xd8>)
 8000a18:	4a2b      	ldr	r2, [pc, #172]	@ (8000ac8 <MX_TIM4_Init+0xdc>)
 8000a1a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 16-1;
 8000a1c:	4b29      	ldr	r3, [pc, #164]	@ (8000ac4 <MX_TIM4_Init+0xd8>)
 8000a1e:	220f      	movs	r2, #15
 8000a20:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a22:	4b28      	ldr	r3, [pc, #160]	@ (8000ac4 <MX_TIM4_Init+0xd8>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65536-1;
 8000a28:	4b26      	ldr	r3, [pc, #152]	@ (8000ac4 <MX_TIM4_Init+0xd8>)
 8000a2a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000a2e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a30:	4b24      	ldr	r3, [pc, #144]	@ (8000ac4 <MX_TIM4_Init+0xd8>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a36:	4b23      	ldr	r3, [pc, #140]	@ (8000ac4 <MX_TIM4_Init+0xd8>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000a3c:	4821      	ldr	r0, [pc, #132]	@ (8000ac4 <MX_TIM4_Init+0xd8>)
 8000a3e:	f002 fc4f 	bl	80032e0 <HAL_TIM_Base_Init>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <MX_TIM4_Init+0x60>
  {
    Error_Handler();
 8000a48:	f000 fa28 	bl	8000e9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a4c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a50:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000a52:	f107 0318 	add.w	r3, r7, #24
 8000a56:	4619      	mov	r1, r3
 8000a58:	481a      	ldr	r0, [pc, #104]	@ (8000ac4 <MX_TIM4_Init+0xd8>)
 8000a5a:	f003 f837 	bl	8003acc <HAL_TIM_ConfigClockSource>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8000a64:	f000 fa1a 	bl	8000e9c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8000a68:	4816      	ldr	r0, [pc, #88]	@ (8000ac4 <MX_TIM4_Init+0xd8>)
 8000a6a:	f002 fce1 	bl	8003430 <HAL_TIM_IC_Init>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8000a74:	f000 fa12 	bl	8000e9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000a80:	f107 0310 	add.w	r3, r7, #16
 8000a84:	4619      	mov	r1, r3
 8000a86:	480f      	ldr	r0, [pc, #60]	@ (8000ac4 <MX_TIM4_Init+0xd8>)
 8000a88:	f003 fd3a 	bl	8004500 <HAL_TIMEx_MasterConfigSynchronization>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <MX_TIM4_Init+0xaa>
  {
    Error_Handler();
 8000a92:	f000 fa03 	bl	8000e9c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000a96:	2300      	movs	r3, #0
 8000a98:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000aa6:	463b      	mov	r3, r7
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	4619      	mov	r1, r3
 8000aac:	4805      	ldr	r0, [pc, #20]	@ (8000ac4 <MX_TIM4_Init+0xd8>)
 8000aae:	f002 feae 	bl	800380e <HAL_TIM_IC_ConfigChannel>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <MX_TIM4_Init+0xd0>
  {
    Error_Handler();
 8000ab8:	f000 f9f0 	bl	8000e9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000abc:	bf00      	nop
 8000abe:	3728      	adds	r7, #40	@ 0x28
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	200001e4 	.word	0x200001e4
 8000ac8:	40000800 	.word	0x40000800

08000acc <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ad2:	463b      	mov	r3, r7
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	601a      	str	r2, [r3, #0]
 8000ad8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000ada:	4b15      	ldr	r3, [pc, #84]	@ (8000b30 <MX_TIM6_Init+0x64>)
 8000adc:	4a15      	ldr	r2, [pc, #84]	@ (8000b34 <MX_TIM6_Init+0x68>)
 8000ade:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 16-1;
 8000ae0:	4b13      	ldr	r3, [pc, #76]	@ (8000b30 <MX_TIM6_Init+0x64>)
 8000ae2:	220f      	movs	r2, #15
 8000ae4:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ae6:	4b12      	ldr	r3, [pc, #72]	@ (8000b30 <MX_TIM6_Init+0x64>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65536-1;
 8000aec:	4b10      	ldr	r3, [pc, #64]	@ (8000b30 <MX_TIM6_Init+0x64>)
 8000aee:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000af2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000af4:	4b0e      	ldr	r3, [pc, #56]	@ (8000b30 <MX_TIM6_Init+0x64>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000afa:	480d      	ldr	r0, [pc, #52]	@ (8000b30 <MX_TIM6_Init+0x64>)
 8000afc:	f002 fbf0 	bl	80032e0 <HAL_TIM_Base_Init>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8000b06:	f000 f9c9 	bl	8000e9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000b12:	463b      	mov	r3, r7
 8000b14:	4619      	mov	r1, r3
 8000b16:	4806      	ldr	r0, [pc, #24]	@ (8000b30 <MX_TIM6_Init+0x64>)
 8000b18:	f003 fcf2 	bl	8004500 <HAL_TIMEx_MasterConfigSynchronization>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8000b22:	f000 f9bb 	bl	8000e9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000b26:	bf00      	nop
 8000b28:	3708      	adds	r7, #8
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	2000022c 	.word	0x2000022c
 8000b34:	40001000 	.word	0x40001000

08000b38 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b3e:	463b      	mov	r3, r7
 8000b40:	2200      	movs	r2, #0
 8000b42:	601a      	str	r2, [r3, #0]
 8000b44:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000b46:	4b15      	ldr	r3, [pc, #84]	@ (8000b9c <MX_TIM7_Init+0x64>)
 8000b48:	4a15      	ldr	r2, [pc, #84]	@ (8000ba0 <MX_TIM7_Init+0x68>)
 8000b4a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 2-1;
 8000b4c:	4b13      	ldr	r3, [pc, #76]	@ (8000b9c <MX_TIM7_Init+0x64>)
 8000b4e:	2201      	movs	r2, #1
 8000b50:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b52:	4b12      	ldr	r3, [pc, #72]	@ (8000b9c <MX_TIM7_Init+0x64>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 16000-1;
 8000b58:	4b10      	ldr	r3, [pc, #64]	@ (8000b9c <MX_TIM7_Init+0x64>)
 8000b5a:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 8000b5e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b60:	4b0e      	ldr	r3, [pc, #56]	@ (8000b9c <MX_TIM7_Init+0x64>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000b66:	480d      	ldr	r0, [pc, #52]	@ (8000b9c <MX_TIM7_Init+0x64>)
 8000b68:	f002 fbba 	bl	80032e0 <HAL_TIM_Base_Init>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8000b72:	f000 f993 	bl	8000e9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b76:	2300      	movs	r3, #0
 8000b78:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000b7e:	463b      	mov	r3, r7
 8000b80:	4619      	mov	r1, r3
 8000b82:	4806      	ldr	r0, [pc, #24]	@ (8000b9c <MX_TIM7_Init+0x64>)
 8000b84:	f003 fcbc 	bl	8004500 <HAL_TIMEx_MasterConfigSynchronization>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8000b8e:	f000 f985 	bl	8000e9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000b92:	bf00      	nop
 8000b94:	3708      	adds	r7, #8
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	20000274 	.word	0x20000274
 8000ba0:	40001400 	.word	0x40001400

08000ba4 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b096      	sub	sp, #88	@ 0x58
 8000ba8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000baa:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000bae:	2200      	movs	r2, #0
 8000bb0:	601a      	str	r2, [r3, #0]
 8000bb2:	605a      	str	r2, [r3, #4]
 8000bb4:	609a      	str	r2, [r3, #8]
 8000bb6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bb8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	601a      	str	r2, [r3, #0]
 8000bc0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bc2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	601a      	str	r2, [r3, #0]
 8000bca:	605a      	str	r2, [r3, #4]
 8000bcc:	609a      	str	r2, [r3, #8]
 8000bce:	60da      	str	r2, [r3, #12]
 8000bd0:	611a      	str	r2, [r3, #16]
 8000bd2:	615a      	str	r2, [r3, #20]
 8000bd4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000bd6:	1d3b      	adds	r3, r7, #4
 8000bd8:	2220      	movs	r2, #32
 8000bda:	2100      	movs	r1, #0
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f004 fc8f 	bl	8005500 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000be2:	4b44      	ldr	r3, [pc, #272]	@ (8000cf4 <MX_TIM8_Init+0x150>)
 8000be4:	4a44      	ldr	r2, [pc, #272]	@ (8000cf8 <MX_TIM8_Init+0x154>)
 8000be6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000be8:	4b42      	ldr	r3, [pc, #264]	@ (8000cf4 <MX_TIM8_Init+0x150>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bee:	4b41      	ldr	r3, [pc, #260]	@ (8000cf4 <MX_TIM8_Init+0x150>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 7200-1;
 8000bf4:	4b3f      	ldr	r3, [pc, #252]	@ (8000cf4 <MX_TIM8_Init+0x150>)
 8000bf6:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8000bfa:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bfc:	4b3d      	ldr	r3, [pc, #244]	@ (8000cf4 <MX_TIM8_Init+0x150>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000c02:	4b3c      	ldr	r3, [pc, #240]	@ (8000cf4 <MX_TIM8_Init+0x150>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c08:	4b3a      	ldr	r3, [pc, #232]	@ (8000cf4 <MX_TIM8_Init+0x150>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000c0e:	4839      	ldr	r0, [pc, #228]	@ (8000cf4 <MX_TIM8_Init+0x150>)
 8000c10:	f002 fb66 	bl	80032e0 <HAL_TIM_Base_Init>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8000c1a:	f000 f93f 	bl	8000e9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c1e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c22:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000c24:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000c28:	4619      	mov	r1, r3
 8000c2a:	4832      	ldr	r0, [pc, #200]	@ (8000cf4 <MX_TIM8_Init+0x150>)
 8000c2c:	f002 ff4e 	bl	8003acc <HAL_TIM_ConfigClockSource>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8000c36:	f000 f931 	bl	8000e9c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000c3a:	482e      	ldr	r0, [pc, #184]	@ (8000cf4 <MX_TIM8_Init+0x150>)
 8000c3c:	f002 fb9f 	bl	800337e <HAL_TIM_PWM_Init>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8000c46:	f000 f929 	bl	8000e9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000c52:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000c56:	4619      	mov	r1, r3
 8000c58:	4826      	ldr	r0, [pc, #152]	@ (8000cf4 <MX_TIM8_Init+0x150>)
 8000c5a:	f003 fc51 	bl	8004500 <HAL_TIMEx_MasterConfigSynchronization>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8000c64:	f000 f91a 	bl	8000e9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c68:	2360      	movs	r3, #96	@ 0x60
 8000c6a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c70:	2300      	movs	r3, #0
 8000c72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000c74:	2300      	movs	r3, #0
 8000c76:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c80:	2300      	movs	r3, #0
 8000c82:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c84:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c88:	2200      	movs	r2, #0
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	4819      	ldr	r0, [pc, #100]	@ (8000cf4 <MX_TIM8_Init+0x150>)
 8000c8e:	f002 fe5b 	bl	8003948 <HAL_TIM_PWM_ConfigChannel>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8000c98:	f000 f900 	bl	8000e9c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c9c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ca0:	2204      	movs	r2, #4
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	4813      	ldr	r0, [pc, #76]	@ (8000cf4 <MX_TIM8_Init+0x150>)
 8000ca6:	f002 fe4f 	bl	8003948 <HAL_TIM_PWM_ConfigChannel>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d001      	beq.n	8000cb4 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8000cb0:	f000 f8f4 	bl	8000e9c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000cc8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ccc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000cd2:	1d3b      	adds	r3, r7, #4
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	4807      	ldr	r0, [pc, #28]	@ (8000cf4 <MX_TIM8_Init+0x150>)
 8000cd8:	f003 fc8e 	bl	80045f8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 8000ce2:	f000 f8db 	bl	8000e9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000ce6:	4803      	ldr	r0, [pc, #12]	@ (8000cf4 <MX_TIM8_Init+0x150>)
 8000ce8:	f000 fc58 	bl	800159c <HAL_TIM_MspPostInit>

}
 8000cec:	bf00      	nop
 8000cee:	3758      	adds	r7, #88	@ 0x58
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	200002bc 	.word	0x200002bc
 8000cf8:	40010400 	.word	0x40010400

08000cfc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d00:	4b11      	ldr	r3, [pc, #68]	@ (8000d48 <MX_USART3_UART_Init+0x4c>)
 8000d02:	4a12      	ldr	r2, [pc, #72]	@ (8000d4c <MX_USART3_UART_Init+0x50>)
 8000d04:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000d06:	4b10      	ldr	r3, [pc, #64]	@ (8000d48 <MX_USART3_UART_Init+0x4c>)
 8000d08:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d0c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d0e:	4b0e      	ldr	r3, [pc, #56]	@ (8000d48 <MX_USART3_UART_Init+0x4c>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d14:	4b0c      	ldr	r3, [pc, #48]	@ (8000d48 <MX_USART3_UART_Init+0x4c>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d1a:	4b0b      	ldr	r3, [pc, #44]	@ (8000d48 <MX_USART3_UART_Init+0x4c>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d20:	4b09      	ldr	r3, [pc, #36]	@ (8000d48 <MX_USART3_UART_Init+0x4c>)
 8000d22:	220c      	movs	r2, #12
 8000d24:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d26:	4b08      	ldr	r3, [pc, #32]	@ (8000d48 <MX_USART3_UART_Init+0x4c>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d2c:	4b06      	ldr	r3, [pc, #24]	@ (8000d48 <MX_USART3_UART_Init+0x4c>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d32:	4805      	ldr	r0, [pc, #20]	@ (8000d48 <MX_USART3_UART_Init+0x4c>)
 8000d34:	f003 fcc6 	bl	80046c4 <HAL_UART_Init>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000d3e:	f000 f8ad 	bl	8000e9c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d42:	bf00      	nop
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	20000304 	.word	0x20000304
 8000d4c:	40004800 	.word	0x40004800

08000d50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b08a      	sub	sp, #40	@ 0x28
 8000d54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d56:	f107 0314 	add.w	r3, r7, #20
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	601a      	str	r2, [r3, #0]
 8000d5e:	605a      	str	r2, [r3, #4]
 8000d60:	609a      	str	r2, [r3, #8]
 8000d62:	60da      	str	r2, [r3, #12]
 8000d64:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d66:	2300      	movs	r3, #0
 8000d68:	613b      	str	r3, [r7, #16]
 8000d6a:	4b48      	ldr	r3, [pc, #288]	@ (8000e8c <MX_GPIO_Init+0x13c>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d6e:	4a47      	ldr	r2, [pc, #284]	@ (8000e8c <MX_GPIO_Init+0x13c>)
 8000d70:	f043 0310 	orr.w	r3, r3, #16
 8000d74:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d76:	4b45      	ldr	r3, [pc, #276]	@ (8000e8c <MX_GPIO_Init+0x13c>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d7a:	f003 0310 	and.w	r3, r3, #16
 8000d7e:	613b      	str	r3, [r7, #16]
 8000d80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d82:	2300      	movs	r3, #0
 8000d84:	60fb      	str	r3, [r7, #12]
 8000d86:	4b41      	ldr	r3, [pc, #260]	@ (8000e8c <MX_GPIO_Init+0x13c>)
 8000d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d8a:	4a40      	ldr	r2, [pc, #256]	@ (8000e8c <MX_GPIO_Init+0x13c>)
 8000d8c:	f043 0304 	orr.w	r3, r3, #4
 8000d90:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d92:	4b3e      	ldr	r3, [pc, #248]	@ (8000e8c <MX_GPIO_Init+0x13c>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d96:	f003 0304 	and.w	r3, r3, #4
 8000d9a:	60fb      	str	r3, [r7, #12]
 8000d9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d9e:	2300      	movs	r3, #0
 8000da0:	60bb      	str	r3, [r7, #8]
 8000da2:	4b3a      	ldr	r3, [pc, #232]	@ (8000e8c <MX_GPIO_Init+0x13c>)
 8000da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000da6:	4a39      	ldr	r2, [pc, #228]	@ (8000e8c <MX_GPIO_Init+0x13c>)
 8000da8:	f043 0301 	orr.w	r3, r3, #1
 8000dac:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dae:	4b37      	ldr	r3, [pc, #220]	@ (8000e8c <MX_GPIO_Init+0x13c>)
 8000db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000db2:	f003 0301 	and.w	r3, r3, #1
 8000db6:	60bb      	str	r3, [r7, #8]
 8000db8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dba:	2300      	movs	r3, #0
 8000dbc:	607b      	str	r3, [r7, #4]
 8000dbe:	4b33      	ldr	r3, [pc, #204]	@ (8000e8c <MX_GPIO_Init+0x13c>)
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dc2:	4a32      	ldr	r2, [pc, #200]	@ (8000e8c <MX_GPIO_Init+0x13c>)
 8000dc4:	f043 0308 	orr.w	r3, r3, #8
 8000dc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dca:	4b30      	ldr	r3, [pc, #192]	@ (8000e8c <MX_GPIO_Init+0x13c>)
 8000dcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dce:	f003 0308 	and.w	r3, r3, #8
 8000dd2:	607b      	str	r3, [r7, #4]
 8000dd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	603b      	str	r3, [r7, #0]
 8000dda:	4b2c      	ldr	r3, [pc, #176]	@ (8000e8c <MX_GPIO_Init+0x13c>)
 8000ddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dde:	4a2b      	ldr	r2, [pc, #172]	@ (8000e8c <MX_GPIO_Init+0x13c>)
 8000de0:	f043 0302 	orr.w	r3, r3, #2
 8000de4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000de6:	4b29      	ldr	r3, [pc, #164]	@ (8000e8c <MX_GPIO_Init+0x13c>)
 8000de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dea:	f003 0302 	and.w	r3, r3, #2
 8000dee:	603b      	str	r3, [r7, #0]
 8000df0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, OLED_SCLK_Pin|OLED_SDIN_Pin|OLED_RESET__Pin|OLED_DATA_COMMAND__Pin, GPIO_PIN_RESET);
 8000df2:	2200      	movs	r2, #0
 8000df4:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 8000df8:	4825      	ldr	r0, [pc, #148]	@ (8000e90 <MX_GPIO_Init+0x140>)
 8000dfa:	f001 fc93 	bl	8002724 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MotorA_AIN2_Pin|MotorA_AIN1_Pin|MotorrB_AIN1_Pin|MotorB_AIN2_Pin, GPIO_PIN_RESET);
 8000dfe:	2200      	movs	r2, #0
 8000e00:	213c      	movs	r1, #60	@ 0x3c
 8000e02:	4824      	ldr	r0, [pc, #144]	@ (8000e94 <MX_GPIO_Init+0x144>)
 8000e04:	f001 fc8e 	bl	8002724 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(US_Trigger_GPIO_Port, US_Trigger_Pin, GPIO_PIN_RESET);
 8000e08:	2200      	movs	r2, #0
 8000e0a:	2180      	movs	r1, #128	@ 0x80
 8000e0c:	4822      	ldr	r0, [pc, #136]	@ (8000e98 <MX_GPIO_Init+0x148>)
 8000e0e:	f001 fc89 	bl	8002724 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OLED_SCLK_Pin OLED_SDIN_Pin OLED_RESET__Pin OLED_DATA_COMMAND__Pin */
  GPIO_InitStruct.Pin = OLED_SCLK_Pin|OLED_SDIN_Pin|OLED_RESET__Pin|OLED_DATA_COMMAND__Pin;
 8000e12:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8000e16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e18:	2301      	movs	r3, #1
 8000e1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e20:	2300      	movs	r3, #0
 8000e22:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e24:	f107 0314 	add.w	r3, r7, #20
 8000e28:	4619      	mov	r1, r3
 8000e2a:	4819      	ldr	r0, [pc, #100]	@ (8000e90 <MX_GPIO_Init+0x140>)
 8000e2c:	f001 fade 	bl	80023ec <HAL_GPIO_Init>

  /*Configure GPIO pins : MotorA_AIN2_Pin MotorA_AIN1_Pin MotorrB_AIN1_Pin MotorB_AIN2_Pin */
  GPIO_InitStruct.Pin = MotorA_AIN2_Pin|MotorA_AIN1_Pin|MotorrB_AIN1_Pin|MotorB_AIN2_Pin;
 8000e30:	233c      	movs	r3, #60	@ 0x3c
 8000e32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e34:	2301      	movs	r3, #1
 8000e36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e40:	f107 0314 	add.w	r3, r7, #20
 8000e44:	4619      	mov	r1, r3
 8000e46:	4813      	ldr	r0, [pc, #76]	@ (8000e94 <MX_GPIO_Init+0x144>)
 8000e48:	f001 fad0 	bl	80023ec <HAL_GPIO_Init>

  /*Configure GPIO pin : User_Button_Pin */
  GPIO_InitStruct.Pin = User_Button_Pin;
 8000e4c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e52:	2300      	movs	r3, #0
 8000e54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e56:	2301      	movs	r3, #1
 8000e58:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(User_Button_GPIO_Port, &GPIO_InitStruct);
 8000e5a:	f107 0314 	add.w	r3, r7, #20
 8000e5e:	4619      	mov	r1, r3
 8000e60:	480d      	ldr	r0, [pc, #52]	@ (8000e98 <MX_GPIO_Init+0x148>)
 8000e62:	f001 fac3 	bl	80023ec <HAL_GPIO_Init>

  /*Configure GPIO pin : US_Trigger_Pin */
  GPIO_InitStruct.Pin = US_Trigger_Pin;
 8000e66:	2380      	movs	r3, #128	@ 0x80
 8000e68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e72:	2300      	movs	r3, #0
 8000e74:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(US_Trigger_GPIO_Port, &GPIO_InitStruct);
 8000e76:	f107 0314 	add.w	r3, r7, #20
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	4806      	ldr	r0, [pc, #24]	@ (8000e98 <MX_GPIO_Init+0x148>)
 8000e7e:	f001 fab5 	bl	80023ec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e82:	bf00      	nop
 8000e84:	3728      	adds	r7, #40	@ 0x28
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	40023800 	.word	0x40023800
 8000e90:	40021000 	.word	0x40021000
 8000e94:	40020000 	.word	0x40020000
 8000e98:	40020c00 	.word	0x40020c00

08000e9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ea0:	b672      	cpsid	i
}
 8000ea2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ea4:	bf00      	nop
 8000ea6:	e7fd      	b.n	8000ea4 <Error_Handler+0x8>

08000ea8 <OLED_Refresh_Gram>:

#include "../Inc/oledfont.h"

uint8_t OLED_GRAM[128][8];	 
void OLED_Refresh_Gram(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
	uint8_t i,n;		    
	for(i=0;i<8;i++)  
 8000eae:	2300      	movs	r3, #0
 8000eb0:	71fb      	strb	r3, [r7, #7]
 8000eb2:	e026      	b.n	8000f02 <OLED_Refresh_Gram+0x5a>
	{  
		OLED_WR_Byte (0xb0+i,OLED_CMD);    
 8000eb4:	79fb      	ldrb	r3, [r7, #7]
 8000eb6:	3b50      	subs	r3, #80	@ 0x50
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	2100      	movs	r1, #0
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f000 f82b 	bl	8000f18 <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);      
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	2000      	movs	r0, #0
 8000ec6:	f000 f827 	bl	8000f18 <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);        
 8000eca:	2100      	movs	r1, #0
 8000ecc:	2010      	movs	r0, #16
 8000ece:	f000 f823 	bl	8000f18 <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(OLED_GRAM[n][i],OLED_DATA); 
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	71bb      	strb	r3, [r7, #6]
 8000ed6:	e00d      	b.n	8000ef4 <OLED_Refresh_Gram+0x4c>
 8000ed8:	79ba      	ldrb	r2, [r7, #6]
 8000eda:	79fb      	ldrb	r3, [r7, #7]
 8000edc:	490d      	ldr	r1, [pc, #52]	@ (8000f14 <OLED_Refresh_Gram+0x6c>)
 8000ede:	00d2      	lsls	r2, r2, #3
 8000ee0:	440a      	add	r2, r1
 8000ee2:	4413      	add	r3, r2
 8000ee4:	781b      	ldrb	r3, [r3, #0]
 8000ee6:	2101      	movs	r1, #1
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f000 f815 	bl	8000f18 <OLED_WR_Byte>
 8000eee:	79bb      	ldrb	r3, [r7, #6]
 8000ef0:	3301      	adds	r3, #1
 8000ef2:	71bb      	strb	r3, [r7, #6]
 8000ef4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	daed      	bge.n	8000ed8 <OLED_Refresh_Gram+0x30>
	for(i=0;i<8;i++)  
 8000efc:	79fb      	ldrb	r3, [r7, #7]
 8000efe:	3301      	adds	r3, #1
 8000f00:	71fb      	strb	r3, [r7, #7]
 8000f02:	79fb      	ldrb	r3, [r7, #7]
 8000f04:	2b07      	cmp	r3, #7
 8000f06:	d9d5      	bls.n	8000eb4 <OLED_Refresh_Gram+0xc>
	}   
}
 8000f08:	bf00      	nop
 8000f0a:	bf00      	nop
 8000f0c:	3708      	adds	r7, #8
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	2000034c 	.word	0x2000034c

08000f18 <OLED_WR_Byte>:

void OLED_WR_Byte(uint8_t dat,uint8_t cmd)
{	
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b084      	sub	sp, #16
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	4603      	mov	r3, r0
 8000f20:	460a      	mov	r2, r1
 8000f22:	71fb      	strb	r3, [r7, #7]
 8000f24:	4613      	mov	r3, r2
 8000f26:	71bb      	strb	r3, [r7, #6]
	uint8_t i;			  
	if(cmd)
 8000f28:	79bb      	ldrb	r3, [r7, #6]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d006      	beq.n	8000f3c <OLED_WR_Byte+0x24>
	  OLED_RS_Set();
 8000f2e:	2201      	movs	r2, #1
 8000f30:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f34:	481c      	ldr	r0, [pc, #112]	@ (8000fa8 <OLED_WR_Byte+0x90>)
 8000f36:	f001 fbf5 	bl	8002724 <HAL_GPIO_WritePin>
 8000f3a:	e005      	b.n	8000f48 <OLED_WR_Byte+0x30>
	else 
	  OLED_RS_Clr();		  
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f42:	4819      	ldr	r0, [pc, #100]	@ (8000fa8 <OLED_WR_Byte+0x90>)
 8000f44:	f001 fbee 	bl	8002724 <HAL_GPIO_WritePin>
	for(i=0;i<8;i++)
 8000f48:	2300      	movs	r3, #0
 8000f4a:	73fb      	strb	r3, [r7, #15]
 8000f4c:	e01e      	b.n	8000f8c <OLED_WR_Byte+0x74>
	{			  
		OLED_SCLK_Clr();
 8000f4e:	2200      	movs	r2, #0
 8000f50:	2120      	movs	r1, #32
 8000f52:	4815      	ldr	r0, [pc, #84]	@ (8000fa8 <OLED_WR_Byte+0x90>)
 8000f54:	f001 fbe6 	bl	8002724 <HAL_GPIO_WritePin>
		if(dat&0x80)
 8000f58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	da05      	bge.n	8000f6c <OLED_WR_Byte+0x54>
		   OLED_SDIN_Set();
 8000f60:	2201      	movs	r2, #1
 8000f62:	2140      	movs	r1, #64	@ 0x40
 8000f64:	4810      	ldr	r0, [pc, #64]	@ (8000fa8 <OLED_WR_Byte+0x90>)
 8000f66:	f001 fbdd 	bl	8002724 <HAL_GPIO_WritePin>
 8000f6a:	e004      	b.n	8000f76 <OLED_WR_Byte+0x5e>
		else 
		   OLED_SDIN_Clr();
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	2140      	movs	r1, #64	@ 0x40
 8000f70:	480d      	ldr	r0, [pc, #52]	@ (8000fa8 <OLED_WR_Byte+0x90>)
 8000f72:	f001 fbd7 	bl	8002724 <HAL_GPIO_WritePin>
		OLED_SCLK_Set();
 8000f76:	2201      	movs	r2, #1
 8000f78:	2120      	movs	r1, #32
 8000f7a:	480b      	ldr	r0, [pc, #44]	@ (8000fa8 <OLED_WR_Byte+0x90>)
 8000f7c:	f001 fbd2 	bl	8002724 <HAL_GPIO_WritePin>
		dat<<=1;   
 8000f80:	79fb      	ldrb	r3, [r7, #7]
 8000f82:	005b      	lsls	r3, r3, #1
 8000f84:	71fb      	strb	r3, [r7, #7]
	for(i=0;i<8;i++)
 8000f86:	7bfb      	ldrb	r3, [r7, #15]
 8000f88:	3301      	adds	r3, #1
 8000f8a:	73fb      	strb	r3, [r7, #15]
 8000f8c:	7bfb      	ldrb	r3, [r7, #15]
 8000f8e:	2b07      	cmp	r3, #7
 8000f90:	d9dd      	bls.n	8000f4e <OLED_WR_Byte+0x36>
	}				 		  
	OLED_RS_Set();   	  
 8000f92:	2201      	movs	r2, #1
 8000f94:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f98:	4803      	ldr	r0, [pc, #12]	@ (8000fa8 <OLED_WR_Byte+0x90>)
 8000f9a:	f001 fbc3 	bl	8002724 <HAL_GPIO_WritePin>
} 
 8000f9e:	bf00      	nop
 8000fa0:	3710      	adds	r7, #16
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	40021000 	.word	0x40021000

08000fac <OLED_Clear>:

/**************************************************************************
Clear OLED
**************************************************************************/  
void OLED_Clear(void)  
{  
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
	uint8_t i,n;  
	for(i=0;i<8;i++)for(n=0;n<128;n++)OLED_GRAM[n][i]=0X00;  
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	71fb      	strb	r3, [r7, #7]
 8000fb6:	e014      	b.n	8000fe2 <OLED_Clear+0x36>
 8000fb8:	2300      	movs	r3, #0
 8000fba:	71bb      	strb	r3, [r7, #6]
 8000fbc:	e00a      	b.n	8000fd4 <OLED_Clear+0x28>
 8000fbe:	79ba      	ldrb	r2, [r7, #6]
 8000fc0:	79fb      	ldrb	r3, [r7, #7]
 8000fc2:	490c      	ldr	r1, [pc, #48]	@ (8000ff4 <OLED_Clear+0x48>)
 8000fc4:	00d2      	lsls	r2, r2, #3
 8000fc6:	440a      	add	r2, r1
 8000fc8:	4413      	add	r3, r2
 8000fca:	2200      	movs	r2, #0
 8000fcc:	701a      	strb	r2, [r3, #0]
 8000fce:	79bb      	ldrb	r3, [r7, #6]
 8000fd0:	3301      	adds	r3, #1
 8000fd2:	71bb      	strb	r3, [r7, #6]
 8000fd4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	daf0      	bge.n	8000fbe <OLED_Clear+0x12>
 8000fdc:	79fb      	ldrb	r3, [r7, #7]
 8000fde:	3301      	adds	r3, #1
 8000fe0:	71fb      	strb	r3, [r7, #7]
 8000fe2:	79fb      	ldrb	r3, [r7, #7]
 8000fe4:	2b07      	cmp	r3, #7
 8000fe6:	d9e7      	bls.n	8000fb8 <OLED_Clear+0xc>
	OLED_Refresh_Gram();//Refresh
 8000fe8:	f7ff ff5e 	bl	8000ea8 <OLED_Refresh_Gram>
}
 8000fec:	bf00      	nop
 8000fee:	3708      	adds	r7, #8
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	2000034c 	.word	0x2000034c

08000ff8 <OLED_Init>:
        p++;
    }  
}	 

void OLED_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
	HAL_PWR_EnableBkUpAccess(); //Enable access to the RTC and Backup Register
 8000ffc:	f001 fcf0 	bl	80029e0 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSE_CONFIG(RCC_LSE_OFF); //turn OFF the LSE oscillator, LSERDY flag goes low after 6 LSE oscillator clock cycles.
 8001000:	4b41      	ldr	r3, [pc, #260]	@ (8001108 <OLED_Init+0x110>)
 8001002:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001004:	4a40      	ldr	r2, [pc, #256]	@ (8001108 <OLED_Init+0x110>)
 8001006:	f023 0301 	bic.w	r3, r3, #1
 800100a:	6713      	str	r3, [r2, #112]	@ 0x70
 800100c:	4b3e      	ldr	r3, [pc, #248]	@ (8001108 <OLED_Init+0x110>)
 800100e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001010:	4a3d      	ldr	r2, [pc, #244]	@ (8001108 <OLED_Init+0x110>)
 8001012:	f023 0304 	bic.w	r3, r3, #4
 8001016:	6713      	str	r3, [r2, #112]	@ 0x70
	                                   //LSE oscillator switch off to let PC13 PC14 PC15 be IO
	
	
	HAL_PWR_DisableBkUpAccess();
 8001018:	f001 fcf6 	bl	8002a08 <HAL_PWR_DisableBkUpAccess>
	
	OLED_RST_Clr();
 800101c:	2200      	movs	r2, #0
 800101e:	2180      	movs	r1, #128	@ 0x80
 8001020:	483a      	ldr	r0, [pc, #232]	@ (800110c <OLED_Init+0x114>)
 8001022:	f001 fb7f 	bl	8002724 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001026:	2064      	movs	r0, #100	@ 0x64
 8001028:	f000 fc7e 	bl	8001928 <HAL_Delay>
	OLED_RST_Set();
 800102c:	2201      	movs	r2, #1
 800102e:	2180      	movs	r1, #128	@ 0x80
 8001030:	4836      	ldr	r0, [pc, #216]	@ (800110c <OLED_Init+0x114>)
 8001032:	f001 fb77 	bl	8002724 <HAL_GPIO_WritePin>
	
	OLED_WR_Byte(0xAE,OLED_CMD); //Off Display
 8001036:	2100      	movs	r1, #0
 8001038:	20ae      	movs	r0, #174	@ 0xae
 800103a:	f7ff ff6d 	bl	8000f18 <OLED_WR_Byte>
	
	OLED_WR_Byte(0xD5,OLED_CMD); //Set Oscillator Division
 800103e:	2100      	movs	r1, #0
 8001040:	20d5      	movs	r0, #213	@ 0xd5
 8001042:	f7ff ff69 	bl	8000f18 <OLED_WR_Byte>
	OLED_WR_Byte(80,OLED_CMD);    //[3:0]: divide ratio of the DCLK, [7:4], set the oscillator frequency. Reset
 8001046:	2100      	movs	r1, #0
 8001048:	2050      	movs	r0, #80	@ 0x50
 800104a:	f7ff ff65 	bl	8000f18 <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD); //multiplex ratio
 800104e:	2100      	movs	r1, #0
 8001050:	20a8      	movs	r0, #168	@ 0xa8
 8001052:	f7ff ff61 	bl	8000f18 <OLED_WR_Byte>
	OLED_WR_Byte(0X3F,OLED_CMD); //duty = 0X3F(1/64) 
 8001056:	2100      	movs	r1, #0
 8001058:	203f      	movs	r0, #63	@ 0x3f
 800105a:	f7ff ff5d 	bl	8000f18 <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD);  //set display offset
 800105e:	2100      	movs	r1, #0
 8001060:	20d3      	movs	r0, #211	@ 0xd3
 8001062:	f7ff ff59 	bl	8000f18 <OLED_WR_Byte>
	OLED_WR_Byte(0X00,OLED_CMD); //0
 8001066:	2100      	movs	r1, #0
 8001068:	2000      	movs	r0, #0
 800106a:	f7ff ff55 	bl	8000f18 <OLED_WR_Byte>

	OLED_WR_Byte(0x40,OLED_CMD); //set display start line [5:0]- from 0-63. RESET
 800106e:	2100      	movs	r1, #0
 8001070:	2040      	movs	r0, #64	@ 0x40
 8001072:	f7ff ff51 	bl	8000f18 <OLED_WR_Byte>
													
	OLED_WR_Byte(0x8D,OLED_CMD); //Set charge pump
 8001076:	2100      	movs	r1, #0
 8001078:	208d      	movs	r0, #141	@ 0x8d
 800107a:	f7ff ff4d 	bl	8000f18 <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD); //Enable Charge Pump
 800107e:	2100      	movs	r1, #0
 8001080:	2014      	movs	r0, #20
 8001082:	f7ff ff49 	bl	8000f18 <OLED_WR_Byte>
	OLED_WR_Byte(0x20,OLED_CMD); //Set Memory Addressing Mode
 8001086:	2100      	movs	r1, #0
 8001088:	2020      	movs	r0, #32
 800108a:	f7ff ff45 	bl	8000f18 <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD); //Page Addressing Mode (RESET)
 800108e:	2100      	movs	r1, #0
 8001090:	2002      	movs	r0, #2
 8001092:	f7ff ff41 	bl	8000f18 <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD); //Set segment remap, bit0:0,0->0;1,0->127;
 8001096:	2100      	movs	r1, #0
 8001098:	20a1      	movs	r0, #161	@ 0xa1
 800109a:	f7ff ff3d 	bl	8000f18 <OLED_WR_Byte>
	OLED_WR_Byte(0xC0,OLED_CMD); //Set COM Output Scan Direction
 800109e:	2100      	movs	r1, #0
 80010a0:	20c0      	movs	r0, #192	@ 0xc0
 80010a2:	f7ff ff39 	bl	8000f18 <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD); //Set COM Pins
 80010a6:	2100      	movs	r1, #0
 80010a8:	20da      	movs	r0, #218	@ 0xda
 80010aa:	f7ff ff35 	bl	8000f18 <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD); //[5:4] setting
 80010ae:	2100      	movs	r1, #0
 80010b0:	2012      	movs	r0, #18
 80010b2:	f7ff ff31 	bl	8000f18 <OLED_WR_Byte>
	 
	OLED_WR_Byte(0x81,OLED_CMD); //Contrast Control
 80010b6:	2100      	movs	r1, #0
 80010b8:	2081      	movs	r0, #129	@ 0x81
 80010ba:	f7ff ff2d 	bl	8000f18 <OLED_WR_Byte>
	OLED_WR_Byte(0xEF,OLED_CMD); //1~256; Default: 0X7F
 80010be:	2100      	movs	r1, #0
 80010c0:	20ef      	movs	r0, #239	@ 0xef
 80010c2:	f7ff ff29 	bl	8000f18 <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD); //Set Pre-charge Period
 80010c6:	2100      	movs	r1, #0
 80010c8:	20d9      	movs	r0, #217	@ 0xd9
 80010ca:	f7ff ff25 	bl	8000f18 <OLED_WR_Byte>
	OLED_WR_Byte(0xf1,OLED_CMD); //[3:0],PHASE 1;[7:4],PHASE 2;
 80010ce:	2100      	movs	r1, #0
 80010d0:	20f1      	movs	r0, #241	@ 0xf1
 80010d2:	f7ff ff21 	bl	8000f18 <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD); //Set VCOMH
 80010d6:	2100      	movs	r1, #0
 80010d8:	20db      	movs	r0, #219	@ 0xdb
 80010da:	f7ff ff1d 	bl	8000f18 <OLED_WR_Byte>
	OLED_WR_Byte(0x30,OLED_CMD);  //[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
 80010de:	2100      	movs	r1, #0
 80010e0:	2030      	movs	r0, #48	@ 0x30
 80010e2:	f7ff ff19 	bl	8000f18 <OLED_WR_Byte>

	OLED_WR_Byte(0xA4,OLED_CMD); //Enable display outputs according to the GDDRAM contents
 80010e6:	2100      	movs	r1, #0
 80010e8:	20a4      	movs	r0, #164	@ 0xa4
 80010ea:	f7ff ff15 	bl	8000f18 <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD); //Set normal display   						   
 80010ee:	2100      	movs	r1, #0
 80010f0:	20a6      	movs	r0, #166	@ 0xa6
 80010f2:	f7ff ff11 	bl	8000f18 <OLED_WR_Byte>
	OLED_WR_Byte(0xAF,OLED_CMD); //DISPLAY ON	 
 80010f6:	2100      	movs	r1, #0
 80010f8:	20af      	movs	r0, #175	@ 0xaf
 80010fa:	f7ff ff0d 	bl	8000f18 <OLED_WR_Byte>
	OLED_Clear(); 
 80010fe:	f7ff ff55 	bl	8000fac <OLED_Clear>
}
 8001102:	bf00      	nop
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	40023800 	.word	0x40023800
 800110c:	40021000 	.word	0x40021000

08001110 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001116:	2300      	movs	r3, #0
 8001118:	607b      	str	r3, [r7, #4]
 800111a:	4b10      	ldr	r3, [pc, #64]	@ (800115c <HAL_MspInit+0x4c>)
 800111c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800111e:	4a0f      	ldr	r2, [pc, #60]	@ (800115c <HAL_MspInit+0x4c>)
 8001120:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001124:	6453      	str	r3, [r2, #68]	@ 0x44
 8001126:	4b0d      	ldr	r3, [pc, #52]	@ (800115c <HAL_MspInit+0x4c>)
 8001128:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800112a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800112e:	607b      	str	r3, [r7, #4]
 8001130:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001132:	2300      	movs	r3, #0
 8001134:	603b      	str	r3, [r7, #0]
 8001136:	4b09      	ldr	r3, [pc, #36]	@ (800115c <HAL_MspInit+0x4c>)
 8001138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800113a:	4a08      	ldr	r2, [pc, #32]	@ (800115c <HAL_MspInit+0x4c>)
 800113c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001140:	6413      	str	r3, [r2, #64]	@ 0x40
 8001142:	4b06      	ldr	r3, [pc, #24]	@ (800115c <HAL_MspInit+0x4c>)
 8001144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001146:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800114a:	603b      	str	r3, [r7, #0]
 800114c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800114e:	bf00      	nop
 8001150:	370c      	adds	r7, #12
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	40023800 	.word	0x40023800

08001160 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b08c      	sub	sp, #48	@ 0x30
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001168:	f107 031c 	add.w	r3, r7, #28
 800116c:	2200      	movs	r2, #0
 800116e:	601a      	str	r2, [r3, #0]
 8001170:	605a      	str	r2, [r3, #4]
 8001172:	609a      	str	r2, [r3, #8]
 8001174:	60da      	str	r2, [r3, #12]
 8001176:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a36      	ldr	r2, [pc, #216]	@ (8001258 <HAL_ADC_MspInit+0xf8>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d130      	bne.n	80011e4 <HAL_ADC_MspInit+0x84>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001182:	2300      	movs	r3, #0
 8001184:	61bb      	str	r3, [r7, #24]
 8001186:	4b35      	ldr	r3, [pc, #212]	@ (800125c <HAL_ADC_MspInit+0xfc>)
 8001188:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800118a:	4a34      	ldr	r2, [pc, #208]	@ (800125c <HAL_ADC_MspInit+0xfc>)
 800118c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001190:	6453      	str	r3, [r2, #68]	@ 0x44
 8001192:	4b32      	ldr	r3, [pc, #200]	@ (800125c <HAL_ADC_MspInit+0xfc>)
 8001194:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001196:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800119a:	61bb      	str	r3, [r7, #24]
 800119c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800119e:	2300      	movs	r3, #0
 80011a0:	617b      	str	r3, [r7, #20]
 80011a2:	4b2e      	ldr	r3, [pc, #184]	@ (800125c <HAL_ADC_MspInit+0xfc>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011a6:	4a2d      	ldr	r2, [pc, #180]	@ (800125c <HAL_ADC_MspInit+0xfc>)
 80011a8:	f043 0304 	orr.w	r3, r3, #4
 80011ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ae:	4b2b      	ldr	r3, [pc, #172]	@ (800125c <HAL_ADC_MspInit+0xfc>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011b2:	f003 0304 	and.w	r3, r3, #4
 80011b6:	617b      	str	r3, [r7, #20]
 80011b8:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = Left_IR_V0_Pin;
 80011ba:	2308      	movs	r3, #8
 80011bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011be:	2303      	movs	r3, #3
 80011c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c2:	2300      	movs	r3, #0
 80011c4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(Left_IR_V0_GPIO_Port, &GPIO_InitStruct);
 80011c6:	f107 031c 	add.w	r3, r7, #28
 80011ca:	4619      	mov	r1, r3
 80011cc:	4824      	ldr	r0, [pc, #144]	@ (8001260 <HAL_ADC_MspInit+0x100>)
 80011ce:	f001 f90d 	bl	80023ec <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80011d2:	2200      	movs	r2, #0
 80011d4:	2100      	movs	r1, #0
 80011d6:	2012      	movs	r0, #18
 80011d8:	f001 f83f 	bl	800225a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80011dc:	2012      	movs	r0, #18
 80011de:	f001 f858 	bl	8002292 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80011e2:	e034      	b.n	800124e <HAL_ADC_MspInit+0xee>
  else if(hadc->Instance==ADC2)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a1e      	ldr	r2, [pc, #120]	@ (8001264 <HAL_ADC_MspInit+0x104>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d12f      	bne.n	800124e <HAL_ADC_MspInit+0xee>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80011ee:	2300      	movs	r3, #0
 80011f0:	613b      	str	r3, [r7, #16]
 80011f2:	4b1a      	ldr	r3, [pc, #104]	@ (800125c <HAL_ADC_MspInit+0xfc>)
 80011f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011f6:	4a19      	ldr	r2, [pc, #100]	@ (800125c <HAL_ADC_MspInit+0xfc>)
 80011f8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80011fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80011fe:	4b17      	ldr	r3, [pc, #92]	@ (800125c <HAL_ADC_MspInit+0xfc>)
 8001200:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001202:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001206:	613b      	str	r3, [r7, #16]
 8001208:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800120a:	2300      	movs	r3, #0
 800120c:	60fb      	str	r3, [r7, #12]
 800120e:	4b13      	ldr	r3, [pc, #76]	@ (800125c <HAL_ADC_MspInit+0xfc>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001212:	4a12      	ldr	r2, [pc, #72]	@ (800125c <HAL_ADC_MspInit+0xfc>)
 8001214:	f043 0304 	orr.w	r3, r3, #4
 8001218:	6313      	str	r3, [r2, #48]	@ 0x30
 800121a:	4b10      	ldr	r3, [pc, #64]	@ (800125c <HAL_ADC_MspInit+0xfc>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800121e:	f003 0304 	and.w	r3, r3, #4
 8001222:	60fb      	str	r3, [r7, #12]
 8001224:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Right_IR_V0_Pin;
 8001226:	2304      	movs	r3, #4
 8001228:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800122a:	2303      	movs	r3, #3
 800122c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122e:	2300      	movs	r3, #0
 8001230:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(Right_IR_V0_GPIO_Port, &GPIO_InitStruct);
 8001232:	f107 031c 	add.w	r3, r7, #28
 8001236:	4619      	mov	r1, r3
 8001238:	4809      	ldr	r0, [pc, #36]	@ (8001260 <HAL_ADC_MspInit+0x100>)
 800123a:	f001 f8d7 	bl	80023ec <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800123e:	2200      	movs	r2, #0
 8001240:	2100      	movs	r1, #0
 8001242:	2012      	movs	r0, #18
 8001244:	f001 f809 	bl	800225a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001248:	2012      	movs	r0, #18
 800124a:	f001 f822 	bl	8002292 <HAL_NVIC_EnableIRQ>
}
 800124e:	bf00      	nop
 8001250:	3730      	adds	r7, #48	@ 0x30
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	40012000 	.word	0x40012000
 800125c:	40023800 	.word	0x40023800
 8001260:	40020800 	.word	0x40020800
 8001264:	40012100 	.word	0x40012100

08001268 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b08a      	sub	sp, #40	@ 0x28
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001270:	f107 0314 	add.w	r3, r7, #20
 8001274:	2200      	movs	r2, #0
 8001276:	601a      	str	r2, [r3, #0]
 8001278:	605a      	str	r2, [r3, #4]
 800127a:	609a      	str	r2, [r3, #8]
 800127c:	60da      	str	r2, [r3, #12]
 800127e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a19      	ldr	r2, [pc, #100]	@ (80012ec <HAL_I2C_MspInit+0x84>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d12c      	bne.n	80012e4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800128a:	2300      	movs	r3, #0
 800128c:	613b      	str	r3, [r7, #16]
 800128e:	4b18      	ldr	r3, [pc, #96]	@ (80012f0 <HAL_I2C_MspInit+0x88>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001292:	4a17      	ldr	r2, [pc, #92]	@ (80012f0 <HAL_I2C_MspInit+0x88>)
 8001294:	f043 0302 	orr.w	r3, r3, #2
 8001298:	6313      	str	r3, [r2, #48]	@ 0x30
 800129a:	4b15      	ldr	r3, [pc, #84]	@ (80012f0 <HAL_I2C_MspInit+0x88>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800129e:	f003 0302 	and.w	r3, r3, #2
 80012a2:	613b      	str	r3, [r7, #16]
 80012a4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ICM_SCL_Pin|ICM_SDA_Pin;
 80012a6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80012aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012ac:	2312      	movs	r3, #18
 80012ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b0:	2300      	movs	r3, #0
 80012b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012b4:	2303      	movs	r3, #3
 80012b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012b8:	2304      	movs	r3, #4
 80012ba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012bc:	f107 0314 	add.w	r3, r7, #20
 80012c0:	4619      	mov	r1, r3
 80012c2:	480c      	ldr	r0, [pc, #48]	@ (80012f4 <HAL_I2C_MspInit+0x8c>)
 80012c4:	f001 f892 	bl	80023ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012c8:	2300      	movs	r3, #0
 80012ca:	60fb      	str	r3, [r7, #12]
 80012cc:	4b08      	ldr	r3, [pc, #32]	@ (80012f0 <HAL_I2C_MspInit+0x88>)
 80012ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012d0:	4a07      	ldr	r2, [pc, #28]	@ (80012f0 <HAL_I2C_MspInit+0x88>)
 80012d2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80012d6:	6413      	str	r3, [r2, #64]	@ 0x40
 80012d8:	4b05      	ldr	r3, [pc, #20]	@ (80012f0 <HAL_I2C_MspInit+0x88>)
 80012da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012e0:	60fb      	str	r3, [r7, #12]
 80012e2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80012e4:	bf00      	nop
 80012e6:	3728      	adds	r7, #40	@ 0x28
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	40005400 	.word	0x40005400
 80012f0:	40023800 	.word	0x40023800
 80012f4:	40020400 	.word	0x40020400

080012f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b08e      	sub	sp, #56	@ 0x38
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001300:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001304:	2200      	movs	r2, #0
 8001306:	601a      	str	r2, [r3, #0]
 8001308:	605a      	str	r2, [r3, #4]
 800130a:	609a      	str	r2, [r3, #8]
 800130c:	60da      	str	r2, [r3, #12]
 800130e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a4d      	ldr	r2, [pc, #308]	@ (800144c <HAL_TIM_Base_MspInit+0x154>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d116      	bne.n	8001348 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800131a:	2300      	movs	r3, #0
 800131c:	623b      	str	r3, [r7, #32]
 800131e:	4b4c      	ldr	r3, [pc, #304]	@ (8001450 <HAL_TIM_Base_MspInit+0x158>)
 8001320:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001322:	4a4b      	ldr	r2, [pc, #300]	@ (8001450 <HAL_TIM_Base_MspInit+0x158>)
 8001324:	f043 0301 	orr.w	r3, r3, #1
 8001328:	6453      	str	r3, [r2, #68]	@ 0x44
 800132a:	4b49      	ldr	r3, [pc, #292]	@ (8001450 <HAL_TIM_Base_MspInit+0x158>)
 800132c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800132e:	f003 0301 	and.w	r3, r3, #1
 8001332:	623b      	str	r3, [r7, #32]
 8001334:	6a3b      	ldr	r3, [r7, #32]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001336:	2200      	movs	r2, #0
 8001338:	2100      	movs	r1, #0
 800133a:	201b      	movs	r0, #27
 800133c:	f000 ff8d 	bl	800225a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001340:	201b      	movs	r0, #27
 8001342:	f000 ffa6 	bl	8002292 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001346:	e07d      	b.n	8001444 <HAL_TIM_Base_MspInit+0x14c>
  else if(htim_base->Instance==TIM4)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a41      	ldr	r2, [pc, #260]	@ (8001454 <HAL_TIM_Base_MspInit+0x15c>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d135      	bne.n	80013be <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001352:	2300      	movs	r3, #0
 8001354:	61fb      	str	r3, [r7, #28]
 8001356:	4b3e      	ldr	r3, [pc, #248]	@ (8001450 <HAL_TIM_Base_MspInit+0x158>)
 8001358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800135a:	4a3d      	ldr	r2, [pc, #244]	@ (8001450 <HAL_TIM_Base_MspInit+0x158>)
 800135c:	f043 0304 	orr.w	r3, r3, #4
 8001360:	6413      	str	r3, [r2, #64]	@ 0x40
 8001362:	4b3b      	ldr	r3, [pc, #236]	@ (8001450 <HAL_TIM_Base_MspInit+0x158>)
 8001364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001366:	f003 0304 	and.w	r3, r3, #4
 800136a:	61fb      	str	r3, [r7, #28]
 800136c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800136e:	2300      	movs	r3, #0
 8001370:	61bb      	str	r3, [r7, #24]
 8001372:	4b37      	ldr	r3, [pc, #220]	@ (8001450 <HAL_TIM_Base_MspInit+0x158>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001376:	4a36      	ldr	r2, [pc, #216]	@ (8001450 <HAL_TIM_Base_MspInit+0x158>)
 8001378:	f043 0308 	orr.w	r3, r3, #8
 800137c:	6313      	str	r3, [r2, #48]	@ 0x30
 800137e:	4b34      	ldr	r3, [pc, #208]	@ (8001450 <HAL_TIM_Base_MspInit+0x158>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001382:	f003 0308 	and.w	r3, r3, #8
 8001386:	61bb      	str	r3, [r7, #24]
 8001388:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800138a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800138e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001390:	2302      	movs	r3, #2
 8001392:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001394:	2300      	movs	r3, #0
 8001396:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001398:	2300      	movs	r3, #0
 800139a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800139c:	2302      	movs	r3, #2
 800139e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013a4:	4619      	mov	r1, r3
 80013a6:	482c      	ldr	r0, [pc, #176]	@ (8001458 <HAL_TIM_Base_MspInit+0x160>)
 80013a8:	f001 f820 	bl	80023ec <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80013ac:	2200      	movs	r2, #0
 80013ae:	2100      	movs	r1, #0
 80013b0:	201e      	movs	r0, #30
 80013b2:	f000 ff52 	bl	800225a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80013b6:	201e      	movs	r0, #30
 80013b8:	f000 ff6b 	bl	8002292 <HAL_NVIC_EnableIRQ>
}
 80013bc:	e042      	b.n	8001444 <HAL_TIM_Base_MspInit+0x14c>
  else if(htim_base->Instance==TIM6)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4a26      	ldr	r2, [pc, #152]	@ (800145c <HAL_TIM_Base_MspInit+0x164>)
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d10e      	bne.n	80013e6 <HAL_TIM_Base_MspInit+0xee>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80013c8:	2300      	movs	r3, #0
 80013ca:	617b      	str	r3, [r7, #20]
 80013cc:	4b20      	ldr	r3, [pc, #128]	@ (8001450 <HAL_TIM_Base_MspInit+0x158>)
 80013ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013d0:	4a1f      	ldr	r2, [pc, #124]	@ (8001450 <HAL_TIM_Base_MspInit+0x158>)
 80013d2:	f043 0310 	orr.w	r3, r3, #16
 80013d6:	6413      	str	r3, [r2, #64]	@ 0x40
 80013d8:	4b1d      	ldr	r3, [pc, #116]	@ (8001450 <HAL_TIM_Base_MspInit+0x158>)
 80013da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013dc:	f003 0310 	and.w	r3, r3, #16
 80013e0:	617b      	str	r3, [r7, #20]
 80013e2:	697b      	ldr	r3, [r7, #20]
}
 80013e4:	e02e      	b.n	8001444 <HAL_TIM_Base_MspInit+0x14c>
  else if(htim_base->Instance==TIM7)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a1d      	ldr	r2, [pc, #116]	@ (8001460 <HAL_TIM_Base_MspInit+0x168>)
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d116      	bne.n	800141e <HAL_TIM_Base_MspInit+0x126>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80013f0:	2300      	movs	r3, #0
 80013f2:	613b      	str	r3, [r7, #16]
 80013f4:	4b16      	ldr	r3, [pc, #88]	@ (8001450 <HAL_TIM_Base_MspInit+0x158>)
 80013f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013f8:	4a15      	ldr	r2, [pc, #84]	@ (8001450 <HAL_TIM_Base_MspInit+0x158>)
 80013fa:	f043 0320 	orr.w	r3, r3, #32
 80013fe:	6413      	str	r3, [r2, #64]	@ 0x40
 8001400:	4b13      	ldr	r3, [pc, #76]	@ (8001450 <HAL_TIM_Base_MspInit+0x158>)
 8001402:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001404:	f003 0320 	and.w	r3, r3, #32
 8001408:	613b      	str	r3, [r7, #16]
 800140a:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800140c:	2200      	movs	r2, #0
 800140e:	2100      	movs	r1, #0
 8001410:	2037      	movs	r0, #55	@ 0x37
 8001412:	f000 ff22 	bl	800225a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001416:	2037      	movs	r0, #55	@ 0x37
 8001418:	f000 ff3b 	bl	8002292 <HAL_NVIC_EnableIRQ>
}
 800141c:	e012      	b.n	8001444 <HAL_TIM_Base_MspInit+0x14c>
  else if(htim_base->Instance==TIM8)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4a10      	ldr	r2, [pc, #64]	@ (8001464 <HAL_TIM_Base_MspInit+0x16c>)
 8001424:	4293      	cmp	r3, r2
 8001426:	d10d      	bne.n	8001444 <HAL_TIM_Base_MspInit+0x14c>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001428:	2300      	movs	r3, #0
 800142a:	60fb      	str	r3, [r7, #12]
 800142c:	4b08      	ldr	r3, [pc, #32]	@ (8001450 <HAL_TIM_Base_MspInit+0x158>)
 800142e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001430:	4a07      	ldr	r2, [pc, #28]	@ (8001450 <HAL_TIM_Base_MspInit+0x158>)
 8001432:	f043 0302 	orr.w	r3, r3, #2
 8001436:	6453      	str	r3, [r2, #68]	@ 0x44
 8001438:	4b05      	ldr	r3, [pc, #20]	@ (8001450 <HAL_TIM_Base_MspInit+0x158>)
 800143a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800143c:	f003 0302 	and.w	r3, r3, #2
 8001440:	60fb      	str	r3, [r7, #12]
 8001442:	68fb      	ldr	r3, [r7, #12]
}
 8001444:	bf00      	nop
 8001446:	3738      	adds	r7, #56	@ 0x38
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	40010000 	.word	0x40010000
 8001450:	40023800 	.word	0x40023800
 8001454:	40000800 	.word	0x40000800
 8001458:	40020c00 	.word	0x40020c00
 800145c:	40001000 	.word	0x40001000
 8001460:	40001400 	.word	0x40001400
 8001464:	40010400 	.word	0x40010400

08001468 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b08c      	sub	sp, #48	@ 0x30
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001470:	f107 031c 	add.w	r3, r7, #28
 8001474:	2200      	movs	r2, #0
 8001476:	601a      	str	r2, [r3, #0]
 8001478:	605a      	str	r2, [r3, #4]
 800147a:	609a      	str	r2, [r3, #8]
 800147c:	60da      	str	r2, [r3, #12]
 800147e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001488:	d14b      	bne.n	8001522 <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800148a:	2300      	movs	r3, #0
 800148c:	61bb      	str	r3, [r7, #24]
 800148e:	4b3f      	ldr	r3, [pc, #252]	@ (800158c <HAL_TIM_Encoder_MspInit+0x124>)
 8001490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001492:	4a3e      	ldr	r2, [pc, #248]	@ (800158c <HAL_TIM_Encoder_MspInit+0x124>)
 8001494:	f043 0301 	orr.w	r3, r3, #1
 8001498:	6413      	str	r3, [r2, #64]	@ 0x40
 800149a:	4b3c      	ldr	r3, [pc, #240]	@ (800158c <HAL_TIM_Encoder_MspInit+0x124>)
 800149c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800149e:	f003 0301 	and.w	r3, r3, #1
 80014a2:	61bb      	str	r3, [r7, #24]
 80014a4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014a6:	2300      	movs	r3, #0
 80014a8:	617b      	str	r3, [r7, #20]
 80014aa:	4b38      	ldr	r3, [pc, #224]	@ (800158c <HAL_TIM_Encoder_MspInit+0x124>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ae:	4a37      	ldr	r2, [pc, #220]	@ (800158c <HAL_TIM_Encoder_MspInit+0x124>)
 80014b0:	f043 0301 	orr.w	r3, r3, #1
 80014b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80014b6:	4b35      	ldr	r3, [pc, #212]	@ (800158c <HAL_TIM_Encoder_MspInit+0x124>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ba:	f003 0301 	and.w	r3, r3, #1
 80014be:	617b      	str	r3, [r7, #20]
 80014c0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014c2:	2300      	movs	r3, #0
 80014c4:	613b      	str	r3, [r7, #16]
 80014c6:	4b31      	ldr	r3, [pc, #196]	@ (800158c <HAL_TIM_Encoder_MspInit+0x124>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ca:	4a30      	ldr	r2, [pc, #192]	@ (800158c <HAL_TIM_Encoder_MspInit+0x124>)
 80014cc:	f043 0302 	orr.w	r3, r3, #2
 80014d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014d2:	4b2e      	ldr	r3, [pc, #184]	@ (800158c <HAL_TIM_Encoder_MspInit+0x124>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014d6:	f003 0302 	and.w	r3, r3, #2
 80014da:	613b      	str	r3, [r7, #16]
 80014dc:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = MotorA_CH1_Pin;
 80014de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80014e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e4:	2302      	movs	r3, #2
 80014e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e8:	2300      	movs	r3, #0
 80014ea:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ec:	2300      	movs	r3, #0
 80014ee:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80014f0:	2301      	movs	r3, #1
 80014f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MotorA_CH1_GPIO_Port, &GPIO_InitStruct);
 80014f4:	f107 031c 	add.w	r3, r7, #28
 80014f8:	4619      	mov	r1, r3
 80014fa:	4825      	ldr	r0, [pc, #148]	@ (8001590 <HAL_TIM_Encoder_MspInit+0x128>)
 80014fc:	f000 ff76 	bl	80023ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MotorA_CH2_Pin;
 8001500:	2308      	movs	r3, #8
 8001502:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001504:	2302      	movs	r3, #2
 8001506:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001508:	2300      	movs	r3, #0
 800150a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800150c:	2300      	movs	r3, #0
 800150e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001510:	2301      	movs	r3, #1
 8001512:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MotorA_CH2_GPIO_Port, &GPIO_InitStruct);
 8001514:	f107 031c 	add.w	r3, r7, #28
 8001518:	4619      	mov	r1, r3
 800151a:	481e      	ldr	r0, [pc, #120]	@ (8001594 <HAL_TIM_Encoder_MspInit+0x12c>)
 800151c:	f000 ff66 	bl	80023ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001520:	e030      	b.n	8001584 <HAL_TIM_Encoder_MspInit+0x11c>
  else if(htim_encoder->Instance==TIM3)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4a1c      	ldr	r2, [pc, #112]	@ (8001598 <HAL_TIM_Encoder_MspInit+0x130>)
 8001528:	4293      	cmp	r3, r2
 800152a:	d12b      	bne.n	8001584 <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800152c:	2300      	movs	r3, #0
 800152e:	60fb      	str	r3, [r7, #12]
 8001530:	4b16      	ldr	r3, [pc, #88]	@ (800158c <HAL_TIM_Encoder_MspInit+0x124>)
 8001532:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001534:	4a15      	ldr	r2, [pc, #84]	@ (800158c <HAL_TIM_Encoder_MspInit+0x124>)
 8001536:	f043 0302 	orr.w	r3, r3, #2
 800153a:	6413      	str	r3, [r2, #64]	@ 0x40
 800153c:	4b13      	ldr	r3, [pc, #76]	@ (800158c <HAL_TIM_Encoder_MspInit+0x124>)
 800153e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001540:	f003 0302 	and.w	r3, r3, #2
 8001544:	60fb      	str	r3, [r7, #12]
 8001546:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001548:	2300      	movs	r3, #0
 800154a:	60bb      	str	r3, [r7, #8]
 800154c:	4b0f      	ldr	r3, [pc, #60]	@ (800158c <HAL_TIM_Encoder_MspInit+0x124>)
 800154e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001550:	4a0e      	ldr	r2, [pc, #56]	@ (800158c <HAL_TIM_Encoder_MspInit+0x124>)
 8001552:	f043 0301 	orr.w	r3, r3, #1
 8001556:	6313      	str	r3, [r2, #48]	@ 0x30
 8001558:	4b0c      	ldr	r3, [pc, #48]	@ (800158c <HAL_TIM_Encoder_MspInit+0x124>)
 800155a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800155c:	f003 0301 	and.w	r3, r3, #1
 8001560:	60bb      	str	r3, [r7, #8]
 8001562:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MotorB_CH1_Pin|MotorB_CH2_Pin;
 8001564:	23c0      	movs	r3, #192	@ 0xc0
 8001566:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001568:	2302      	movs	r3, #2
 800156a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156c:	2300      	movs	r3, #0
 800156e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001570:	2300      	movs	r3, #0
 8001572:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001574:	2302      	movs	r3, #2
 8001576:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001578:	f107 031c 	add.w	r3, r7, #28
 800157c:	4619      	mov	r1, r3
 800157e:	4804      	ldr	r0, [pc, #16]	@ (8001590 <HAL_TIM_Encoder_MspInit+0x128>)
 8001580:	f000 ff34 	bl	80023ec <HAL_GPIO_Init>
}
 8001584:	bf00      	nop
 8001586:	3730      	adds	r7, #48	@ 0x30
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	40023800 	.word	0x40023800
 8001590:	40020000 	.word	0x40020000
 8001594:	40020400 	.word	0x40020400
 8001598:	40000400 	.word	0x40000400

0800159c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b08a      	sub	sp, #40	@ 0x28
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a4:	f107 0314 	add.w	r3, r7, #20
 80015a8:	2200      	movs	r2, #0
 80015aa:	601a      	str	r2, [r3, #0]
 80015ac:	605a      	str	r2, [r3, #4]
 80015ae:	609a      	str	r2, [r3, #8]
 80015b0:	60da      	str	r2, [r3, #12]
 80015b2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a24      	ldr	r2, [pc, #144]	@ (800164c <HAL_TIM_MspPostInit+0xb0>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d11f      	bne.n	80015fe <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80015be:	2300      	movs	r3, #0
 80015c0:	613b      	str	r3, [r7, #16]
 80015c2:	4b23      	ldr	r3, [pc, #140]	@ (8001650 <HAL_TIM_MspPostInit+0xb4>)
 80015c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015c6:	4a22      	ldr	r2, [pc, #136]	@ (8001650 <HAL_TIM_MspPostInit+0xb4>)
 80015c8:	f043 0310 	orr.w	r3, r3, #16
 80015cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80015ce:	4b20      	ldr	r3, [pc, #128]	@ (8001650 <HAL_TIM_MspPostInit+0xb4>)
 80015d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015d2:	f003 0310 	and.w	r3, r3, #16
 80015d6:	613b      	str	r3, [r7, #16]
 80015d8:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = SERVO_PWM_Pin;
 80015da:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80015de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e0:	2302      	movs	r3, #2
 80015e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e4:	2300      	movs	r3, #0
 80015e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e8:	2300      	movs	r3, #0
 80015ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80015ec:	2301      	movs	r3, #1
 80015ee:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SERVO_PWM_GPIO_Port, &GPIO_InitStruct);
 80015f0:	f107 0314 	add.w	r3, r7, #20
 80015f4:	4619      	mov	r1, r3
 80015f6:	4817      	ldr	r0, [pc, #92]	@ (8001654 <HAL_TIM_MspPostInit+0xb8>)
 80015f8:	f000 fef8 	bl	80023ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80015fc:	e022      	b.n	8001644 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM8)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a15      	ldr	r2, [pc, #84]	@ (8001658 <HAL_TIM_MspPostInit+0xbc>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d11d      	bne.n	8001644 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001608:	2300      	movs	r3, #0
 800160a:	60fb      	str	r3, [r7, #12]
 800160c:	4b10      	ldr	r3, [pc, #64]	@ (8001650 <HAL_TIM_MspPostInit+0xb4>)
 800160e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001610:	4a0f      	ldr	r2, [pc, #60]	@ (8001650 <HAL_TIM_MspPostInit+0xb4>)
 8001612:	f043 0304 	orr.w	r3, r3, #4
 8001616:	6313      	str	r3, [r2, #48]	@ 0x30
 8001618:	4b0d      	ldr	r3, [pc, #52]	@ (8001650 <HAL_TIM_MspPostInit+0xb4>)
 800161a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800161c:	f003 0304 	and.w	r3, r3, #4
 8001620:	60fb      	str	r3, [r7, #12]
 8001622:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MotorA_PWMA_Pin|MotorB_PWMB_Pin;
 8001624:	23c0      	movs	r3, #192	@ 0xc0
 8001626:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001628:	2302      	movs	r3, #2
 800162a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162c:	2300      	movs	r3, #0
 800162e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001630:	2300      	movs	r3, #0
 8001632:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001634:	2303      	movs	r3, #3
 8001636:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001638:	f107 0314 	add.w	r3, r7, #20
 800163c:	4619      	mov	r1, r3
 800163e:	4807      	ldr	r0, [pc, #28]	@ (800165c <HAL_TIM_MspPostInit+0xc0>)
 8001640:	f000 fed4 	bl	80023ec <HAL_GPIO_Init>
}
 8001644:	bf00      	nop
 8001646:	3728      	adds	r7, #40	@ 0x28
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	40010000 	.word	0x40010000
 8001650:	40023800 	.word	0x40023800
 8001654:	40021000 	.word	0x40021000
 8001658:	40010400 	.word	0x40010400
 800165c:	40020800 	.word	0x40020800

08001660 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b08a      	sub	sp, #40	@ 0x28
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001668:	f107 0314 	add.w	r3, r7, #20
 800166c:	2200      	movs	r2, #0
 800166e:	601a      	str	r2, [r3, #0]
 8001670:	605a      	str	r2, [r3, #4]
 8001672:	609a      	str	r2, [r3, #8]
 8001674:	60da      	str	r2, [r3, #12]
 8001676:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a1d      	ldr	r2, [pc, #116]	@ (80016f4 <HAL_UART_MspInit+0x94>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d134      	bne.n	80016ec <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001682:	2300      	movs	r3, #0
 8001684:	613b      	str	r3, [r7, #16]
 8001686:	4b1c      	ldr	r3, [pc, #112]	@ (80016f8 <HAL_UART_MspInit+0x98>)
 8001688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800168a:	4a1b      	ldr	r2, [pc, #108]	@ (80016f8 <HAL_UART_MspInit+0x98>)
 800168c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001690:	6413      	str	r3, [r2, #64]	@ 0x40
 8001692:	4b19      	ldr	r3, [pc, #100]	@ (80016f8 <HAL_UART_MspInit+0x98>)
 8001694:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001696:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800169a:	613b      	str	r3, [r7, #16]
 800169c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800169e:	2300      	movs	r3, #0
 80016a0:	60fb      	str	r3, [r7, #12]
 80016a2:	4b15      	ldr	r3, [pc, #84]	@ (80016f8 <HAL_UART_MspInit+0x98>)
 80016a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016a6:	4a14      	ldr	r2, [pc, #80]	@ (80016f8 <HAL_UART_MspInit+0x98>)
 80016a8:	f043 0304 	orr.w	r3, r3, #4
 80016ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80016ae:	4b12      	ldr	r3, [pc, #72]	@ (80016f8 <HAL_UART_MspInit+0x98>)
 80016b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016b2:	f003 0304 	and.w	r3, r3, #4
 80016b6:	60fb      	str	r3, [r7, #12]
 80016b8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80016ba:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80016be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c0:	2302      	movs	r3, #2
 80016c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c4:	2300      	movs	r3, #0
 80016c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016c8:	2303      	movs	r3, #3
 80016ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80016cc:	2307      	movs	r3, #7
 80016ce:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016d0:	f107 0314 	add.w	r3, r7, #20
 80016d4:	4619      	mov	r1, r3
 80016d6:	4809      	ldr	r0, [pc, #36]	@ (80016fc <HAL_UART_MspInit+0x9c>)
 80016d8:	f000 fe88 	bl	80023ec <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80016dc:	2200      	movs	r2, #0
 80016de:	2100      	movs	r1, #0
 80016e0:	2027      	movs	r0, #39	@ 0x27
 80016e2:	f000 fdba 	bl	800225a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80016e6:	2027      	movs	r0, #39	@ 0x27
 80016e8:	f000 fdd3 	bl	8002292 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80016ec:	bf00      	nop
 80016ee:	3728      	adds	r7, #40	@ 0x28
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	40004800 	.word	0x40004800
 80016f8:	40023800 	.word	0x40023800
 80016fc:	40020800 	.word	0x40020800

08001700 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001704:	bf00      	nop
 8001706:	e7fd      	b.n	8001704 <NMI_Handler+0x4>

08001708 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800170c:	bf00      	nop
 800170e:	e7fd      	b.n	800170c <HardFault_Handler+0x4>

08001710 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001714:	bf00      	nop
 8001716:	e7fd      	b.n	8001714 <MemManage_Handler+0x4>

08001718 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800171c:	bf00      	nop
 800171e:	e7fd      	b.n	800171c <BusFault_Handler+0x4>

08001720 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001724:	bf00      	nop
 8001726:	e7fd      	b.n	8001724 <UsageFault_Handler+0x4>

08001728 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800172c:	bf00      	nop
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr

08001736 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001736:	b480      	push	{r7}
 8001738:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800173a:	bf00      	nop
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr

08001744 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001748:	bf00      	nop
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr

08001752 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001752:	b580      	push	{r7, lr}
 8001754:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001756:	f000 f8c7 	bl	80018e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800175a:	bf00      	nop
 800175c:	bd80      	pop	{r7, pc}
	...

08001760 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001764:	4803      	ldr	r0, [pc, #12]	@ (8001774 <ADC_IRQHandler+0x14>)
 8001766:	f000 f946 	bl	80019f6 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 800176a:	4803      	ldr	r0, [pc, #12]	@ (8001778 <ADC_IRQHandler+0x18>)
 800176c:	f000 f943 	bl	80019f6 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001770:	bf00      	nop
 8001772:	bd80      	pop	{r7, pc}
 8001774:	20000028 	.word	0x20000028
 8001778:	20000070 	.word	0x20000070

0800177c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001780:	4802      	ldr	r0, [pc, #8]	@ (800178c <TIM1_CC_IRQHandler+0x10>)
 8001782:	f001 ff54 	bl	800362e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001786:	bf00      	nop
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	2000010c 	.word	0x2000010c

08001790 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001794:	4802      	ldr	r0, [pc, #8]	@ (80017a0 <TIM4_IRQHandler+0x10>)
 8001796:	f001 ff4a 	bl	800362e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800179a:	bf00      	nop
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	200001e4 	.word	0x200001e4

080017a4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80017a8:	4802      	ldr	r0, [pc, #8]	@ (80017b4 <USART3_IRQHandler+0x10>)
 80017aa:	f002 ffdb 	bl	8004764 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80017ae:	bf00      	nop
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	20000304 	.word	0x20000304

080017b8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80017bc:	4802      	ldr	r0, [pc, #8]	@ (80017c8 <TIM7_IRQHandler+0x10>)
 80017be:	f001 ff36 	bl	800362e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80017c2:	bf00      	nop
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	20000274 	.word	0x20000274

080017cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017d0:	4b06      	ldr	r3, [pc, #24]	@ (80017ec <SystemInit+0x20>)
 80017d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017d6:	4a05      	ldr	r2, [pc, #20]	@ (80017ec <SystemInit+0x20>)
 80017d8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80017dc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017e0:	bf00      	nop
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	e000ed00 	.word	0xe000ed00

080017f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80017f0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001828 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80017f4:	f7ff ffea 	bl	80017cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017f8:	480c      	ldr	r0, [pc, #48]	@ (800182c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80017fa:	490d      	ldr	r1, [pc, #52]	@ (8001830 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80017fc:	4a0d      	ldr	r2, [pc, #52]	@ (8001834 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80017fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001800:	e002      	b.n	8001808 <LoopCopyDataInit>

08001802 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001802:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001804:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001806:	3304      	adds	r3, #4

08001808 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001808:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800180a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800180c:	d3f9      	bcc.n	8001802 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800180e:	4a0a      	ldr	r2, [pc, #40]	@ (8001838 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001810:	4c0a      	ldr	r4, [pc, #40]	@ (800183c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001812:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001814:	e001      	b.n	800181a <LoopFillZerobss>

08001816 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001816:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001818:	3204      	adds	r2, #4

0800181a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800181a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800181c:	d3fb      	bcc.n	8001816 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800181e:	f003 fe77 	bl	8005510 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001822:	f7fe fe49 	bl	80004b8 <main>
  bx  lr    
 8001826:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001828:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800182c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001830:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001834:	08005598 	.word	0x08005598
  ldr r2, =_sbss
 8001838:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800183c:	20000750 	.word	0x20000750

08001840 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001840:	e7fe      	b.n	8001840 <CAN1_RX0_IRQHandler>
	...

08001844 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001848:	4b0e      	ldr	r3, [pc, #56]	@ (8001884 <HAL_Init+0x40>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a0d      	ldr	r2, [pc, #52]	@ (8001884 <HAL_Init+0x40>)
 800184e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001852:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001854:	4b0b      	ldr	r3, [pc, #44]	@ (8001884 <HAL_Init+0x40>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a0a      	ldr	r2, [pc, #40]	@ (8001884 <HAL_Init+0x40>)
 800185a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800185e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001860:	4b08      	ldr	r3, [pc, #32]	@ (8001884 <HAL_Init+0x40>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a07      	ldr	r2, [pc, #28]	@ (8001884 <HAL_Init+0x40>)
 8001866:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800186a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800186c:	2003      	movs	r0, #3
 800186e:	f000 fce9 	bl	8002244 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001872:	200f      	movs	r0, #15
 8001874:	f000 f808 	bl	8001888 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001878:	f7ff fc4a 	bl	8001110 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800187c:	2300      	movs	r3, #0
}
 800187e:	4618      	mov	r0, r3
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	40023c00 	.word	0x40023c00

08001888 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001890:	4b12      	ldr	r3, [pc, #72]	@ (80018dc <HAL_InitTick+0x54>)
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	4b12      	ldr	r3, [pc, #72]	@ (80018e0 <HAL_InitTick+0x58>)
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	4619      	mov	r1, r3
 800189a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800189e:	fbb3 f3f1 	udiv	r3, r3, r1
 80018a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80018a6:	4618      	mov	r0, r3
 80018a8:	f000 fd01 	bl	80022ae <HAL_SYSTICK_Config>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e00e      	b.n	80018d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2b0f      	cmp	r3, #15
 80018ba:	d80a      	bhi.n	80018d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018bc:	2200      	movs	r2, #0
 80018be:	6879      	ldr	r1, [r7, #4]
 80018c0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80018c4:	f000 fcc9 	bl	800225a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018c8:	4a06      	ldr	r2, [pc, #24]	@ (80018e4 <HAL_InitTick+0x5c>)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018ce:	2300      	movs	r3, #0
 80018d0:	e000      	b.n	80018d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	3708      	adds	r7, #8
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	20000000 	.word	0x20000000
 80018e0:	20000008 	.word	0x20000008
 80018e4:	20000004 	.word	0x20000004

080018e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018ec:	4b06      	ldr	r3, [pc, #24]	@ (8001908 <HAL_IncTick+0x20>)
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	461a      	mov	r2, r3
 80018f2:	4b06      	ldr	r3, [pc, #24]	@ (800190c <HAL_IncTick+0x24>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4413      	add	r3, r2
 80018f8:	4a04      	ldr	r2, [pc, #16]	@ (800190c <HAL_IncTick+0x24>)
 80018fa:	6013      	str	r3, [r2, #0]
}
 80018fc:	bf00      	nop
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop
 8001908:	20000008 	.word	0x20000008
 800190c:	2000074c 	.word	0x2000074c

08001910 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  return uwTick;
 8001914:	4b03      	ldr	r3, [pc, #12]	@ (8001924 <HAL_GetTick+0x14>)
 8001916:	681b      	ldr	r3, [r3, #0]
}
 8001918:	4618      	mov	r0, r3
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop
 8001924:	2000074c 	.word	0x2000074c

08001928 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b084      	sub	sp, #16
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001930:	f7ff ffee 	bl	8001910 <HAL_GetTick>
 8001934:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001940:	d005      	beq.n	800194e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001942:	4b0a      	ldr	r3, [pc, #40]	@ (800196c <HAL_Delay+0x44>)
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	461a      	mov	r2, r3
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	4413      	add	r3, r2
 800194c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800194e:	bf00      	nop
 8001950:	f7ff ffde 	bl	8001910 <HAL_GetTick>
 8001954:	4602      	mov	r2, r0
 8001956:	68bb      	ldr	r3, [r7, #8]
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	68fa      	ldr	r2, [r7, #12]
 800195c:	429a      	cmp	r2, r3
 800195e:	d8f7      	bhi.n	8001950 <HAL_Delay+0x28>
  {
  }
}
 8001960:	bf00      	nop
 8001962:	bf00      	nop
 8001964:	3710      	adds	r7, #16
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	20000008 	.word	0x20000008

08001970 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b084      	sub	sp, #16
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001978:	2300      	movs	r3, #0
 800197a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d101      	bne.n	8001986 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e033      	b.n	80019ee <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800198a:	2b00      	cmp	r3, #0
 800198c:	d109      	bne.n	80019a2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800198e:	6878      	ldr	r0, [r7, #4]
 8001990:	f7ff fbe6 	bl	8001160 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2200      	movs	r2, #0
 8001998:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2200      	movs	r2, #0
 800199e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019a6:	f003 0310 	and.w	r3, r3, #16
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d118      	bne.n	80019e0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019b2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80019b6:	f023 0302 	bic.w	r3, r3, #2
 80019ba:	f043 0202 	orr.w	r2, r3, #2
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80019c2:	6878      	ldr	r0, [r7, #4]
 80019c4:	f000 fa68 	bl	8001e98 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2200      	movs	r2, #0
 80019cc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019d2:	f023 0303 	bic.w	r3, r3, #3
 80019d6:	f043 0201 	orr.w	r2, r3, #1
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	641a      	str	r2, [r3, #64]	@ 0x40
 80019de:	e001      	b.n	80019e4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80019e0:	2301      	movs	r3, #1
 80019e2:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2200      	movs	r2, #0
 80019e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80019ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3710      	adds	r7, #16
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}

080019f6 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80019f6:	b580      	push	{r7, lr}
 80019f8:	b086      	sub	sp, #24
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80019fe:	2300      	movs	r3, #0
 8001a00:	617b      	str	r3, [r7, #20]
 8001a02:	2300      	movs	r3, #0
 8001a04:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	f003 0302 	and.w	r3, r3, #2
 8001a1c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	f003 0320 	and.w	r3, r3, #32
 8001a24:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d049      	beq.n	8001ac0 <HAL_ADC_IRQHandler+0xca>
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d046      	beq.n	8001ac0 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a36:	f003 0310 	and.w	r3, r3, #16
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d105      	bne.n	8001a4a <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a42:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d12b      	bne.n	8001ab0 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d127      	bne.n	8001ab0 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a66:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d006      	beq.n	8001a7c <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d119      	bne.n	8001ab0 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	685a      	ldr	r2, [r3, #4]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f022 0220 	bic.w	r2, r2, #32
 8001a8a:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a90:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a9c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d105      	bne.n	8001ab0 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aa8:	f043 0201 	orr.w	r2, r3, #1
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001ab0:	6878      	ldr	r0, [r7, #4]
 8001ab2:	f000 f8b0 	bl	8001c16 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f06f 0212 	mvn.w	r2, #18
 8001abe:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	f003 0304 	and.w	r3, r3, #4
 8001ac6:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ace:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d057      	beq.n	8001b86 <HAL_ADC_IRQHandler+0x190>
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d054      	beq.n	8001b86 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ae0:	f003 0310 	and.w	r3, r3, #16
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d105      	bne.n	8001af4 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aec:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d139      	bne.n	8001b76 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b08:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d006      	beq.n	8001b1e <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d12b      	bne.n	8001b76 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d124      	bne.n	8001b76 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d11d      	bne.n	8001b76 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d119      	bne.n	8001b76 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	685a      	ldr	r2, [r3, #4]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001b50:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b56:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d105      	bne.n	8001b76 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b6e:	f043 0201 	orr.w	r2, r3, #1
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001b76:	6878      	ldr	r0, [r7, #4]
 8001b78:	f000 fa8a 	bl	8002090 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f06f 020c 	mvn.w	r2, #12
 8001b84:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	f003 0301 	and.w	r3, r3, #1
 8001b8c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001b8e:	68bb      	ldr	r3, [r7, #8]
 8001b90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b94:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d017      	beq.n	8001bcc <HAL_ADC_IRQHandler+0x1d6>
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d014      	beq.n	8001bcc <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f003 0301 	and.w	r3, r3, #1
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d10d      	bne.n	8001bcc <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bb4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001bbc:	6878      	ldr	r0, [r7, #4]
 8001bbe:	f000 f834 	bl	8001c2a <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f06f 0201 	mvn.w	r2, #1
 8001bca:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	f003 0320 	and.w	r3, r3, #32
 8001bd2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001bda:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d015      	beq.n	8001c0e <HAL_ADC_IRQHandler+0x218>
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d012      	beq.n	8001c0e <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bec:	f043 0202 	orr.w	r2, r3, #2
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f06f 0220 	mvn.w	r2, #32
 8001bfc:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	f000 f81d 	bl	8001c3e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f06f 0220 	mvn.w	r2, #32
 8001c0c:	601a      	str	r2, [r3, #0]
  }
}
 8001c0e:	bf00      	nop
 8001c10:	3718      	adds	r7, #24
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}

08001c16 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001c16:	b480      	push	{r7}
 8001c18:	b083      	sub	sp, #12
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001c1e:	bf00      	nop
 8001c20:	370c      	adds	r7, #12
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr

08001c2a <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001c2a:	b480      	push	{r7}
 8001c2c:	b083      	sub	sp, #12
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001c32:	bf00      	nop
 8001c34:	370c      	adds	r7, #12
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr

08001c3e <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001c3e:	b480      	push	{r7}
 8001c40:	b083      	sub	sp, #12
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001c46:	bf00      	nop
 8001c48:	370c      	adds	r7, #12
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
	...

08001c54 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b085      	sub	sp, #20
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
 8001c5c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d101      	bne.n	8001c70 <HAL_ADC_ConfigChannel+0x1c>
 8001c6c:	2302      	movs	r3, #2
 8001c6e:	e105      	b.n	8001e7c <HAL_ADC_ConfigChannel+0x228>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2201      	movs	r2, #1
 8001c74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	2b09      	cmp	r3, #9
 8001c7e:	d925      	bls.n	8001ccc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	68d9      	ldr	r1, [r3, #12]
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	b29b      	uxth	r3, r3
 8001c8c:	461a      	mov	r2, r3
 8001c8e:	4613      	mov	r3, r2
 8001c90:	005b      	lsls	r3, r3, #1
 8001c92:	4413      	add	r3, r2
 8001c94:	3b1e      	subs	r3, #30
 8001c96:	2207      	movs	r2, #7
 8001c98:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9c:	43da      	mvns	r2, r3
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	400a      	ands	r2, r1
 8001ca4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	68d9      	ldr	r1, [r3, #12]
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	689a      	ldr	r2, [r3, #8]
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	b29b      	uxth	r3, r3
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	4603      	mov	r3, r0
 8001cba:	005b      	lsls	r3, r3, #1
 8001cbc:	4403      	add	r3, r0
 8001cbe:	3b1e      	subs	r3, #30
 8001cc0:	409a      	lsls	r2, r3
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	430a      	orrs	r2, r1
 8001cc8:	60da      	str	r2, [r3, #12]
 8001cca:	e022      	b.n	8001d12 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	6919      	ldr	r1, [r3, #16]
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	b29b      	uxth	r3, r3
 8001cd8:	461a      	mov	r2, r3
 8001cda:	4613      	mov	r3, r2
 8001cdc:	005b      	lsls	r3, r3, #1
 8001cde:	4413      	add	r3, r2
 8001ce0:	2207      	movs	r2, #7
 8001ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce6:	43da      	mvns	r2, r3
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	400a      	ands	r2, r1
 8001cee:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	6919      	ldr	r1, [r3, #16]
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	689a      	ldr	r2, [r3, #8]
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	b29b      	uxth	r3, r3
 8001d00:	4618      	mov	r0, r3
 8001d02:	4603      	mov	r3, r0
 8001d04:	005b      	lsls	r3, r3, #1
 8001d06:	4403      	add	r3, r0
 8001d08:	409a      	lsls	r2, r3
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	430a      	orrs	r2, r1
 8001d10:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	2b06      	cmp	r3, #6
 8001d18:	d824      	bhi.n	8001d64 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	685a      	ldr	r2, [r3, #4]
 8001d24:	4613      	mov	r3, r2
 8001d26:	009b      	lsls	r3, r3, #2
 8001d28:	4413      	add	r3, r2
 8001d2a:	3b05      	subs	r3, #5
 8001d2c:	221f      	movs	r2, #31
 8001d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d32:	43da      	mvns	r2, r3
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	400a      	ands	r2, r1
 8001d3a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	b29b      	uxth	r3, r3
 8001d48:	4618      	mov	r0, r3
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	685a      	ldr	r2, [r3, #4]
 8001d4e:	4613      	mov	r3, r2
 8001d50:	009b      	lsls	r3, r3, #2
 8001d52:	4413      	add	r3, r2
 8001d54:	3b05      	subs	r3, #5
 8001d56:	fa00 f203 	lsl.w	r2, r0, r3
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	430a      	orrs	r2, r1
 8001d60:	635a      	str	r2, [r3, #52]	@ 0x34
 8001d62:	e04c      	b.n	8001dfe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	2b0c      	cmp	r3, #12
 8001d6a:	d824      	bhi.n	8001db6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	685a      	ldr	r2, [r3, #4]
 8001d76:	4613      	mov	r3, r2
 8001d78:	009b      	lsls	r3, r3, #2
 8001d7a:	4413      	add	r3, r2
 8001d7c:	3b23      	subs	r3, #35	@ 0x23
 8001d7e:	221f      	movs	r2, #31
 8001d80:	fa02 f303 	lsl.w	r3, r2, r3
 8001d84:	43da      	mvns	r2, r3
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	400a      	ands	r2, r1
 8001d8c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	b29b      	uxth	r3, r3
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	685a      	ldr	r2, [r3, #4]
 8001da0:	4613      	mov	r3, r2
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	4413      	add	r3, r2
 8001da6:	3b23      	subs	r3, #35	@ 0x23
 8001da8:	fa00 f203 	lsl.w	r2, r0, r3
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	430a      	orrs	r2, r1
 8001db2:	631a      	str	r2, [r3, #48]	@ 0x30
 8001db4:	e023      	b.n	8001dfe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	685a      	ldr	r2, [r3, #4]
 8001dc0:	4613      	mov	r3, r2
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	4413      	add	r3, r2
 8001dc6:	3b41      	subs	r3, #65	@ 0x41
 8001dc8:	221f      	movs	r2, #31
 8001dca:	fa02 f303 	lsl.w	r3, r2, r3
 8001dce:	43da      	mvns	r2, r3
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	400a      	ands	r2, r1
 8001dd6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	b29b      	uxth	r3, r3
 8001de4:	4618      	mov	r0, r3
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	685a      	ldr	r2, [r3, #4]
 8001dea:	4613      	mov	r3, r2
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	4413      	add	r3, r2
 8001df0:	3b41      	subs	r3, #65	@ 0x41
 8001df2:	fa00 f203 	lsl.w	r2, r0, r3
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	430a      	orrs	r2, r1
 8001dfc:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001dfe:	4b22      	ldr	r3, [pc, #136]	@ (8001e88 <HAL_ADC_ConfigChannel+0x234>)
 8001e00:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a21      	ldr	r2, [pc, #132]	@ (8001e8c <HAL_ADC_ConfigChannel+0x238>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d109      	bne.n	8001e20 <HAL_ADC_ConfigChannel+0x1cc>
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	2b12      	cmp	r3, #18
 8001e12:	d105      	bne.n	8001e20 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a19      	ldr	r2, [pc, #100]	@ (8001e8c <HAL_ADC_ConfigChannel+0x238>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d123      	bne.n	8001e72 <HAL_ADC_ConfigChannel+0x21e>
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	2b10      	cmp	r3, #16
 8001e30:	d003      	beq.n	8001e3a <HAL_ADC_ConfigChannel+0x1e6>
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	2b11      	cmp	r3, #17
 8001e38:	d11b      	bne.n	8001e72 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	2b10      	cmp	r3, #16
 8001e4c:	d111      	bne.n	8001e72 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001e4e:	4b10      	ldr	r3, [pc, #64]	@ (8001e90 <HAL_ADC_ConfigChannel+0x23c>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a10      	ldr	r2, [pc, #64]	@ (8001e94 <HAL_ADC_ConfigChannel+0x240>)
 8001e54:	fba2 2303 	umull	r2, r3, r2, r3
 8001e58:	0c9a      	lsrs	r2, r3, #18
 8001e5a:	4613      	mov	r3, r2
 8001e5c:	009b      	lsls	r3, r3, #2
 8001e5e:	4413      	add	r3, r2
 8001e60:	005b      	lsls	r3, r3, #1
 8001e62:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001e64:	e002      	b.n	8001e6c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	3b01      	subs	r3, #1
 8001e6a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d1f9      	bne.n	8001e66 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2200      	movs	r2, #0
 8001e76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001e7a:	2300      	movs	r3, #0
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	3714      	adds	r7, #20
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr
 8001e88:	40012300 	.word	0x40012300
 8001e8c:	40012000 	.word	0x40012000
 8001e90:	20000000 	.word	0x20000000
 8001e94:	431bde83 	.word	0x431bde83

08001e98 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b085      	sub	sp, #20
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ea0:	4b79      	ldr	r3, [pc, #484]	@ (8002088 <ADC_Init+0x1f0>)
 8001ea2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	685a      	ldr	r2, [r3, #4]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	431a      	orrs	r2, r3
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	685a      	ldr	r2, [r3, #4]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001ecc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	6859      	ldr	r1, [r3, #4]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	691b      	ldr	r3, [r3, #16]
 8001ed8:	021a      	lsls	r2, r3, #8
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	430a      	orrs	r2, r1
 8001ee0:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	685a      	ldr	r2, [r3, #4]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001ef0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	6859      	ldr	r1, [r3, #4]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	689a      	ldr	r2, [r3, #8]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	430a      	orrs	r2, r1
 8001f02:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	689a      	ldr	r2, [r3, #8]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001f12:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	6899      	ldr	r1, [r3, #8]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	68da      	ldr	r2, [r3, #12]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	430a      	orrs	r2, r1
 8001f24:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f2a:	4a58      	ldr	r2, [pc, #352]	@ (800208c <ADC_Init+0x1f4>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d022      	beq.n	8001f76 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	689a      	ldr	r2, [r3, #8]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001f3e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	6899      	ldr	r1, [r3, #8]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	430a      	orrs	r2, r1
 8001f50:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	689a      	ldr	r2, [r3, #8]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001f60:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	6899      	ldr	r1, [r3, #8]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	430a      	orrs	r2, r1
 8001f72:	609a      	str	r2, [r3, #8]
 8001f74:	e00f      	b.n	8001f96 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	689a      	ldr	r2, [r3, #8]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001f84:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	689a      	ldr	r2, [r3, #8]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001f94:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	689a      	ldr	r2, [r3, #8]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f022 0202 	bic.w	r2, r2, #2
 8001fa4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	6899      	ldr	r1, [r3, #8]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	7e1b      	ldrb	r3, [r3, #24]
 8001fb0:	005a      	lsls	r2, r3, #1
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	430a      	orrs	r2, r1
 8001fb8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d01b      	beq.n	8001ffc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	685a      	ldr	r2, [r3, #4]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001fd2:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	685a      	ldr	r2, [r3, #4]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001fe2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	6859      	ldr	r1, [r3, #4]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fee:	3b01      	subs	r3, #1
 8001ff0:	035a      	lsls	r2, r3, #13
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	430a      	orrs	r2, r1
 8001ff8:	605a      	str	r2, [r3, #4]
 8001ffa:	e007      	b.n	800200c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	685a      	ldr	r2, [r3, #4]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800200a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800201a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	69db      	ldr	r3, [r3, #28]
 8002026:	3b01      	subs	r3, #1
 8002028:	051a      	lsls	r2, r3, #20
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	430a      	orrs	r2, r1
 8002030:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	689a      	ldr	r2, [r3, #8]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002040:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	6899      	ldr	r1, [r3, #8]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800204e:	025a      	lsls	r2, r3, #9
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	430a      	orrs	r2, r1
 8002056:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	689a      	ldr	r2, [r3, #8]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002066:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	6899      	ldr	r1, [r3, #8]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	695b      	ldr	r3, [r3, #20]
 8002072:	029a      	lsls	r2, r3, #10
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	430a      	orrs	r2, r1
 800207a:	609a      	str	r2, [r3, #8]
}
 800207c:	bf00      	nop
 800207e:	3714      	adds	r7, #20
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr
 8002088:	40012300 	.word	0x40012300
 800208c:	0f000001 	.word	0x0f000001

08002090 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002098:	bf00      	nop
 800209a:	370c      	adds	r7, #12
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr

080020a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b085      	sub	sp, #20
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	f003 0307 	and.w	r3, r3, #7
 80020b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020b4:	4b0c      	ldr	r3, [pc, #48]	@ (80020e8 <__NVIC_SetPriorityGrouping+0x44>)
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020ba:	68ba      	ldr	r2, [r7, #8]
 80020bc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80020c0:	4013      	ands	r3, r2
 80020c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020cc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80020d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020d6:	4a04      	ldr	r2, [pc, #16]	@ (80020e8 <__NVIC_SetPriorityGrouping+0x44>)
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	60d3      	str	r3, [r2, #12]
}
 80020dc:	bf00      	nop
 80020de:	3714      	adds	r7, #20
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr
 80020e8:	e000ed00 	.word	0xe000ed00

080020ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020ec:	b480      	push	{r7}
 80020ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020f0:	4b04      	ldr	r3, [pc, #16]	@ (8002104 <__NVIC_GetPriorityGrouping+0x18>)
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	0a1b      	lsrs	r3, r3, #8
 80020f6:	f003 0307 	and.w	r3, r3, #7
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr
 8002104:	e000ed00 	.word	0xe000ed00

08002108 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	4603      	mov	r3, r0
 8002110:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002116:	2b00      	cmp	r3, #0
 8002118:	db0b      	blt.n	8002132 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800211a:	79fb      	ldrb	r3, [r7, #7]
 800211c:	f003 021f 	and.w	r2, r3, #31
 8002120:	4907      	ldr	r1, [pc, #28]	@ (8002140 <__NVIC_EnableIRQ+0x38>)
 8002122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002126:	095b      	lsrs	r3, r3, #5
 8002128:	2001      	movs	r0, #1
 800212a:	fa00 f202 	lsl.w	r2, r0, r2
 800212e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002132:	bf00      	nop
 8002134:	370c      	adds	r7, #12
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr
 800213e:	bf00      	nop
 8002140:	e000e100 	.word	0xe000e100

08002144 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
 800214a:	4603      	mov	r3, r0
 800214c:	6039      	str	r1, [r7, #0]
 800214e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002150:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002154:	2b00      	cmp	r3, #0
 8002156:	db0a      	blt.n	800216e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	b2da      	uxtb	r2, r3
 800215c:	490c      	ldr	r1, [pc, #48]	@ (8002190 <__NVIC_SetPriority+0x4c>)
 800215e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002162:	0112      	lsls	r2, r2, #4
 8002164:	b2d2      	uxtb	r2, r2
 8002166:	440b      	add	r3, r1
 8002168:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800216c:	e00a      	b.n	8002184 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	b2da      	uxtb	r2, r3
 8002172:	4908      	ldr	r1, [pc, #32]	@ (8002194 <__NVIC_SetPriority+0x50>)
 8002174:	79fb      	ldrb	r3, [r7, #7]
 8002176:	f003 030f 	and.w	r3, r3, #15
 800217a:	3b04      	subs	r3, #4
 800217c:	0112      	lsls	r2, r2, #4
 800217e:	b2d2      	uxtb	r2, r2
 8002180:	440b      	add	r3, r1
 8002182:	761a      	strb	r2, [r3, #24]
}
 8002184:	bf00      	nop
 8002186:	370c      	adds	r7, #12
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr
 8002190:	e000e100 	.word	0xe000e100
 8002194:	e000ed00 	.word	0xe000ed00

08002198 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002198:	b480      	push	{r7}
 800219a:	b089      	sub	sp, #36	@ 0x24
 800219c:	af00      	add	r7, sp, #0
 800219e:	60f8      	str	r0, [r7, #12]
 80021a0:	60b9      	str	r1, [r7, #8]
 80021a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	f003 0307 	and.w	r3, r3, #7
 80021aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021ac:	69fb      	ldr	r3, [r7, #28]
 80021ae:	f1c3 0307 	rsb	r3, r3, #7
 80021b2:	2b04      	cmp	r3, #4
 80021b4:	bf28      	it	cs
 80021b6:	2304      	movcs	r3, #4
 80021b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	3304      	adds	r3, #4
 80021be:	2b06      	cmp	r3, #6
 80021c0:	d902      	bls.n	80021c8 <NVIC_EncodePriority+0x30>
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	3b03      	subs	r3, #3
 80021c6:	e000      	b.n	80021ca <NVIC_EncodePriority+0x32>
 80021c8:	2300      	movs	r3, #0
 80021ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021cc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80021d0:	69bb      	ldr	r3, [r7, #24]
 80021d2:	fa02 f303 	lsl.w	r3, r2, r3
 80021d6:	43da      	mvns	r2, r3
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	401a      	ands	r2, r3
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021e0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	fa01 f303 	lsl.w	r3, r1, r3
 80021ea:	43d9      	mvns	r1, r3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021f0:	4313      	orrs	r3, r2
         );
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	3724      	adds	r7, #36	@ 0x24
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr
	...

08002200 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b082      	sub	sp, #8
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	3b01      	subs	r3, #1
 800220c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002210:	d301      	bcc.n	8002216 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002212:	2301      	movs	r3, #1
 8002214:	e00f      	b.n	8002236 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002216:	4a0a      	ldr	r2, [pc, #40]	@ (8002240 <SysTick_Config+0x40>)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	3b01      	subs	r3, #1
 800221c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800221e:	210f      	movs	r1, #15
 8002220:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002224:	f7ff ff8e 	bl	8002144 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002228:	4b05      	ldr	r3, [pc, #20]	@ (8002240 <SysTick_Config+0x40>)
 800222a:	2200      	movs	r2, #0
 800222c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800222e:	4b04      	ldr	r3, [pc, #16]	@ (8002240 <SysTick_Config+0x40>)
 8002230:	2207      	movs	r2, #7
 8002232:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002234:	2300      	movs	r3, #0
}
 8002236:	4618      	mov	r0, r3
 8002238:	3708      	adds	r7, #8
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	e000e010 	.word	0xe000e010

08002244 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b082      	sub	sp, #8
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	f7ff ff29 	bl	80020a4 <__NVIC_SetPriorityGrouping>
}
 8002252:	bf00      	nop
 8002254:	3708      	adds	r7, #8
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}

0800225a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800225a:	b580      	push	{r7, lr}
 800225c:	b086      	sub	sp, #24
 800225e:	af00      	add	r7, sp, #0
 8002260:	4603      	mov	r3, r0
 8002262:	60b9      	str	r1, [r7, #8]
 8002264:	607a      	str	r2, [r7, #4]
 8002266:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002268:	2300      	movs	r3, #0
 800226a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800226c:	f7ff ff3e 	bl	80020ec <__NVIC_GetPriorityGrouping>
 8002270:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002272:	687a      	ldr	r2, [r7, #4]
 8002274:	68b9      	ldr	r1, [r7, #8]
 8002276:	6978      	ldr	r0, [r7, #20]
 8002278:	f7ff ff8e 	bl	8002198 <NVIC_EncodePriority>
 800227c:	4602      	mov	r2, r0
 800227e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002282:	4611      	mov	r1, r2
 8002284:	4618      	mov	r0, r3
 8002286:	f7ff ff5d 	bl	8002144 <__NVIC_SetPriority>
}
 800228a:	bf00      	nop
 800228c:	3718      	adds	r7, #24
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}

08002292 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002292:	b580      	push	{r7, lr}
 8002294:	b082      	sub	sp, #8
 8002296:	af00      	add	r7, sp, #0
 8002298:	4603      	mov	r3, r0
 800229a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800229c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022a0:	4618      	mov	r0, r3
 80022a2:	f7ff ff31 	bl	8002108 <__NVIC_EnableIRQ>
}
 80022a6:	bf00      	nop
 80022a8:	3708      	adds	r7, #8
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}

080022ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022ae:	b580      	push	{r7, lr}
 80022b0:	b082      	sub	sp, #8
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f7ff ffa2 	bl	8002200 <SysTick_Config>
 80022bc:	4603      	mov	r3, r0
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3708      	adds	r7, #8
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}

080022c6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80022c6:	b580      	push	{r7, lr}
 80022c8:	b084      	sub	sp, #16
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022d2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80022d4:	f7ff fb1c 	bl	8001910 <HAL_GetTick>
 80022d8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	2b02      	cmp	r3, #2
 80022e4:	d008      	beq.n	80022f8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2280      	movs	r2, #128	@ 0x80
 80022ea:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2200      	movs	r2, #0
 80022f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	e052      	b.n	800239e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f022 0216 	bic.w	r2, r2, #22
 8002306:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	695a      	ldr	r2, [r3, #20]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002316:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800231c:	2b00      	cmp	r3, #0
 800231e:	d103      	bne.n	8002328 <HAL_DMA_Abort+0x62>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002324:	2b00      	cmp	r3, #0
 8002326:	d007      	beq.n	8002338 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f022 0208 	bic.w	r2, r2, #8
 8002336:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f022 0201 	bic.w	r2, r2, #1
 8002346:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002348:	e013      	b.n	8002372 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800234a:	f7ff fae1 	bl	8001910 <HAL_GetTick>
 800234e:	4602      	mov	r2, r0
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	1ad3      	subs	r3, r2, r3
 8002354:	2b05      	cmp	r3, #5
 8002356:	d90c      	bls.n	8002372 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2220      	movs	r2, #32
 800235c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2203      	movs	r2, #3
 8002362:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2200      	movs	r2, #0
 800236a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800236e:	2303      	movs	r3, #3
 8002370:	e015      	b.n	800239e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 0301 	and.w	r3, r3, #1
 800237c:	2b00      	cmp	r3, #0
 800237e:	d1e4      	bne.n	800234a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002384:	223f      	movs	r2, #63	@ 0x3f
 8002386:	409a      	lsls	r2, r3
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2201      	movs	r2, #1
 8002390:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2200      	movs	r2, #0
 8002398:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800239c:	2300      	movs	r3, #0
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3710      	adds	r7, #16
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}

080023a6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80023a6:	b480      	push	{r7}
 80023a8:	b083      	sub	sp, #12
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	2b02      	cmp	r3, #2
 80023b8:	d004      	beq.n	80023c4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2280      	movs	r2, #128	@ 0x80
 80023be:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e00c      	b.n	80023de <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2205      	movs	r2, #5
 80023c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f022 0201 	bic.w	r2, r2, #1
 80023da:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80023dc:	2300      	movs	r3, #0
}
 80023de:	4618      	mov	r0, r3
 80023e0:	370c      	adds	r7, #12
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr
	...

080023ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b089      	sub	sp, #36	@ 0x24
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
 80023f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80023f6:	2300      	movs	r3, #0
 80023f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80023fa:	2300      	movs	r3, #0
 80023fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80023fe:	2300      	movs	r3, #0
 8002400:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002402:	2300      	movs	r3, #0
 8002404:	61fb      	str	r3, [r7, #28]
 8002406:	e16b      	b.n	80026e0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002408:	2201      	movs	r2, #1
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	fa02 f303 	lsl.w	r3, r2, r3
 8002410:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	697a      	ldr	r2, [r7, #20]
 8002418:	4013      	ands	r3, r2
 800241a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800241c:	693a      	ldr	r2, [r7, #16]
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	429a      	cmp	r2, r3
 8002422:	f040 815a 	bne.w	80026da <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	f003 0303 	and.w	r3, r3, #3
 800242e:	2b01      	cmp	r3, #1
 8002430:	d005      	beq.n	800243e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800243a:	2b02      	cmp	r3, #2
 800243c:	d130      	bne.n	80024a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002444:	69fb      	ldr	r3, [r7, #28]
 8002446:	005b      	lsls	r3, r3, #1
 8002448:	2203      	movs	r2, #3
 800244a:	fa02 f303 	lsl.w	r3, r2, r3
 800244e:	43db      	mvns	r3, r3
 8002450:	69ba      	ldr	r2, [r7, #24]
 8002452:	4013      	ands	r3, r2
 8002454:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	68da      	ldr	r2, [r3, #12]
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	005b      	lsls	r3, r3, #1
 800245e:	fa02 f303 	lsl.w	r3, r2, r3
 8002462:	69ba      	ldr	r2, [r7, #24]
 8002464:	4313      	orrs	r3, r2
 8002466:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	69ba      	ldr	r2, [r7, #24]
 800246c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002474:	2201      	movs	r2, #1
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	fa02 f303 	lsl.w	r3, r2, r3
 800247c:	43db      	mvns	r3, r3
 800247e:	69ba      	ldr	r2, [r7, #24]
 8002480:	4013      	ands	r3, r2
 8002482:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	091b      	lsrs	r3, r3, #4
 800248a:	f003 0201 	and.w	r2, r3, #1
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	fa02 f303 	lsl.w	r3, r2, r3
 8002494:	69ba      	ldr	r2, [r7, #24]
 8002496:	4313      	orrs	r3, r2
 8002498:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	69ba      	ldr	r2, [r7, #24]
 800249e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	f003 0303 	and.w	r3, r3, #3
 80024a8:	2b03      	cmp	r3, #3
 80024aa:	d017      	beq.n	80024dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	005b      	lsls	r3, r3, #1
 80024b6:	2203      	movs	r2, #3
 80024b8:	fa02 f303 	lsl.w	r3, r2, r3
 80024bc:	43db      	mvns	r3, r3
 80024be:	69ba      	ldr	r2, [r7, #24]
 80024c0:	4013      	ands	r3, r2
 80024c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	689a      	ldr	r2, [r3, #8]
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	005b      	lsls	r3, r3, #1
 80024cc:	fa02 f303 	lsl.w	r3, r2, r3
 80024d0:	69ba      	ldr	r2, [r7, #24]
 80024d2:	4313      	orrs	r3, r2
 80024d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	69ba      	ldr	r2, [r7, #24]
 80024da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f003 0303 	and.w	r3, r3, #3
 80024e4:	2b02      	cmp	r3, #2
 80024e6:	d123      	bne.n	8002530 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024e8:	69fb      	ldr	r3, [r7, #28]
 80024ea:	08da      	lsrs	r2, r3, #3
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	3208      	adds	r2, #8
 80024f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	f003 0307 	and.w	r3, r3, #7
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	220f      	movs	r2, #15
 8002500:	fa02 f303 	lsl.w	r3, r2, r3
 8002504:	43db      	mvns	r3, r3
 8002506:	69ba      	ldr	r2, [r7, #24]
 8002508:	4013      	ands	r3, r2
 800250a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	691a      	ldr	r2, [r3, #16]
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	f003 0307 	and.w	r3, r3, #7
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	fa02 f303 	lsl.w	r3, r2, r3
 800251c:	69ba      	ldr	r2, [r7, #24]
 800251e:	4313      	orrs	r3, r2
 8002520:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	08da      	lsrs	r2, r3, #3
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	3208      	adds	r2, #8
 800252a:	69b9      	ldr	r1, [r7, #24]
 800252c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	005b      	lsls	r3, r3, #1
 800253a:	2203      	movs	r2, #3
 800253c:	fa02 f303 	lsl.w	r3, r2, r3
 8002540:	43db      	mvns	r3, r3
 8002542:	69ba      	ldr	r2, [r7, #24]
 8002544:	4013      	ands	r3, r2
 8002546:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f003 0203 	and.w	r2, r3, #3
 8002550:	69fb      	ldr	r3, [r7, #28]
 8002552:	005b      	lsls	r3, r3, #1
 8002554:	fa02 f303 	lsl.w	r3, r2, r3
 8002558:	69ba      	ldr	r2, [r7, #24]
 800255a:	4313      	orrs	r3, r2
 800255c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	69ba      	ldr	r2, [r7, #24]
 8002562:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800256c:	2b00      	cmp	r3, #0
 800256e:	f000 80b4 	beq.w	80026da <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002572:	2300      	movs	r3, #0
 8002574:	60fb      	str	r3, [r7, #12]
 8002576:	4b60      	ldr	r3, [pc, #384]	@ (80026f8 <HAL_GPIO_Init+0x30c>)
 8002578:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800257a:	4a5f      	ldr	r2, [pc, #380]	@ (80026f8 <HAL_GPIO_Init+0x30c>)
 800257c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002580:	6453      	str	r3, [r2, #68]	@ 0x44
 8002582:	4b5d      	ldr	r3, [pc, #372]	@ (80026f8 <HAL_GPIO_Init+0x30c>)
 8002584:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002586:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800258a:	60fb      	str	r3, [r7, #12]
 800258c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800258e:	4a5b      	ldr	r2, [pc, #364]	@ (80026fc <HAL_GPIO_Init+0x310>)
 8002590:	69fb      	ldr	r3, [r7, #28]
 8002592:	089b      	lsrs	r3, r3, #2
 8002594:	3302      	adds	r3, #2
 8002596:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800259a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	f003 0303 	and.w	r3, r3, #3
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	220f      	movs	r2, #15
 80025a6:	fa02 f303 	lsl.w	r3, r2, r3
 80025aa:	43db      	mvns	r3, r3
 80025ac:	69ba      	ldr	r2, [r7, #24]
 80025ae:	4013      	ands	r3, r2
 80025b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4a52      	ldr	r2, [pc, #328]	@ (8002700 <HAL_GPIO_Init+0x314>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d02b      	beq.n	8002612 <HAL_GPIO_Init+0x226>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4a51      	ldr	r2, [pc, #324]	@ (8002704 <HAL_GPIO_Init+0x318>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d025      	beq.n	800260e <HAL_GPIO_Init+0x222>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	4a50      	ldr	r2, [pc, #320]	@ (8002708 <HAL_GPIO_Init+0x31c>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d01f      	beq.n	800260a <HAL_GPIO_Init+0x21e>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	4a4f      	ldr	r2, [pc, #316]	@ (800270c <HAL_GPIO_Init+0x320>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d019      	beq.n	8002606 <HAL_GPIO_Init+0x21a>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	4a4e      	ldr	r2, [pc, #312]	@ (8002710 <HAL_GPIO_Init+0x324>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d013      	beq.n	8002602 <HAL_GPIO_Init+0x216>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4a4d      	ldr	r2, [pc, #308]	@ (8002714 <HAL_GPIO_Init+0x328>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d00d      	beq.n	80025fe <HAL_GPIO_Init+0x212>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4a4c      	ldr	r2, [pc, #304]	@ (8002718 <HAL_GPIO_Init+0x32c>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d007      	beq.n	80025fa <HAL_GPIO_Init+0x20e>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4a4b      	ldr	r2, [pc, #300]	@ (800271c <HAL_GPIO_Init+0x330>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d101      	bne.n	80025f6 <HAL_GPIO_Init+0x20a>
 80025f2:	2307      	movs	r3, #7
 80025f4:	e00e      	b.n	8002614 <HAL_GPIO_Init+0x228>
 80025f6:	2308      	movs	r3, #8
 80025f8:	e00c      	b.n	8002614 <HAL_GPIO_Init+0x228>
 80025fa:	2306      	movs	r3, #6
 80025fc:	e00a      	b.n	8002614 <HAL_GPIO_Init+0x228>
 80025fe:	2305      	movs	r3, #5
 8002600:	e008      	b.n	8002614 <HAL_GPIO_Init+0x228>
 8002602:	2304      	movs	r3, #4
 8002604:	e006      	b.n	8002614 <HAL_GPIO_Init+0x228>
 8002606:	2303      	movs	r3, #3
 8002608:	e004      	b.n	8002614 <HAL_GPIO_Init+0x228>
 800260a:	2302      	movs	r3, #2
 800260c:	e002      	b.n	8002614 <HAL_GPIO_Init+0x228>
 800260e:	2301      	movs	r3, #1
 8002610:	e000      	b.n	8002614 <HAL_GPIO_Init+0x228>
 8002612:	2300      	movs	r3, #0
 8002614:	69fa      	ldr	r2, [r7, #28]
 8002616:	f002 0203 	and.w	r2, r2, #3
 800261a:	0092      	lsls	r2, r2, #2
 800261c:	4093      	lsls	r3, r2
 800261e:	69ba      	ldr	r2, [r7, #24]
 8002620:	4313      	orrs	r3, r2
 8002622:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002624:	4935      	ldr	r1, [pc, #212]	@ (80026fc <HAL_GPIO_Init+0x310>)
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	089b      	lsrs	r3, r3, #2
 800262a:	3302      	adds	r3, #2
 800262c:	69ba      	ldr	r2, [r7, #24]
 800262e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002632:	4b3b      	ldr	r3, [pc, #236]	@ (8002720 <HAL_GPIO_Init+0x334>)
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	43db      	mvns	r3, r3
 800263c:	69ba      	ldr	r2, [r7, #24]
 800263e:	4013      	ands	r3, r2
 8002640:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d003      	beq.n	8002656 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800264e:	69ba      	ldr	r2, [r7, #24]
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	4313      	orrs	r3, r2
 8002654:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002656:	4a32      	ldr	r2, [pc, #200]	@ (8002720 <HAL_GPIO_Init+0x334>)
 8002658:	69bb      	ldr	r3, [r7, #24]
 800265a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800265c:	4b30      	ldr	r3, [pc, #192]	@ (8002720 <HAL_GPIO_Init+0x334>)
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	43db      	mvns	r3, r3
 8002666:	69ba      	ldr	r2, [r7, #24]
 8002668:	4013      	ands	r3, r2
 800266a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002674:	2b00      	cmp	r3, #0
 8002676:	d003      	beq.n	8002680 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002678:	69ba      	ldr	r2, [r7, #24]
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	4313      	orrs	r3, r2
 800267e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002680:	4a27      	ldr	r2, [pc, #156]	@ (8002720 <HAL_GPIO_Init+0x334>)
 8002682:	69bb      	ldr	r3, [r7, #24]
 8002684:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002686:	4b26      	ldr	r3, [pc, #152]	@ (8002720 <HAL_GPIO_Init+0x334>)
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	43db      	mvns	r3, r3
 8002690:	69ba      	ldr	r2, [r7, #24]
 8002692:	4013      	ands	r3, r2
 8002694:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d003      	beq.n	80026aa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80026a2:	69ba      	ldr	r2, [r7, #24]
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	4313      	orrs	r3, r2
 80026a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026aa:	4a1d      	ldr	r2, [pc, #116]	@ (8002720 <HAL_GPIO_Init+0x334>)
 80026ac:	69bb      	ldr	r3, [r7, #24]
 80026ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026b0:	4b1b      	ldr	r3, [pc, #108]	@ (8002720 <HAL_GPIO_Init+0x334>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	43db      	mvns	r3, r3
 80026ba:	69ba      	ldr	r2, [r7, #24]
 80026bc:	4013      	ands	r3, r2
 80026be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d003      	beq.n	80026d4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80026cc:	69ba      	ldr	r2, [r7, #24]
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	4313      	orrs	r3, r2
 80026d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026d4:	4a12      	ldr	r2, [pc, #72]	@ (8002720 <HAL_GPIO_Init+0x334>)
 80026d6:	69bb      	ldr	r3, [r7, #24]
 80026d8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	3301      	adds	r3, #1
 80026de:	61fb      	str	r3, [r7, #28]
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	2b0f      	cmp	r3, #15
 80026e4:	f67f ae90 	bls.w	8002408 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80026e8:	bf00      	nop
 80026ea:	bf00      	nop
 80026ec:	3724      	adds	r7, #36	@ 0x24
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr
 80026f6:	bf00      	nop
 80026f8:	40023800 	.word	0x40023800
 80026fc:	40013800 	.word	0x40013800
 8002700:	40020000 	.word	0x40020000
 8002704:	40020400 	.word	0x40020400
 8002708:	40020800 	.word	0x40020800
 800270c:	40020c00 	.word	0x40020c00
 8002710:	40021000 	.word	0x40021000
 8002714:	40021400 	.word	0x40021400
 8002718:	40021800 	.word	0x40021800
 800271c:	40021c00 	.word	0x40021c00
 8002720:	40013c00 	.word	0x40013c00

08002724 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002724:	b480      	push	{r7}
 8002726:	b083      	sub	sp, #12
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
 800272c:	460b      	mov	r3, r1
 800272e:	807b      	strh	r3, [r7, #2]
 8002730:	4613      	mov	r3, r2
 8002732:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002734:	787b      	ldrb	r3, [r7, #1]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d003      	beq.n	8002742 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800273a:	887a      	ldrh	r2, [r7, #2]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002740:	e003      	b.n	800274a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002742:	887b      	ldrh	r3, [r7, #2]
 8002744:	041a      	lsls	r2, r3, #16
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	619a      	str	r2, [r3, #24]
}
 800274a:	bf00      	nop
 800274c:	370c      	adds	r7, #12
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr
	...

08002758 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b084      	sub	sp, #16
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d101      	bne.n	800276a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e12b      	b.n	80029c2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002770:	b2db      	uxtb	r3, r3
 8002772:	2b00      	cmp	r3, #0
 8002774:	d106      	bne.n	8002784 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2200      	movs	r2, #0
 800277a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f7fe fd72 	bl	8001268 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2224      	movs	r2, #36	@ 0x24
 8002788:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f022 0201 	bic.w	r2, r2, #1
 800279a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80027aa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80027ba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80027bc:	f000 fd68 	bl	8003290 <HAL_RCC_GetPCLK1Freq>
 80027c0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	4a81      	ldr	r2, [pc, #516]	@ (80029cc <HAL_I2C_Init+0x274>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d807      	bhi.n	80027dc <HAL_I2C_Init+0x84>
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	4a80      	ldr	r2, [pc, #512]	@ (80029d0 <HAL_I2C_Init+0x278>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	bf94      	ite	ls
 80027d4:	2301      	movls	r3, #1
 80027d6:	2300      	movhi	r3, #0
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	e006      	b.n	80027ea <HAL_I2C_Init+0x92>
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	4a7d      	ldr	r2, [pc, #500]	@ (80029d4 <HAL_I2C_Init+0x27c>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	bf94      	ite	ls
 80027e4:	2301      	movls	r3, #1
 80027e6:	2300      	movhi	r3, #0
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d001      	beq.n	80027f2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e0e7      	b.n	80029c2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	4a78      	ldr	r2, [pc, #480]	@ (80029d8 <HAL_I2C_Init+0x280>)
 80027f6:	fba2 2303 	umull	r2, r3, r2, r3
 80027fa:	0c9b      	lsrs	r3, r3, #18
 80027fc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	68ba      	ldr	r2, [r7, #8]
 800280e:	430a      	orrs	r2, r1
 8002810:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	6a1b      	ldr	r3, [r3, #32]
 8002818:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	4a6a      	ldr	r2, [pc, #424]	@ (80029cc <HAL_I2C_Init+0x274>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d802      	bhi.n	800282c <HAL_I2C_Init+0xd4>
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	3301      	adds	r3, #1
 800282a:	e009      	b.n	8002840 <HAL_I2C_Init+0xe8>
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002832:	fb02 f303 	mul.w	r3, r2, r3
 8002836:	4a69      	ldr	r2, [pc, #420]	@ (80029dc <HAL_I2C_Init+0x284>)
 8002838:	fba2 2303 	umull	r2, r3, r2, r3
 800283c:	099b      	lsrs	r3, r3, #6
 800283e:	3301      	adds	r3, #1
 8002840:	687a      	ldr	r2, [r7, #4]
 8002842:	6812      	ldr	r2, [r2, #0]
 8002844:	430b      	orrs	r3, r1
 8002846:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	69db      	ldr	r3, [r3, #28]
 800284e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002852:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	495c      	ldr	r1, [pc, #368]	@ (80029cc <HAL_I2C_Init+0x274>)
 800285c:	428b      	cmp	r3, r1
 800285e:	d819      	bhi.n	8002894 <HAL_I2C_Init+0x13c>
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	1e59      	subs	r1, r3, #1
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	005b      	lsls	r3, r3, #1
 800286a:	fbb1 f3f3 	udiv	r3, r1, r3
 800286e:	1c59      	adds	r1, r3, #1
 8002870:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002874:	400b      	ands	r3, r1
 8002876:	2b00      	cmp	r3, #0
 8002878:	d00a      	beq.n	8002890 <HAL_I2C_Init+0x138>
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	1e59      	subs	r1, r3, #1
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	005b      	lsls	r3, r3, #1
 8002884:	fbb1 f3f3 	udiv	r3, r1, r3
 8002888:	3301      	adds	r3, #1
 800288a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800288e:	e051      	b.n	8002934 <HAL_I2C_Init+0x1dc>
 8002890:	2304      	movs	r3, #4
 8002892:	e04f      	b.n	8002934 <HAL_I2C_Init+0x1dc>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d111      	bne.n	80028c0 <HAL_I2C_Init+0x168>
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	1e58      	subs	r0, r3, #1
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6859      	ldr	r1, [r3, #4]
 80028a4:	460b      	mov	r3, r1
 80028a6:	005b      	lsls	r3, r3, #1
 80028a8:	440b      	add	r3, r1
 80028aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80028ae:	3301      	adds	r3, #1
 80028b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	bf0c      	ite	eq
 80028b8:	2301      	moveq	r3, #1
 80028ba:	2300      	movne	r3, #0
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	e012      	b.n	80028e6 <HAL_I2C_Init+0x18e>
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	1e58      	subs	r0, r3, #1
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6859      	ldr	r1, [r3, #4]
 80028c8:	460b      	mov	r3, r1
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	440b      	add	r3, r1
 80028ce:	0099      	lsls	r1, r3, #2
 80028d0:	440b      	add	r3, r1
 80028d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80028d6:	3301      	adds	r3, #1
 80028d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028dc:	2b00      	cmp	r3, #0
 80028de:	bf0c      	ite	eq
 80028e0:	2301      	moveq	r3, #1
 80028e2:	2300      	movne	r3, #0
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d001      	beq.n	80028ee <HAL_I2C_Init+0x196>
 80028ea:	2301      	movs	r3, #1
 80028ec:	e022      	b.n	8002934 <HAL_I2C_Init+0x1dc>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d10e      	bne.n	8002914 <HAL_I2C_Init+0x1bc>
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	1e58      	subs	r0, r3, #1
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6859      	ldr	r1, [r3, #4]
 80028fe:	460b      	mov	r3, r1
 8002900:	005b      	lsls	r3, r3, #1
 8002902:	440b      	add	r3, r1
 8002904:	fbb0 f3f3 	udiv	r3, r0, r3
 8002908:	3301      	adds	r3, #1
 800290a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800290e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002912:	e00f      	b.n	8002934 <HAL_I2C_Init+0x1dc>
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	1e58      	subs	r0, r3, #1
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6859      	ldr	r1, [r3, #4]
 800291c:	460b      	mov	r3, r1
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	440b      	add	r3, r1
 8002922:	0099      	lsls	r1, r3, #2
 8002924:	440b      	add	r3, r1
 8002926:	fbb0 f3f3 	udiv	r3, r0, r3
 800292a:	3301      	adds	r3, #1
 800292c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002930:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002934:	6879      	ldr	r1, [r7, #4]
 8002936:	6809      	ldr	r1, [r1, #0]
 8002938:	4313      	orrs	r3, r2
 800293a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	69da      	ldr	r2, [r3, #28]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6a1b      	ldr	r3, [r3, #32]
 800294e:	431a      	orrs	r2, r3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	430a      	orrs	r2, r1
 8002956:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002962:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002966:	687a      	ldr	r2, [r7, #4]
 8002968:	6911      	ldr	r1, [r2, #16]
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	68d2      	ldr	r2, [r2, #12]
 800296e:	4311      	orrs	r1, r2
 8002970:	687a      	ldr	r2, [r7, #4]
 8002972:	6812      	ldr	r2, [r2, #0]
 8002974:	430b      	orrs	r3, r1
 8002976:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	68db      	ldr	r3, [r3, #12]
 800297e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	695a      	ldr	r2, [r3, #20]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	699b      	ldr	r3, [r3, #24]
 800298a:	431a      	orrs	r2, r3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	430a      	orrs	r2, r1
 8002992:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f042 0201 	orr.w	r2, r2, #1
 80029a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2200      	movs	r2, #0
 80029a8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2220      	movs	r2, #32
 80029ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2200      	movs	r2, #0
 80029b6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2200      	movs	r2, #0
 80029bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80029c0:	2300      	movs	r3, #0
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3710      	adds	r7, #16
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	000186a0 	.word	0x000186a0
 80029d0:	001e847f 	.word	0x001e847f
 80029d4:	003d08ff 	.word	0x003d08ff
 80029d8:	431bde83 	.word	0x431bde83
 80029dc:	10624dd3 	.word	0x10624dd3

080029e0 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b083      	sub	sp, #12
 80029e4:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80029e6:	4b06      	ldr	r3, [pc, #24]	@ (8002a00 <HAL_PWR_EnableBkUpAccess+0x20>)
 80029e8:	2201      	movs	r2, #1
 80029ea:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 80029ec:	4b05      	ldr	r3, [pc, #20]	@ (8002a04 <HAL_PWR_EnableBkUpAccess+0x24>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 80029f2:	687b      	ldr	r3, [r7, #4]
}
 80029f4:	bf00      	nop
 80029f6:	370c      	adds	r7, #12
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr
 8002a00:	420e0020 	.word	0x420e0020
 8002a04:	40007000 	.word	0x40007000

08002a08 <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b083      	sub	sp, #12
 8002a0c:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 8002a0e:	4b06      	ldr	r3, [pc, #24]	@ (8002a28 <HAL_PWR_DisableBkUpAccess+0x20>)
 8002a10:	2200      	movs	r2, #0
 8002a12:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8002a14:	4b05      	ldr	r3, [pc, #20]	@ (8002a2c <HAL_PWR_DisableBkUpAccess+0x24>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8002a1a:	687b      	ldr	r3, [r7, #4]
}
 8002a1c:	bf00      	nop
 8002a1e:	370c      	adds	r7, #12
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr
 8002a28:	420e0020 	.word	0x420e0020
 8002a2c:	40007000 	.word	0x40007000

08002a30 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b086      	sub	sp, #24
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d101      	bne.n	8002a42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e267      	b.n	8002f12 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0301 	and.w	r3, r3, #1
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d075      	beq.n	8002b3a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a4e:	4b88      	ldr	r3, [pc, #544]	@ (8002c70 <HAL_RCC_OscConfig+0x240>)
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	f003 030c 	and.w	r3, r3, #12
 8002a56:	2b04      	cmp	r3, #4
 8002a58:	d00c      	beq.n	8002a74 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a5a:	4b85      	ldr	r3, [pc, #532]	@ (8002c70 <HAL_RCC_OscConfig+0x240>)
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a62:	2b08      	cmp	r3, #8
 8002a64:	d112      	bne.n	8002a8c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a66:	4b82      	ldr	r3, [pc, #520]	@ (8002c70 <HAL_RCC_OscConfig+0x240>)
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a6e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002a72:	d10b      	bne.n	8002a8c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a74:	4b7e      	ldr	r3, [pc, #504]	@ (8002c70 <HAL_RCC_OscConfig+0x240>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d05b      	beq.n	8002b38 <HAL_RCC_OscConfig+0x108>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d157      	bne.n	8002b38 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e242      	b.n	8002f12 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a94:	d106      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x74>
 8002a96:	4b76      	ldr	r3, [pc, #472]	@ (8002c70 <HAL_RCC_OscConfig+0x240>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a75      	ldr	r2, [pc, #468]	@ (8002c70 <HAL_RCC_OscConfig+0x240>)
 8002a9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002aa0:	6013      	str	r3, [r2, #0]
 8002aa2:	e01d      	b.n	8002ae0 <HAL_RCC_OscConfig+0xb0>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002aac:	d10c      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x98>
 8002aae:	4b70      	ldr	r3, [pc, #448]	@ (8002c70 <HAL_RCC_OscConfig+0x240>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a6f      	ldr	r2, [pc, #444]	@ (8002c70 <HAL_RCC_OscConfig+0x240>)
 8002ab4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ab8:	6013      	str	r3, [r2, #0]
 8002aba:	4b6d      	ldr	r3, [pc, #436]	@ (8002c70 <HAL_RCC_OscConfig+0x240>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a6c      	ldr	r2, [pc, #432]	@ (8002c70 <HAL_RCC_OscConfig+0x240>)
 8002ac0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ac4:	6013      	str	r3, [r2, #0]
 8002ac6:	e00b      	b.n	8002ae0 <HAL_RCC_OscConfig+0xb0>
 8002ac8:	4b69      	ldr	r3, [pc, #420]	@ (8002c70 <HAL_RCC_OscConfig+0x240>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a68      	ldr	r2, [pc, #416]	@ (8002c70 <HAL_RCC_OscConfig+0x240>)
 8002ace:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ad2:	6013      	str	r3, [r2, #0]
 8002ad4:	4b66      	ldr	r3, [pc, #408]	@ (8002c70 <HAL_RCC_OscConfig+0x240>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a65      	ldr	r2, [pc, #404]	@ (8002c70 <HAL_RCC_OscConfig+0x240>)
 8002ada:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ade:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d013      	beq.n	8002b10 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ae8:	f7fe ff12 	bl	8001910 <HAL_GetTick>
 8002aec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aee:	e008      	b.n	8002b02 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002af0:	f7fe ff0e 	bl	8001910 <HAL_GetTick>
 8002af4:	4602      	mov	r2, r0
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	2b64      	cmp	r3, #100	@ 0x64
 8002afc:	d901      	bls.n	8002b02 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002afe:	2303      	movs	r3, #3
 8002b00:	e207      	b.n	8002f12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b02:	4b5b      	ldr	r3, [pc, #364]	@ (8002c70 <HAL_RCC_OscConfig+0x240>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d0f0      	beq.n	8002af0 <HAL_RCC_OscConfig+0xc0>
 8002b0e:	e014      	b.n	8002b3a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b10:	f7fe fefe 	bl	8001910 <HAL_GetTick>
 8002b14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b16:	e008      	b.n	8002b2a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b18:	f7fe fefa 	bl	8001910 <HAL_GetTick>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	2b64      	cmp	r3, #100	@ 0x64
 8002b24:	d901      	bls.n	8002b2a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b26:	2303      	movs	r3, #3
 8002b28:	e1f3      	b.n	8002f12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b2a:	4b51      	ldr	r3, [pc, #324]	@ (8002c70 <HAL_RCC_OscConfig+0x240>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d1f0      	bne.n	8002b18 <HAL_RCC_OscConfig+0xe8>
 8002b36:	e000      	b.n	8002b3a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 0302 	and.w	r3, r3, #2
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d063      	beq.n	8002c0e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b46:	4b4a      	ldr	r3, [pc, #296]	@ (8002c70 <HAL_RCC_OscConfig+0x240>)
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	f003 030c 	and.w	r3, r3, #12
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d00b      	beq.n	8002b6a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b52:	4b47      	ldr	r3, [pc, #284]	@ (8002c70 <HAL_RCC_OscConfig+0x240>)
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b5a:	2b08      	cmp	r3, #8
 8002b5c:	d11c      	bne.n	8002b98 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b5e:	4b44      	ldr	r3, [pc, #272]	@ (8002c70 <HAL_RCC_OscConfig+0x240>)
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d116      	bne.n	8002b98 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b6a:	4b41      	ldr	r3, [pc, #260]	@ (8002c70 <HAL_RCC_OscConfig+0x240>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 0302 	and.w	r3, r3, #2
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d005      	beq.n	8002b82 <HAL_RCC_OscConfig+0x152>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	68db      	ldr	r3, [r3, #12]
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d001      	beq.n	8002b82 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e1c7      	b.n	8002f12 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b82:	4b3b      	ldr	r3, [pc, #236]	@ (8002c70 <HAL_RCC_OscConfig+0x240>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	691b      	ldr	r3, [r3, #16]
 8002b8e:	00db      	lsls	r3, r3, #3
 8002b90:	4937      	ldr	r1, [pc, #220]	@ (8002c70 <HAL_RCC_OscConfig+0x240>)
 8002b92:	4313      	orrs	r3, r2
 8002b94:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b96:	e03a      	b.n	8002c0e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d020      	beq.n	8002be2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ba0:	4b34      	ldr	r3, [pc, #208]	@ (8002c74 <HAL_RCC_OscConfig+0x244>)
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ba6:	f7fe feb3 	bl	8001910 <HAL_GetTick>
 8002baa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bac:	e008      	b.n	8002bc0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bae:	f7fe feaf 	bl	8001910 <HAL_GetTick>
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	1ad3      	subs	r3, r2, r3
 8002bb8:	2b02      	cmp	r3, #2
 8002bba:	d901      	bls.n	8002bc0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002bbc:	2303      	movs	r3, #3
 8002bbe:	e1a8      	b.n	8002f12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bc0:	4b2b      	ldr	r3, [pc, #172]	@ (8002c70 <HAL_RCC_OscConfig+0x240>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f003 0302 	and.w	r3, r3, #2
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d0f0      	beq.n	8002bae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bcc:	4b28      	ldr	r3, [pc, #160]	@ (8002c70 <HAL_RCC_OscConfig+0x240>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	691b      	ldr	r3, [r3, #16]
 8002bd8:	00db      	lsls	r3, r3, #3
 8002bda:	4925      	ldr	r1, [pc, #148]	@ (8002c70 <HAL_RCC_OscConfig+0x240>)
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	600b      	str	r3, [r1, #0]
 8002be0:	e015      	b.n	8002c0e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002be2:	4b24      	ldr	r3, [pc, #144]	@ (8002c74 <HAL_RCC_OscConfig+0x244>)
 8002be4:	2200      	movs	r2, #0
 8002be6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002be8:	f7fe fe92 	bl	8001910 <HAL_GetTick>
 8002bec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bee:	e008      	b.n	8002c02 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bf0:	f7fe fe8e 	bl	8001910 <HAL_GetTick>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	d901      	bls.n	8002c02 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002bfe:	2303      	movs	r3, #3
 8002c00:	e187      	b.n	8002f12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c02:	4b1b      	ldr	r3, [pc, #108]	@ (8002c70 <HAL_RCC_OscConfig+0x240>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 0302 	and.w	r3, r3, #2
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d1f0      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 0308 	and.w	r3, r3, #8
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d036      	beq.n	8002c88 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	695b      	ldr	r3, [r3, #20]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d016      	beq.n	8002c50 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c22:	4b15      	ldr	r3, [pc, #84]	@ (8002c78 <HAL_RCC_OscConfig+0x248>)
 8002c24:	2201      	movs	r2, #1
 8002c26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c28:	f7fe fe72 	bl	8001910 <HAL_GetTick>
 8002c2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c2e:	e008      	b.n	8002c42 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c30:	f7fe fe6e 	bl	8001910 <HAL_GetTick>
 8002c34:	4602      	mov	r2, r0
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	1ad3      	subs	r3, r2, r3
 8002c3a:	2b02      	cmp	r3, #2
 8002c3c:	d901      	bls.n	8002c42 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002c3e:	2303      	movs	r3, #3
 8002c40:	e167      	b.n	8002f12 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c42:	4b0b      	ldr	r3, [pc, #44]	@ (8002c70 <HAL_RCC_OscConfig+0x240>)
 8002c44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c46:	f003 0302 	and.w	r3, r3, #2
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d0f0      	beq.n	8002c30 <HAL_RCC_OscConfig+0x200>
 8002c4e:	e01b      	b.n	8002c88 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c50:	4b09      	ldr	r3, [pc, #36]	@ (8002c78 <HAL_RCC_OscConfig+0x248>)
 8002c52:	2200      	movs	r2, #0
 8002c54:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c56:	f7fe fe5b 	bl	8001910 <HAL_GetTick>
 8002c5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c5c:	e00e      	b.n	8002c7c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c5e:	f7fe fe57 	bl	8001910 <HAL_GetTick>
 8002c62:	4602      	mov	r2, r0
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	1ad3      	subs	r3, r2, r3
 8002c68:	2b02      	cmp	r3, #2
 8002c6a:	d907      	bls.n	8002c7c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002c6c:	2303      	movs	r3, #3
 8002c6e:	e150      	b.n	8002f12 <HAL_RCC_OscConfig+0x4e2>
 8002c70:	40023800 	.word	0x40023800
 8002c74:	42470000 	.word	0x42470000
 8002c78:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c7c:	4b88      	ldr	r3, [pc, #544]	@ (8002ea0 <HAL_RCC_OscConfig+0x470>)
 8002c7e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c80:	f003 0302 	and.w	r3, r3, #2
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d1ea      	bne.n	8002c5e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f003 0304 	and.w	r3, r3, #4
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	f000 8097 	beq.w	8002dc4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c96:	2300      	movs	r3, #0
 8002c98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c9a:	4b81      	ldr	r3, [pc, #516]	@ (8002ea0 <HAL_RCC_OscConfig+0x470>)
 8002c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d10f      	bne.n	8002cc6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	60bb      	str	r3, [r7, #8]
 8002caa:	4b7d      	ldr	r3, [pc, #500]	@ (8002ea0 <HAL_RCC_OscConfig+0x470>)
 8002cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cae:	4a7c      	ldr	r2, [pc, #496]	@ (8002ea0 <HAL_RCC_OscConfig+0x470>)
 8002cb0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002cb4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002cb6:	4b7a      	ldr	r3, [pc, #488]	@ (8002ea0 <HAL_RCC_OscConfig+0x470>)
 8002cb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cbe:	60bb      	str	r3, [r7, #8]
 8002cc0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cc6:	4b77      	ldr	r3, [pc, #476]	@ (8002ea4 <HAL_RCC_OscConfig+0x474>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d118      	bne.n	8002d04 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cd2:	4b74      	ldr	r3, [pc, #464]	@ (8002ea4 <HAL_RCC_OscConfig+0x474>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a73      	ldr	r2, [pc, #460]	@ (8002ea4 <HAL_RCC_OscConfig+0x474>)
 8002cd8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cdc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cde:	f7fe fe17 	bl	8001910 <HAL_GetTick>
 8002ce2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ce4:	e008      	b.n	8002cf8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ce6:	f7fe fe13 	bl	8001910 <HAL_GetTick>
 8002cea:	4602      	mov	r2, r0
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	1ad3      	subs	r3, r2, r3
 8002cf0:	2b02      	cmp	r3, #2
 8002cf2:	d901      	bls.n	8002cf8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002cf4:	2303      	movs	r3, #3
 8002cf6:	e10c      	b.n	8002f12 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cf8:	4b6a      	ldr	r3, [pc, #424]	@ (8002ea4 <HAL_RCC_OscConfig+0x474>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d0f0      	beq.n	8002ce6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d106      	bne.n	8002d1a <HAL_RCC_OscConfig+0x2ea>
 8002d0c:	4b64      	ldr	r3, [pc, #400]	@ (8002ea0 <HAL_RCC_OscConfig+0x470>)
 8002d0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d10:	4a63      	ldr	r2, [pc, #396]	@ (8002ea0 <HAL_RCC_OscConfig+0x470>)
 8002d12:	f043 0301 	orr.w	r3, r3, #1
 8002d16:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d18:	e01c      	b.n	8002d54 <HAL_RCC_OscConfig+0x324>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	2b05      	cmp	r3, #5
 8002d20:	d10c      	bne.n	8002d3c <HAL_RCC_OscConfig+0x30c>
 8002d22:	4b5f      	ldr	r3, [pc, #380]	@ (8002ea0 <HAL_RCC_OscConfig+0x470>)
 8002d24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d26:	4a5e      	ldr	r2, [pc, #376]	@ (8002ea0 <HAL_RCC_OscConfig+0x470>)
 8002d28:	f043 0304 	orr.w	r3, r3, #4
 8002d2c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d2e:	4b5c      	ldr	r3, [pc, #368]	@ (8002ea0 <HAL_RCC_OscConfig+0x470>)
 8002d30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d32:	4a5b      	ldr	r2, [pc, #364]	@ (8002ea0 <HAL_RCC_OscConfig+0x470>)
 8002d34:	f043 0301 	orr.w	r3, r3, #1
 8002d38:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d3a:	e00b      	b.n	8002d54 <HAL_RCC_OscConfig+0x324>
 8002d3c:	4b58      	ldr	r3, [pc, #352]	@ (8002ea0 <HAL_RCC_OscConfig+0x470>)
 8002d3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d40:	4a57      	ldr	r2, [pc, #348]	@ (8002ea0 <HAL_RCC_OscConfig+0x470>)
 8002d42:	f023 0301 	bic.w	r3, r3, #1
 8002d46:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d48:	4b55      	ldr	r3, [pc, #340]	@ (8002ea0 <HAL_RCC_OscConfig+0x470>)
 8002d4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d4c:	4a54      	ldr	r2, [pc, #336]	@ (8002ea0 <HAL_RCC_OscConfig+0x470>)
 8002d4e:	f023 0304 	bic.w	r3, r3, #4
 8002d52:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d015      	beq.n	8002d88 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d5c:	f7fe fdd8 	bl	8001910 <HAL_GetTick>
 8002d60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d62:	e00a      	b.n	8002d7a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d64:	f7fe fdd4 	bl	8001910 <HAL_GetTick>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d901      	bls.n	8002d7a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	e0cb      	b.n	8002f12 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d7a:	4b49      	ldr	r3, [pc, #292]	@ (8002ea0 <HAL_RCC_OscConfig+0x470>)
 8002d7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d7e:	f003 0302 	and.w	r3, r3, #2
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d0ee      	beq.n	8002d64 <HAL_RCC_OscConfig+0x334>
 8002d86:	e014      	b.n	8002db2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d88:	f7fe fdc2 	bl	8001910 <HAL_GetTick>
 8002d8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d8e:	e00a      	b.n	8002da6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d90:	f7fe fdbe 	bl	8001910 <HAL_GetTick>
 8002d94:	4602      	mov	r2, r0
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d901      	bls.n	8002da6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002da2:	2303      	movs	r3, #3
 8002da4:	e0b5      	b.n	8002f12 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002da6:	4b3e      	ldr	r3, [pc, #248]	@ (8002ea0 <HAL_RCC_OscConfig+0x470>)
 8002da8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002daa:	f003 0302 	and.w	r3, r3, #2
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d1ee      	bne.n	8002d90 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002db2:	7dfb      	ldrb	r3, [r7, #23]
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d105      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002db8:	4b39      	ldr	r3, [pc, #228]	@ (8002ea0 <HAL_RCC_OscConfig+0x470>)
 8002dba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dbc:	4a38      	ldr	r2, [pc, #224]	@ (8002ea0 <HAL_RCC_OscConfig+0x470>)
 8002dbe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002dc2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	699b      	ldr	r3, [r3, #24]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	f000 80a1 	beq.w	8002f10 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002dce:	4b34      	ldr	r3, [pc, #208]	@ (8002ea0 <HAL_RCC_OscConfig+0x470>)
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	f003 030c 	and.w	r3, r3, #12
 8002dd6:	2b08      	cmp	r3, #8
 8002dd8:	d05c      	beq.n	8002e94 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	699b      	ldr	r3, [r3, #24]
 8002dde:	2b02      	cmp	r3, #2
 8002de0:	d141      	bne.n	8002e66 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002de2:	4b31      	ldr	r3, [pc, #196]	@ (8002ea8 <HAL_RCC_OscConfig+0x478>)
 8002de4:	2200      	movs	r2, #0
 8002de6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002de8:	f7fe fd92 	bl	8001910 <HAL_GetTick>
 8002dec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dee:	e008      	b.n	8002e02 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002df0:	f7fe fd8e 	bl	8001910 <HAL_GetTick>
 8002df4:	4602      	mov	r2, r0
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	2b02      	cmp	r3, #2
 8002dfc:	d901      	bls.n	8002e02 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	e087      	b.n	8002f12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e02:	4b27      	ldr	r3, [pc, #156]	@ (8002ea0 <HAL_RCC_OscConfig+0x470>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d1f0      	bne.n	8002df0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	69da      	ldr	r2, [r3, #28]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6a1b      	ldr	r3, [r3, #32]
 8002e16:	431a      	orrs	r2, r3
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e1c:	019b      	lsls	r3, r3, #6
 8002e1e:	431a      	orrs	r2, r3
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e24:	085b      	lsrs	r3, r3, #1
 8002e26:	3b01      	subs	r3, #1
 8002e28:	041b      	lsls	r3, r3, #16
 8002e2a:	431a      	orrs	r2, r3
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e30:	061b      	lsls	r3, r3, #24
 8002e32:	491b      	ldr	r1, [pc, #108]	@ (8002ea0 <HAL_RCC_OscConfig+0x470>)
 8002e34:	4313      	orrs	r3, r2
 8002e36:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e38:	4b1b      	ldr	r3, [pc, #108]	@ (8002ea8 <HAL_RCC_OscConfig+0x478>)
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e3e:	f7fe fd67 	bl	8001910 <HAL_GetTick>
 8002e42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e44:	e008      	b.n	8002e58 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e46:	f7fe fd63 	bl	8001910 <HAL_GetTick>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	1ad3      	subs	r3, r2, r3
 8002e50:	2b02      	cmp	r3, #2
 8002e52:	d901      	bls.n	8002e58 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002e54:	2303      	movs	r3, #3
 8002e56:	e05c      	b.n	8002f12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e58:	4b11      	ldr	r3, [pc, #68]	@ (8002ea0 <HAL_RCC_OscConfig+0x470>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d0f0      	beq.n	8002e46 <HAL_RCC_OscConfig+0x416>
 8002e64:	e054      	b.n	8002f10 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e66:	4b10      	ldr	r3, [pc, #64]	@ (8002ea8 <HAL_RCC_OscConfig+0x478>)
 8002e68:	2200      	movs	r2, #0
 8002e6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e6c:	f7fe fd50 	bl	8001910 <HAL_GetTick>
 8002e70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e72:	e008      	b.n	8002e86 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e74:	f7fe fd4c 	bl	8001910 <HAL_GetTick>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	1ad3      	subs	r3, r2, r3
 8002e7e:	2b02      	cmp	r3, #2
 8002e80:	d901      	bls.n	8002e86 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002e82:	2303      	movs	r3, #3
 8002e84:	e045      	b.n	8002f12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e86:	4b06      	ldr	r3, [pc, #24]	@ (8002ea0 <HAL_RCC_OscConfig+0x470>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d1f0      	bne.n	8002e74 <HAL_RCC_OscConfig+0x444>
 8002e92:	e03d      	b.n	8002f10 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	699b      	ldr	r3, [r3, #24]
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d107      	bne.n	8002eac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	e038      	b.n	8002f12 <HAL_RCC_OscConfig+0x4e2>
 8002ea0:	40023800 	.word	0x40023800
 8002ea4:	40007000 	.word	0x40007000
 8002ea8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002eac:	4b1b      	ldr	r3, [pc, #108]	@ (8002f1c <HAL_RCC_OscConfig+0x4ec>)
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	699b      	ldr	r3, [r3, #24]
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d028      	beq.n	8002f0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d121      	bne.n	8002f0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d11a      	bne.n	8002f0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ed6:	68fa      	ldr	r2, [r7, #12]
 8002ed8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002edc:	4013      	ands	r3, r2
 8002ede:	687a      	ldr	r2, [r7, #4]
 8002ee0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002ee2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d111      	bne.n	8002f0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ef2:	085b      	lsrs	r3, r3, #1
 8002ef4:	3b01      	subs	r3, #1
 8002ef6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d107      	bne.n	8002f0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f06:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d001      	beq.n	8002f10 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e000      	b.n	8002f12 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002f10:	2300      	movs	r3, #0
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3718      	adds	r7, #24
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	40023800 	.word	0x40023800

08002f20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b084      	sub	sp, #16
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
 8002f28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d101      	bne.n	8002f34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	e0cc      	b.n	80030ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f34:	4b68      	ldr	r3, [pc, #416]	@ (80030d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f003 0307 	and.w	r3, r3, #7
 8002f3c:	683a      	ldr	r2, [r7, #0]
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	d90c      	bls.n	8002f5c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f42:	4b65      	ldr	r3, [pc, #404]	@ (80030d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002f44:	683a      	ldr	r2, [r7, #0]
 8002f46:	b2d2      	uxtb	r2, r2
 8002f48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f4a:	4b63      	ldr	r3, [pc, #396]	@ (80030d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 0307 	and.w	r3, r3, #7
 8002f52:	683a      	ldr	r2, [r7, #0]
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d001      	beq.n	8002f5c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e0b8      	b.n	80030ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 0302 	and.w	r3, r3, #2
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d020      	beq.n	8002faa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 0304 	and.w	r3, r3, #4
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d005      	beq.n	8002f80 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f74:	4b59      	ldr	r3, [pc, #356]	@ (80030dc <HAL_RCC_ClockConfig+0x1bc>)
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	4a58      	ldr	r2, [pc, #352]	@ (80030dc <HAL_RCC_ClockConfig+0x1bc>)
 8002f7a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002f7e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 0308 	and.w	r3, r3, #8
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d005      	beq.n	8002f98 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f8c:	4b53      	ldr	r3, [pc, #332]	@ (80030dc <HAL_RCC_ClockConfig+0x1bc>)
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	4a52      	ldr	r2, [pc, #328]	@ (80030dc <HAL_RCC_ClockConfig+0x1bc>)
 8002f92:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002f96:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f98:	4b50      	ldr	r3, [pc, #320]	@ (80030dc <HAL_RCC_ClockConfig+0x1bc>)
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	494d      	ldr	r1, [pc, #308]	@ (80030dc <HAL_RCC_ClockConfig+0x1bc>)
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 0301 	and.w	r3, r3, #1
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d044      	beq.n	8003040 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	d107      	bne.n	8002fce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fbe:	4b47      	ldr	r3, [pc, #284]	@ (80030dc <HAL_RCC_ClockConfig+0x1bc>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d119      	bne.n	8002ffe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e07f      	b.n	80030ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	2b02      	cmp	r3, #2
 8002fd4:	d003      	beq.n	8002fde <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fda:	2b03      	cmp	r3, #3
 8002fdc:	d107      	bne.n	8002fee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fde:	4b3f      	ldr	r3, [pc, #252]	@ (80030dc <HAL_RCC_ClockConfig+0x1bc>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d109      	bne.n	8002ffe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e06f      	b.n	80030ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fee:	4b3b      	ldr	r3, [pc, #236]	@ (80030dc <HAL_RCC_ClockConfig+0x1bc>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 0302 	and.w	r3, r3, #2
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d101      	bne.n	8002ffe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e067      	b.n	80030ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ffe:	4b37      	ldr	r3, [pc, #220]	@ (80030dc <HAL_RCC_ClockConfig+0x1bc>)
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	f023 0203 	bic.w	r2, r3, #3
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	4934      	ldr	r1, [pc, #208]	@ (80030dc <HAL_RCC_ClockConfig+0x1bc>)
 800300c:	4313      	orrs	r3, r2
 800300e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003010:	f7fe fc7e 	bl	8001910 <HAL_GetTick>
 8003014:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003016:	e00a      	b.n	800302e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003018:	f7fe fc7a 	bl	8001910 <HAL_GetTick>
 800301c:	4602      	mov	r2, r0
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	1ad3      	subs	r3, r2, r3
 8003022:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003026:	4293      	cmp	r3, r2
 8003028:	d901      	bls.n	800302e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800302a:	2303      	movs	r3, #3
 800302c:	e04f      	b.n	80030ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800302e:	4b2b      	ldr	r3, [pc, #172]	@ (80030dc <HAL_RCC_ClockConfig+0x1bc>)
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	f003 020c 	and.w	r2, r3, #12
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	009b      	lsls	r3, r3, #2
 800303c:	429a      	cmp	r2, r3
 800303e:	d1eb      	bne.n	8003018 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003040:	4b25      	ldr	r3, [pc, #148]	@ (80030d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f003 0307 	and.w	r3, r3, #7
 8003048:	683a      	ldr	r2, [r7, #0]
 800304a:	429a      	cmp	r2, r3
 800304c:	d20c      	bcs.n	8003068 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800304e:	4b22      	ldr	r3, [pc, #136]	@ (80030d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003050:	683a      	ldr	r2, [r7, #0]
 8003052:	b2d2      	uxtb	r2, r2
 8003054:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003056:	4b20      	ldr	r3, [pc, #128]	@ (80030d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 0307 	and.w	r3, r3, #7
 800305e:	683a      	ldr	r2, [r7, #0]
 8003060:	429a      	cmp	r2, r3
 8003062:	d001      	beq.n	8003068 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e032      	b.n	80030ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 0304 	and.w	r3, r3, #4
 8003070:	2b00      	cmp	r3, #0
 8003072:	d008      	beq.n	8003086 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003074:	4b19      	ldr	r3, [pc, #100]	@ (80030dc <HAL_RCC_ClockConfig+0x1bc>)
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	68db      	ldr	r3, [r3, #12]
 8003080:	4916      	ldr	r1, [pc, #88]	@ (80030dc <HAL_RCC_ClockConfig+0x1bc>)
 8003082:	4313      	orrs	r3, r2
 8003084:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 0308 	and.w	r3, r3, #8
 800308e:	2b00      	cmp	r3, #0
 8003090:	d009      	beq.n	80030a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003092:	4b12      	ldr	r3, [pc, #72]	@ (80030dc <HAL_RCC_ClockConfig+0x1bc>)
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	691b      	ldr	r3, [r3, #16]
 800309e:	00db      	lsls	r3, r3, #3
 80030a0:	490e      	ldr	r1, [pc, #56]	@ (80030dc <HAL_RCC_ClockConfig+0x1bc>)
 80030a2:	4313      	orrs	r3, r2
 80030a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80030a6:	f000 f821 	bl	80030ec <HAL_RCC_GetSysClockFreq>
 80030aa:	4602      	mov	r2, r0
 80030ac:	4b0b      	ldr	r3, [pc, #44]	@ (80030dc <HAL_RCC_ClockConfig+0x1bc>)
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	091b      	lsrs	r3, r3, #4
 80030b2:	f003 030f 	and.w	r3, r3, #15
 80030b6:	490a      	ldr	r1, [pc, #40]	@ (80030e0 <HAL_RCC_ClockConfig+0x1c0>)
 80030b8:	5ccb      	ldrb	r3, [r1, r3]
 80030ba:	fa22 f303 	lsr.w	r3, r2, r3
 80030be:	4a09      	ldr	r2, [pc, #36]	@ (80030e4 <HAL_RCC_ClockConfig+0x1c4>)
 80030c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80030c2:	4b09      	ldr	r3, [pc, #36]	@ (80030e8 <HAL_RCC_ClockConfig+0x1c8>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4618      	mov	r0, r3
 80030c8:	f7fe fbde 	bl	8001888 <HAL_InitTick>

  return HAL_OK;
 80030cc:	2300      	movs	r3, #0
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	3710      	adds	r7, #16
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}
 80030d6:	bf00      	nop
 80030d8:	40023c00 	.word	0x40023c00
 80030dc:	40023800 	.word	0x40023800
 80030e0:	08005570 	.word	0x08005570
 80030e4:	20000000 	.word	0x20000000
 80030e8:	20000004 	.word	0x20000004

080030ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030f0:	b090      	sub	sp, #64	@ 0x40
 80030f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80030f4:	2300      	movs	r3, #0
 80030f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80030f8:	2300      	movs	r3, #0
 80030fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80030fc:	2300      	movs	r3, #0
 80030fe:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003100:	2300      	movs	r3, #0
 8003102:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003104:	4b59      	ldr	r3, [pc, #356]	@ (800326c <HAL_RCC_GetSysClockFreq+0x180>)
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	f003 030c 	and.w	r3, r3, #12
 800310c:	2b08      	cmp	r3, #8
 800310e:	d00d      	beq.n	800312c <HAL_RCC_GetSysClockFreq+0x40>
 8003110:	2b08      	cmp	r3, #8
 8003112:	f200 80a1 	bhi.w	8003258 <HAL_RCC_GetSysClockFreq+0x16c>
 8003116:	2b00      	cmp	r3, #0
 8003118:	d002      	beq.n	8003120 <HAL_RCC_GetSysClockFreq+0x34>
 800311a:	2b04      	cmp	r3, #4
 800311c:	d003      	beq.n	8003126 <HAL_RCC_GetSysClockFreq+0x3a>
 800311e:	e09b      	b.n	8003258 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003120:	4b53      	ldr	r3, [pc, #332]	@ (8003270 <HAL_RCC_GetSysClockFreq+0x184>)
 8003122:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8003124:	e09b      	b.n	800325e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003126:	4b53      	ldr	r3, [pc, #332]	@ (8003274 <HAL_RCC_GetSysClockFreq+0x188>)
 8003128:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800312a:	e098      	b.n	800325e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800312c:	4b4f      	ldr	r3, [pc, #316]	@ (800326c <HAL_RCC_GetSysClockFreq+0x180>)
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003134:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003136:	4b4d      	ldr	r3, [pc, #308]	@ (800326c <HAL_RCC_GetSysClockFreq+0x180>)
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800313e:	2b00      	cmp	r3, #0
 8003140:	d028      	beq.n	8003194 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003142:	4b4a      	ldr	r3, [pc, #296]	@ (800326c <HAL_RCC_GetSysClockFreq+0x180>)
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	099b      	lsrs	r3, r3, #6
 8003148:	2200      	movs	r2, #0
 800314a:	623b      	str	r3, [r7, #32]
 800314c:	627a      	str	r2, [r7, #36]	@ 0x24
 800314e:	6a3b      	ldr	r3, [r7, #32]
 8003150:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003154:	2100      	movs	r1, #0
 8003156:	4b47      	ldr	r3, [pc, #284]	@ (8003274 <HAL_RCC_GetSysClockFreq+0x188>)
 8003158:	fb03 f201 	mul.w	r2, r3, r1
 800315c:	2300      	movs	r3, #0
 800315e:	fb00 f303 	mul.w	r3, r0, r3
 8003162:	4413      	add	r3, r2
 8003164:	4a43      	ldr	r2, [pc, #268]	@ (8003274 <HAL_RCC_GetSysClockFreq+0x188>)
 8003166:	fba0 1202 	umull	r1, r2, r0, r2
 800316a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800316c:	460a      	mov	r2, r1
 800316e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003170:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003172:	4413      	add	r3, r2
 8003174:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003176:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003178:	2200      	movs	r2, #0
 800317a:	61bb      	str	r3, [r7, #24]
 800317c:	61fa      	str	r2, [r7, #28]
 800317e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003182:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003186:	f7fd f81f 	bl	80001c8 <__aeabi_uldivmod>
 800318a:	4602      	mov	r2, r0
 800318c:	460b      	mov	r3, r1
 800318e:	4613      	mov	r3, r2
 8003190:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003192:	e053      	b.n	800323c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003194:	4b35      	ldr	r3, [pc, #212]	@ (800326c <HAL_RCC_GetSysClockFreq+0x180>)
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	099b      	lsrs	r3, r3, #6
 800319a:	2200      	movs	r2, #0
 800319c:	613b      	str	r3, [r7, #16]
 800319e:	617a      	str	r2, [r7, #20]
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80031a6:	f04f 0b00 	mov.w	fp, #0
 80031aa:	4652      	mov	r2, sl
 80031ac:	465b      	mov	r3, fp
 80031ae:	f04f 0000 	mov.w	r0, #0
 80031b2:	f04f 0100 	mov.w	r1, #0
 80031b6:	0159      	lsls	r1, r3, #5
 80031b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031bc:	0150      	lsls	r0, r2, #5
 80031be:	4602      	mov	r2, r0
 80031c0:	460b      	mov	r3, r1
 80031c2:	ebb2 080a 	subs.w	r8, r2, sl
 80031c6:	eb63 090b 	sbc.w	r9, r3, fp
 80031ca:	f04f 0200 	mov.w	r2, #0
 80031ce:	f04f 0300 	mov.w	r3, #0
 80031d2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80031d6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80031da:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80031de:	ebb2 0408 	subs.w	r4, r2, r8
 80031e2:	eb63 0509 	sbc.w	r5, r3, r9
 80031e6:	f04f 0200 	mov.w	r2, #0
 80031ea:	f04f 0300 	mov.w	r3, #0
 80031ee:	00eb      	lsls	r3, r5, #3
 80031f0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80031f4:	00e2      	lsls	r2, r4, #3
 80031f6:	4614      	mov	r4, r2
 80031f8:	461d      	mov	r5, r3
 80031fa:	eb14 030a 	adds.w	r3, r4, sl
 80031fe:	603b      	str	r3, [r7, #0]
 8003200:	eb45 030b 	adc.w	r3, r5, fp
 8003204:	607b      	str	r3, [r7, #4]
 8003206:	f04f 0200 	mov.w	r2, #0
 800320a:	f04f 0300 	mov.w	r3, #0
 800320e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003212:	4629      	mov	r1, r5
 8003214:	028b      	lsls	r3, r1, #10
 8003216:	4621      	mov	r1, r4
 8003218:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800321c:	4621      	mov	r1, r4
 800321e:	028a      	lsls	r2, r1, #10
 8003220:	4610      	mov	r0, r2
 8003222:	4619      	mov	r1, r3
 8003224:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003226:	2200      	movs	r2, #0
 8003228:	60bb      	str	r3, [r7, #8]
 800322a:	60fa      	str	r2, [r7, #12]
 800322c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003230:	f7fc ffca 	bl	80001c8 <__aeabi_uldivmod>
 8003234:	4602      	mov	r2, r0
 8003236:	460b      	mov	r3, r1
 8003238:	4613      	mov	r3, r2
 800323a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800323c:	4b0b      	ldr	r3, [pc, #44]	@ (800326c <HAL_RCC_GetSysClockFreq+0x180>)
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	0c1b      	lsrs	r3, r3, #16
 8003242:	f003 0303 	and.w	r3, r3, #3
 8003246:	3301      	adds	r3, #1
 8003248:	005b      	lsls	r3, r3, #1
 800324a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 800324c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800324e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003250:	fbb2 f3f3 	udiv	r3, r2, r3
 8003254:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003256:	e002      	b.n	800325e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003258:	4b05      	ldr	r3, [pc, #20]	@ (8003270 <HAL_RCC_GetSysClockFreq+0x184>)
 800325a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800325c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800325e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003260:	4618      	mov	r0, r3
 8003262:	3740      	adds	r7, #64	@ 0x40
 8003264:	46bd      	mov	sp, r7
 8003266:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800326a:	bf00      	nop
 800326c:	40023800 	.word	0x40023800
 8003270:	00f42400 	.word	0x00f42400
 8003274:	017d7840 	.word	0x017d7840

08003278 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003278:	b480      	push	{r7}
 800327a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800327c:	4b03      	ldr	r3, [pc, #12]	@ (800328c <HAL_RCC_GetHCLKFreq+0x14>)
 800327e:	681b      	ldr	r3, [r3, #0]
}
 8003280:	4618      	mov	r0, r3
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr
 800328a:	bf00      	nop
 800328c:	20000000 	.word	0x20000000

08003290 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003294:	f7ff fff0 	bl	8003278 <HAL_RCC_GetHCLKFreq>
 8003298:	4602      	mov	r2, r0
 800329a:	4b05      	ldr	r3, [pc, #20]	@ (80032b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	0a9b      	lsrs	r3, r3, #10
 80032a0:	f003 0307 	and.w	r3, r3, #7
 80032a4:	4903      	ldr	r1, [pc, #12]	@ (80032b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032a6:	5ccb      	ldrb	r3, [r1, r3]
 80032a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	bd80      	pop	{r7, pc}
 80032b0:	40023800 	.word	0x40023800
 80032b4:	08005580 	.word	0x08005580

080032b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80032bc:	f7ff ffdc 	bl	8003278 <HAL_RCC_GetHCLKFreq>
 80032c0:	4602      	mov	r2, r0
 80032c2:	4b05      	ldr	r3, [pc, #20]	@ (80032d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	0b5b      	lsrs	r3, r3, #13
 80032c8:	f003 0307 	and.w	r3, r3, #7
 80032cc:	4903      	ldr	r1, [pc, #12]	@ (80032dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80032ce:	5ccb      	ldrb	r3, [r1, r3]
 80032d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	bd80      	pop	{r7, pc}
 80032d8:	40023800 	.word	0x40023800
 80032dc:	08005580 	.word	0x08005580

080032e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b082      	sub	sp, #8
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d101      	bne.n	80032f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e041      	b.n	8003376 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d106      	bne.n	800330c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2200      	movs	r2, #0
 8003302:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f7fd fff6 	bl	80012f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2202      	movs	r2, #2
 8003310:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	3304      	adds	r3, #4
 800331c:	4619      	mov	r1, r3
 800331e:	4610      	mov	r0, r2
 8003320:	f000 fcce 	bl	8003cc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2201      	movs	r2, #1
 8003328:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2201      	movs	r2, #1
 8003330:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2201      	movs	r2, #1
 8003338:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2201      	movs	r2, #1
 8003340:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2201      	movs	r2, #1
 8003348:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2201      	movs	r2, #1
 8003350:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2201      	movs	r2, #1
 8003358:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2201      	movs	r2, #1
 8003360:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2201      	movs	r2, #1
 8003368:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2201      	movs	r2, #1
 8003370:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003374:	2300      	movs	r3, #0
}
 8003376:	4618      	mov	r0, r3
 8003378:	3708      	adds	r7, #8
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}

0800337e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800337e:	b580      	push	{r7, lr}
 8003380:	b082      	sub	sp, #8
 8003382:	af00      	add	r7, sp, #0
 8003384:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d101      	bne.n	8003390 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	e041      	b.n	8003414 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003396:	b2db      	uxtb	r3, r3
 8003398:	2b00      	cmp	r3, #0
 800339a:	d106      	bne.n	80033aa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2200      	movs	r2, #0
 80033a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80033a4:	6878      	ldr	r0, [r7, #4]
 80033a6:	f000 f839 	bl	800341c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2202      	movs	r2, #2
 80033ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	3304      	adds	r3, #4
 80033ba:	4619      	mov	r1, r3
 80033bc:	4610      	mov	r0, r2
 80033be:	f000 fc7f 	bl	8003cc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2201      	movs	r2, #1
 80033c6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2201      	movs	r2, #1
 80033ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2201      	movs	r2, #1
 80033d6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2201      	movs	r2, #1
 80033de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2201      	movs	r2, #1
 80033e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2201      	movs	r2, #1
 80033ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2201      	movs	r2, #1
 80033f6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2201      	movs	r2, #1
 80033fe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2201      	movs	r2, #1
 8003406:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2201      	movs	r2, #1
 800340e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003412:	2300      	movs	r3, #0
}
 8003414:	4618      	mov	r0, r3
 8003416:	3708      	adds	r7, #8
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}

0800341c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800341c:	b480      	push	{r7}
 800341e:	b083      	sub	sp, #12
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003424:	bf00      	nop
 8003426:	370c      	adds	r7, #12
 8003428:	46bd      	mov	sp, r7
 800342a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342e:	4770      	bx	lr

08003430 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b082      	sub	sp, #8
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d101      	bne.n	8003442 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e041      	b.n	80034c6 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003448:	b2db      	uxtb	r3, r3
 800344a:	2b00      	cmp	r3, #0
 800344c:	d106      	bne.n	800345c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2200      	movs	r2, #0
 8003452:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f000 f839 	bl	80034ce <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2202      	movs	r2, #2
 8003460:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	3304      	adds	r3, #4
 800346c:	4619      	mov	r1, r3
 800346e:	4610      	mov	r0, r2
 8003470:	f000 fc26 	bl	8003cc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2201      	movs	r2, #1
 8003478:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2201      	movs	r2, #1
 8003480:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2201      	movs	r2, #1
 8003488:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2201      	movs	r2, #1
 8003490:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2201      	movs	r2, #1
 8003498:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2201      	movs	r2, #1
 80034a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2201      	movs	r2, #1
 80034a8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2201      	movs	r2, #1
 80034b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2201      	movs	r2, #1
 80034b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2201      	movs	r2, #1
 80034c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80034c4:	2300      	movs	r3, #0
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3708      	adds	r7, #8
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}

080034ce <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80034ce:	b480      	push	{r7}
 80034d0:	b083      	sub	sp, #12
 80034d2:	af00      	add	r7, sp, #0
 80034d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80034d6:	bf00      	nop
 80034d8:	370c      	adds	r7, #12
 80034da:	46bd      	mov	sp, r7
 80034dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e0:	4770      	bx	lr

080034e2 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80034e2:	b580      	push	{r7, lr}
 80034e4:	b086      	sub	sp, #24
 80034e6:	af00      	add	r7, sp, #0
 80034e8:	6078      	str	r0, [r7, #4]
 80034ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d101      	bne.n	80034f6 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e097      	b.n	8003626 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d106      	bne.n	8003510 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2200      	movs	r2, #0
 8003506:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f7fd ffac 	bl	8001468 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2202      	movs	r2, #2
 8003514:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	687a      	ldr	r2, [r7, #4]
 8003520:	6812      	ldr	r2, [r2, #0]
 8003522:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003526:	f023 0307 	bic.w	r3, r3, #7
 800352a:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	3304      	adds	r3, #4
 8003534:	4619      	mov	r1, r3
 8003536:	4610      	mov	r0, r2
 8003538:	f000 fbc2 	bl	8003cc0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	699b      	ldr	r3, [r3, #24]
 800354a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	6a1b      	ldr	r3, [r3, #32]
 8003552:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	697a      	ldr	r2, [r7, #20]
 800355a:	4313      	orrs	r3, r2
 800355c:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003564:	f023 0303 	bic.w	r3, r3, #3
 8003568:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	689a      	ldr	r2, [r3, #8]
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	699b      	ldr	r3, [r3, #24]
 8003572:	021b      	lsls	r3, r3, #8
 8003574:	4313      	orrs	r3, r2
 8003576:	693a      	ldr	r2, [r7, #16]
 8003578:	4313      	orrs	r3, r2
 800357a:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8003582:	f023 030c 	bic.w	r3, r3, #12
 8003586:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800358e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003592:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	68da      	ldr	r2, [r3, #12]
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	69db      	ldr	r3, [r3, #28]
 800359c:	021b      	lsls	r3, r3, #8
 800359e:	4313      	orrs	r3, r2
 80035a0:	693a      	ldr	r2, [r7, #16]
 80035a2:	4313      	orrs	r3, r2
 80035a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	691b      	ldr	r3, [r3, #16]
 80035aa:	011a      	lsls	r2, r3, #4
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	6a1b      	ldr	r3, [r3, #32]
 80035b0:	031b      	lsls	r3, r3, #12
 80035b2:	4313      	orrs	r3, r2
 80035b4:	693a      	ldr	r2, [r7, #16]
 80035b6:	4313      	orrs	r3, r2
 80035b8:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80035c0:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80035c8:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	685a      	ldr	r2, [r3, #4]
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	695b      	ldr	r3, [r3, #20]
 80035d2:	011b      	lsls	r3, r3, #4
 80035d4:	4313      	orrs	r3, r2
 80035d6:	68fa      	ldr	r2, [r7, #12]
 80035d8:	4313      	orrs	r3, r2
 80035da:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	697a      	ldr	r2, [r7, #20]
 80035e2:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	693a      	ldr	r2, [r7, #16]
 80035ea:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	68fa      	ldr	r2, [r7, #12]
 80035f2:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2201      	movs	r2, #1
 80035f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2201      	movs	r2, #1
 8003600:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2201      	movs	r2, #1
 8003608:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2201      	movs	r2, #1
 8003610:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2201      	movs	r2, #1
 8003618:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2201      	movs	r2, #1
 8003620:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003624:	2300      	movs	r3, #0
}
 8003626:	4618      	mov	r0, r3
 8003628:	3718      	adds	r7, #24
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}

0800362e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800362e:	b580      	push	{r7, lr}
 8003630:	b084      	sub	sp, #16
 8003632:	af00      	add	r7, sp, #0
 8003634:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	68db      	ldr	r3, [r3, #12]
 800363c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	691b      	ldr	r3, [r3, #16]
 8003644:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	f003 0302 	and.w	r3, r3, #2
 800364c:	2b00      	cmp	r3, #0
 800364e:	d020      	beq.n	8003692 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	f003 0302 	and.w	r3, r3, #2
 8003656:	2b00      	cmp	r3, #0
 8003658:	d01b      	beq.n	8003692 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f06f 0202 	mvn.w	r2, #2
 8003662:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2201      	movs	r2, #1
 8003668:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	699b      	ldr	r3, [r3, #24]
 8003670:	f003 0303 	and.w	r3, r3, #3
 8003674:	2b00      	cmp	r3, #0
 8003676:	d003      	beq.n	8003680 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003678:	6878      	ldr	r0, [r7, #4]
 800367a:	f000 fb02 	bl	8003c82 <HAL_TIM_IC_CaptureCallback>
 800367e:	e005      	b.n	800368c <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	f000 faf4 	bl	8003c6e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f000 fb05 	bl	8003c96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2200      	movs	r2, #0
 8003690:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	f003 0304 	and.w	r3, r3, #4
 8003698:	2b00      	cmp	r3, #0
 800369a:	d020      	beq.n	80036de <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	f003 0304 	and.w	r3, r3, #4
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d01b      	beq.n	80036de <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f06f 0204 	mvn.w	r2, #4
 80036ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2202      	movs	r2, #2
 80036b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	699b      	ldr	r3, [r3, #24]
 80036bc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d003      	beq.n	80036cc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036c4:	6878      	ldr	r0, [r7, #4]
 80036c6:	f000 fadc 	bl	8003c82 <HAL_TIM_IC_CaptureCallback>
 80036ca:	e005      	b.n	80036d8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	f000 face 	bl	8003c6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f000 fadf 	bl	8003c96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2200      	movs	r2, #0
 80036dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	f003 0308 	and.w	r3, r3, #8
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d020      	beq.n	800372a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	f003 0308 	and.w	r3, r3, #8
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d01b      	beq.n	800372a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f06f 0208 	mvn.w	r2, #8
 80036fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2204      	movs	r2, #4
 8003700:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	69db      	ldr	r3, [r3, #28]
 8003708:	f003 0303 	and.w	r3, r3, #3
 800370c:	2b00      	cmp	r3, #0
 800370e:	d003      	beq.n	8003718 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	f000 fab6 	bl	8003c82 <HAL_TIM_IC_CaptureCallback>
 8003716:	e005      	b.n	8003724 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	f000 faa8 	bl	8003c6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f000 fab9 	bl	8003c96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2200      	movs	r2, #0
 8003728:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	f003 0310 	and.w	r3, r3, #16
 8003730:	2b00      	cmp	r3, #0
 8003732:	d020      	beq.n	8003776 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	f003 0310 	and.w	r3, r3, #16
 800373a:	2b00      	cmp	r3, #0
 800373c:	d01b      	beq.n	8003776 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f06f 0210 	mvn.w	r2, #16
 8003746:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2208      	movs	r2, #8
 800374c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	69db      	ldr	r3, [r3, #28]
 8003754:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003758:	2b00      	cmp	r3, #0
 800375a:	d003      	beq.n	8003764 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	f000 fa90 	bl	8003c82 <HAL_TIM_IC_CaptureCallback>
 8003762:	e005      	b.n	8003770 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003764:	6878      	ldr	r0, [r7, #4]
 8003766:	f000 fa82 	bl	8003c6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f000 fa93 	bl	8003c96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2200      	movs	r2, #0
 8003774:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	f003 0301 	and.w	r3, r3, #1
 800377c:	2b00      	cmp	r3, #0
 800377e:	d00c      	beq.n	800379a <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f003 0301 	and.w	r3, r3, #1
 8003786:	2b00      	cmp	r3, #0
 8003788:	d007      	beq.n	800379a <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f06f 0201 	mvn.w	r2, #1
 8003792:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003794:	6878      	ldr	r0, [r7, #4]
 8003796:	f000 fa60 	bl	8003c5a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d00c      	beq.n	80037be <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d007      	beq.n	80037be <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80037b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80037b8:	6878      	ldr	r0, [r7, #4]
 80037ba:	f000 ff79 	bl	80046b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d00c      	beq.n	80037e2 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d007      	beq.n	80037e2 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80037da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80037dc:	6878      	ldr	r0, [r7, #4]
 80037de:	f000 fa64 	bl	8003caa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	f003 0320 	and.w	r3, r3, #32
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d00c      	beq.n	8003806 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	f003 0320 	and.w	r3, r3, #32
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d007      	beq.n	8003806 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f06f 0220 	mvn.w	r2, #32
 80037fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003800:	6878      	ldr	r0, [r7, #4]
 8003802:	f000 ff4b 	bl	800469c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003806:	bf00      	nop
 8003808:	3710      	adds	r7, #16
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}

0800380e <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800380e:	b580      	push	{r7, lr}
 8003810:	b086      	sub	sp, #24
 8003812:	af00      	add	r7, sp, #0
 8003814:	60f8      	str	r0, [r7, #12]
 8003816:	60b9      	str	r1, [r7, #8]
 8003818:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800381a:	2300      	movs	r3, #0
 800381c:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003824:	2b01      	cmp	r3, #1
 8003826:	d101      	bne.n	800382c <HAL_TIM_IC_ConfigChannel+0x1e>
 8003828:	2302      	movs	r3, #2
 800382a:	e088      	b.n	800393e <HAL_TIM_IC_ConfigChannel+0x130>
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2201      	movs	r2, #1
 8003830:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d11b      	bne.n	8003872 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800384a:	f000 fc95 	bl	8004178 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	699a      	ldr	r2, [r3, #24]
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f022 020c 	bic.w	r2, r2, #12
 800385c:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	6999      	ldr	r1, [r3, #24]
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	689a      	ldr	r2, [r3, #8]
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	430a      	orrs	r2, r1
 800386e:	619a      	str	r2, [r3, #24]
 8003870:	e060      	b.n	8003934 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2b04      	cmp	r3, #4
 8003876:	d11c      	bne.n	80038b2 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8003888:	f000 fd19 	bl	80042be <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	699a      	ldr	r2, [r3, #24]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800389a:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	6999      	ldr	r1, [r3, #24]
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	021a      	lsls	r2, r3, #8
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	430a      	orrs	r2, r1
 80038ae:	619a      	str	r2, [r3, #24]
 80038b0:	e040      	b.n	8003934 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2b08      	cmp	r3, #8
 80038b6:	d11b      	bne.n	80038f0 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80038c8:	f000 fd66 	bl	8004398 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	69da      	ldr	r2, [r3, #28]
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f022 020c 	bic.w	r2, r2, #12
 80038da:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	69d9      	ldr	r1, [r3, #28]
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	689a      	ldr	r2, [r3, #8]
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	430a      	orrs	r2, r1
 80038ec:	61da      	str	r2, [r3, #28]
 80038ee:	e021      	b.n	8003934 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2b0c      	cmp	r3, #12
 80038f4:	d11c      	bne.n	8003930 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8003906:	f000 fd83 	bl	8004410 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	69da      	ldr	r2, [r3, #28]
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003918:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	69d9      	ldr	r1, [r3, #28]
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	021a      	lsls	r2, r3, #8
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	430a      	orrs	r2, r1
 800392c:	61da      	str	r2, [r3, #28]
 800392e:	e001      	b.n	8003934 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003930:	2301      	movs	r3, #1
 8003932:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2200      	movs	r2, #0
 8003938:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800393c:	7dfb      	ldrb	r3, [r7, #23]
}
 800393e:	4618      	mov	r0, r3
 8003940:	3718      	adds	r7, #24
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}
	...

08003948 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b086      	sub	sp, #24
 800394c:	af00      	add	r7, sp, #0
 800394e:	60f8      	str	r0, [r7, #12]
 8003950:	60b9      	str	r1, [r7, #8]
 8003952:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003954:	2300      	movs	r3, #0
 8003956:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800395e:	2b01      	cmp	r3, #1
 8003960:	d101      	bne.n	8003966 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003962:	2302      	movs	r3, #2
 8003964:	e0ae      	b.n	8003ac4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2201      	movs	r2, #1
 800396a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2b0c      	cmp	r3, #12
 8003972:	f200 809f 	bhi.w	8003ab4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003976:	a201      	add	r2, pc, #4	@ (adr r2, 800397c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800397c:	080039b1 	.word	0x080039b1
 8003980:	08003ab5 	.word	0x08003ab5
 8003984:	08003ab5 	.word	0x08003ab5
 8003988:	08003ab5 	.word	0x08003ab5
 800398c:	080039f1 	.word	0x080039f1
 8003990:	08003ab5 	.word	0x08003ab5
 8003994:	08003ab5 	.word	0x08003ab5
 8003998:	08003ab5 	.word	0x08003ab5
 800399c:	08003a33 	.word	0x08003a33
 80039a0:	08003ab5 	.word	0x08003ab5
 80039a4:	08003ab5 	.word	0x08003ab5
 80039a8:	08003ab5 	.word	0x08003ab5
 80039ac:	08003a73 	.word	0x08003a73
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	68b9      	ldr	r1, [r7, #8]
 80039b6:	4618      	mov	r0, r3
 80039b8:	f000 fa2e 	bl	8003e18 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	699a      	ldr	r2, [r3, #24]
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f042 0208 	orr.w	r2, r2, #8
 80039ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	699a      	ldr	r2, [r3, #24]
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f022 0204 	bic.w	r2, r2, #4
 80039da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	6999      	ldr	r1, [r3, #24]
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	691a      	ldr	r2, [r3, #16]
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	430a      	orrs	r2, r1
 80039ec:	619a      	str	r2, [r3, #24]
      break;
 80039ee:	e064      	b.n	8003aba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	68b9      	ldr	r1, [r7, #8]
 80039f6:	4618      	mov	r0, r3
 80039f8:	f000 fa7e 	bl	8003ef8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	699a      	ldr	r2, [r3, #24]
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003a0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	699a      	ldr	r2, [r3, #24]
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	6999      	ldr	r1, [r3, #24]
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	691b      	ldr	r3, [r3, #16]
 8003a26:	021a      	lsls	r2, r3, #8
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	430a      	orrs	r2, r1
 8003a2e:	619a      	str	r2, [r3, #24]
      break;
 8003a30:	e043      	b.n	8003aba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	68b9      	ldr	r1, [r7, #8]
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f000 fad3 	bl	8003fe4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	69da      	ldr	r2, [r3, #28]
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f042 0208 	orr.w	r2, r2, #8
 8003a4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	69da      	ldr	r2, [r3, #28]
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f022 0204 	bic.w	r2, r2, #4
 8003a5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	69d9      	ldr	r1, [r3, #28]
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	691a      	ldr	r2, [r3, #16]
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	430a      	orrs	r2, r1
 8003a6e:	61da      	str	r2, [r3, #28]
      break;
 8003a70:	e023      	b.n	8003aba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	68b9      	ldr	r1, [r7, #8]
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f000 fb27 	bl	80040cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	69da      	ldr	r2, [r3, #28]
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003a8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	69da      	ldr	r2, [r3, #28]
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	69d9      	ldr	r1, [r3, #28]
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	691b      	ldr	r3, [r3, #16]
 8003aa8:	021a      	lsls	r2, r3, #8
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	430a      	orrs	r2, r1
 8003ab0:	61da      	str	r2, [r3, #28]
      break;
 8003ab2:	e002      	b.n	8003aba <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	75fb      	strb	r3, [r7, #23]
      break;
 8003ab8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2200      	movs	r2, #0
 8003abe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003ac2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	3718      	adds	r7, #24
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}

08003acc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b084      	sub	sp, #16
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
 8003ad4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d101      	bne.n	8003ae8 <HAL_TIM_ConfigClockSource+0x1c>
 8003ae4:	2302      	movs	r3, #2
 8003ae6:	e0b4      	b.n	8003c52 <HAL_TIM_ConfigClockSource+0x186>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2201      	movs	r2, #1
 8003aec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2202      	movs	r2, #2
 8003af4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003b06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003b0e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	68ba      	ldr	r2, [r7, #8]
 8003b16:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b20:	d03e      	beq.n	8003ba0 <HAL_TIM_ConfigClockSource+0xd4>
 8003b22:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b26:	f200 8087 	bhi.w	8003c38 <HAL_TIM_ConfigClockSource+0x16c>
 8003b2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b2e:	f000 8086 	beq.w	8003c3e <HAL_TIM_ConfigClockSource+0x172>
 8003b32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b36:	d87f      	bhi.n	8003c38 <HAL_TIM_ConfigClockSource+0x16c>
 8003b38:	2b70      	cmp	r3, #112	@ 0x70
 8003b3a:	d01a      	beq.n	8003b72 <HAL_TIM_ConfigClockSource+0xa6>
 8003b3c:	2b70      	cmp	r3, #112	@ 0x70
 8003b3e:	d87b      	bhi.n	8003c38 <HAL_TIM_ConfigClockSource+0x16c>
 8003b40:	2b60      	cmp	r3, #96	@ 0x60
 8003b42:	d050      	beq.n	8003be6 <HAL_TIM_ConfigClockSource+0x11a>
 8003b44:	2b60      	cmp	r3, #96	@ 0x60
 8003b46:	d877      	bhi.n	8003c38 <HAL_TIM_ConfigClockSource+0x16c>
 8003b48:	2b50      	cmp	r3, #80	@ 0x50
 8003b4a:	d03c      	beq.n	8003bc6 <HAL_TIM_ConfigClockSource+0xfa>
 8003b4c:	2b50      	cmp	r3, #80	@ 0x50
 8003b4e:	d873      	bhi.n	8003c38 <HAL_TIM_ConfigClockSource+0x16c>
 8003b50:	2b40      	cmp	r3, #64	@ 0x40
 8003b52:	d058      	beq.n	8003c06 <HAL_TIM_ConfigClockSource+0x13a>
 8003b54:	2b40      	cmp	r3, #64	@ 0x40
 8003b56:	d86f      	bhi.n	8003c38 <HAL_TIM_ConfigClockSource+0x16c>
 8003b58:	2b30      	cmp	r3, #48	@ 0x30
 8003b5a:	d064      	beq.n	8003c26 <HAL_TIM_ConfigClockSource+0x15a>
 8003b5c:	2b30      	cmp	r3, #48	@ 0x30
 8003b5e:	d86b      	bhi.n	8003c38 <HAL_TIM_ConfigClockSource+0x16c>
 8003b60:	2b20      	cmp	r3, #32
 8003b62:	d060      	beq.n	8003c26 <HAL_TIM_ConfigClockSource+0x15a>
 8003b64:	2b20      	cmp	r3, #32
 8003b66:	d867      	bhi.n	8003c38 <HAL_TIM_ConfigClockSource+0x16c>
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d05c      	beq.n	8003c26 <HAL_TIM_ConfigClockSource+0x15a>
 8003b6c:	2b10      	cmp	r3, #16
 8003b6e:	d05a      	beq.n	8003c26 <HAL_TIM_ConfigClockSource+0x15a>
 8003b70:	e062      	b.n	8003c38 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003b82:	f000 fc9d 	bl	80044c0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003b94:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	68ba      	ldr	r2, [r7, #8]
 8003b9c:	609a      	str	r2, [r3, #8]
      break;
 8003b9e:	e04f      	b.n	8003c40 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003bb0:	f000 fc86 	bl	80044c0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	689a      	ldr	r2, [r3, #8]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003bc2:	609a      	str	r2, [r3, #8]
      break;
 8003bc4:	e03c      	b.n	8003c40 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bd2:	461a      	mov	r2, r3
 8003bd4:	f000 fb44 	bl	8004260 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	2150      	movs	r1, #80	@ 0x50
 8003bde:	4618      	mov	r0, r3
 8003be0:	f000 fc53 	bl	800448a <TIM_ITRx_SetConfig>
      break;
 8003be4:	e02c      	b.n	8003c40 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003bf2:	461a      	mov	r2, r3
 8003bf4:	f000 fba0 	bl	8004338 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	2160      	movs	r1, #96	@ 0x60
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f000 fc43 	bl	800448a <TIM_ITRx_SetConfig>
      break;
 8003c04:	e01c      	b.n	8003c40 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c12:	461a      	mov	r2, r3
 8003c14:	f000 fb24 	bl	8004260 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	2140      	movs	r1, #64	@ 0x40
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f000 fc33 	bl	800448a <TIM_ITRx_SetConfig>
      break;
 8003c24:	e00c      	b.n	8003c40 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4619      	mov	r1, r3
 8003c30:	4610      	mov	r0, r2
 8003c32:	f000 fc2a 	bl	800448a <TIM_ITRx_SetConfig>
      break;
 8003c36:	e003      	b.n	8003c40 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	73fb      	strb	r3, [r7, #15]
      break;
 8003c3c:	e000      	b.n	8003c40 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003c3e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2201      	movs	r2, #1
 8003c44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003c50:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3710      	adds	r7, #16
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}

08003c5a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c5a:	b480      	push	{r7}
 8003c5c:	b083      	sub	sp, #12
 8003c5e:	af00      	add	r7, sp, #0
 8003c60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003c62:	bf00      	nop
 8003c64:	370c      	adds	r7, #12
 8003c66:	46bd      	mov	sp, r7
 8003c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6c:	4770      	bx	lr

08003c6e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c6e:	b480      	push	{r7}
 8003c70:	b083      	sub	sp, #12
 8003c72:	af00      	add	r7, sp, #0
 8003c74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003c76:	bf00      	nop
 8003c78:	370c      	adds	r7, #12
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c80:	4770      	bx	lr

08003c82 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003c82:	b480      	push	{r7}
 8003c84:	b083      	sub	sp, #12
 8003c86:	af00      	add	r7, sp, #0
 8003c88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003c8a:	bf00      	nop
 8003c8c:	370c      	adds	r7, #12
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr

08003c96 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c96:	b480      	push	{r7}
 8003c98:	b083      	sub	sp, #12
 8003c9a:	af00      	add	r7, sp, #0
 8003c9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003c9e:	bf00      	nop
 8003ca0:	370c      	adds	r7, #12
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca8:	4770      	bx	lr

08003caa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003caa:	b480      	push	{r7}
 8003cac:	b083      	sub	sp, #12
 8003cae:	af00      	add	r7, sp, #0
 8003cb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003cb2:	bf00      	nop
 8003cb4:	370c      	adds	r7, #12
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr
	...

08003cc0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b085      	sub	sp, #20
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
 8003cc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	4a46      	ldr	r2, [pc, #280]	@ (8003dec <TIM_Base_SetConfig+0x12c>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d013      	beq.n	8003d00 <TIM_Base_SetConfig+0x40>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003cde:	d00f      	beq.n	8003d00 <TIM_Base_SetConfig+0x40>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	4a43      	ldr	r2, [pc, #268]	@ (8003df0 <TIM_Base_SetConfig+0x130>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d00b      	beq.n	8003d00 <TIM_Base_SetConfig+0x40>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	4a42      	ldr	r2, [pc, #264]	@ (8003df4 <TIM_Base_SetConfig+0x134>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d007      	beq.n	8003d00 <TIM_Base_SetConfig+0x40>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	4a41      	ldr	r2, [pc, #260]	@ (8003df8 <TIM_Base_SetConfig+0x138>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d003      	beq.n	8003d00 <TIM_Base_SetConfig+0x40>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	4a40      	ldr	r2, [pc, #256]	@ (8003dfc <TIM_Base_SetConfig+0x13c>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d108      	bne.n	8003d12 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	68fa      	ldr	r2, [r7, #12]
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	4a35      	ldr	r2, [pc, #212]	@ (8003dec <TIM_Base_SetConfig+0x12c>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d02b      	beq.n	8003d72 <TIM_Base_SetConfig+0xb2>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d20:	d027      	beq.n	8003d72 <TIM_Base_SetConfig+0xb2>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	4a32      	ldr	r2, [pc, #200]	@ (8003df0 <TIM_Base_SetConfig+0x130>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d023      	beq.n	8003d72 <TIM_Base_SetConfig+0xb2>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	4a31      	ldr	r2, [pc, #196]	@ (8003df4 <TIM_Base_SetConfig+0x134>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d01f      	beq.n	8003d72 <TIM_Base_SetConfig+0xb2>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	4a30      	ldr	r2, [pc, #192]	@ (8003df8 <TIM_Base_SetConfig+0x138>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d01b      	beq.n	8003d72 <TIM_Base_SetConfig+0xb2>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	4a2f      	ldr	r2, [pc, #188]	@ (8003dfc <TIM_Base_SetConfig+0x13c>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d017      	beq.n	8003d72 <TIM_Base_SetConfig+0xb2>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	4a2e      	ldr	r2, [pc, #184]	@ (8003e00 <TIM_Base_SetConfig+0x140>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d013      	beq.n	8003d72 <TIM_Base_SetConfig+0xb2>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	4a2d      	ldr	r2, [pc, #180]	@ (8003e04 <TIM_Base_SetConfig+0x144>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d00f      	beq.n	8003d72 <TIM_Base_SetConfig+0xb2>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	4a2c      	ldr	r2, [pc, #176]	@ (8003e08 <TIM_Base_SetConfig+0x148>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d00b      	beq.n	8003d72 <TIM_Base_SetConfig+0xb2>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	4a2b      	ldr	r2, [pc, #172]	@ (8003e0c <TIM_Base_SetConfig+0x14c>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d007      	beq.n	8003d72 <TIM_Base_SetConfig+0xb2>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	4a2a      	ldr	r2, [pc, #168]	@ (8003e10 <TIM_Base_SetConfig+0x150>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d003      	beq.n	8003d72 <TIM_Base_SetConfig+0xb2>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	4a29      	ldr	r2, [pc, #164]	@ (8003e14 <TIM_Base_SetConfig+0x154>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d108      	bne.n	8003d84 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	68db      	ldr	r3, [r3, #12]
 8003d7e:	68fa      	ldr	r2, [r7, #12]
 8003d80:	4313      	orrs	r3, r2
 8003d82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	695b      	ldr	r3, [r3, #20]
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	68fa      	ldr	r2, [r7, #12]
 8003d96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	689a      	ldr	r2, [r3, #8]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	4a10      	ldr	r2, [pc, #64]	@ (8003dec <TIM_Base_SetConfig+0x12c>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d003      	beq.n	8003db8 <TIM_Base_SetConfig+0xf8>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	4a12      	ldr	r2, [pc, #72]	@ (8003dfc <TIM_Base_SetConfig+0x13c>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d103      	bne.n	8003dc0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	691a      	ldr	r2, [r3, #16]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	691b      	ldr	r3, [r3, #16]
 8003dca:	f003 0301 	and.w	r3, r3, #1
 8003dce:	2b01      	cmp	r3, #1
 8003dd0:	d105      	bne.n	8003dde <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	691b      	ldr	r3, [r3, #16]
 8003dd6:	f023 0201 	bic.w	r2, r3, #1
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	611a      	str	r2, [r3, #16]
  }
}
 8003dde:	bf00      	nop
 8003de0:	3714      	adds	r7, #20
 8003de2:	46bd      	mov	sp, r7
 8003de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de8:	4770      	bx	lr
 8003dea:	bf00      	nop
 8003dec:	40010000 	.word	0x40010000
 8003df0:	40000400 	.word	0x40000400
 8003df4:	40000800 	.word	0x40000800
 8003df8:	40000c00 	.word	0x40000c00
 8003dfc:	40010400 	.word	0x40010400
 8003e00:	40014000 	.word	0x40014000
 8003e04:	40014400 	.word	0x40014400
 8003e08:	40014800 	.word	0x40014800
 8003e0c:	40001800 	.word	0x40001800
 8003e10:	40001c00 	.word	0x40001c00
 8003e14:	40002000 	.word	0x40002000

08003e18 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b087      	sub	sp, #28
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
 8003e20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6a1b      	ldr	r3, [r3, #32]
 8003e26:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6a1b      	ldr	r3, [r3, #32]
 8003e2c:	f023 0201 	bic.w	r2, r3, #1
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	699b      	ldr	r3, [r3, #24]
 8003e3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	f023 0303 	bic.w	r3, r3, #3
 8003e4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	68fa      	ldr	r2, [r7, #12]
 8003e56:	4313      	orrs	r3, r2
 8003e58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	f023 0302 	bic.w	r3, r3, #2
 8003e60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	697a      	ldr	r2, [r7, #20]
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	4a20      	ldr	r2, [pc, #128]	@ (8003ef0 <TIM_OC1_SetConfig+0xd8>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d003      	beq.n	8003e7c <TIM_OC1_SetConfig+0x64>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	4a1f      	ldr	r2, [pc, #124]	@ (8003ef4 <TIM_OC1_SetConfig+0xdc>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d10c      	bne.n	8003e96 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	f023 0308 	bic.w	r3, r3, #8
 8003e82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	68db      	ldr	r3, [r3, #12]
 8003e88:	697a      	ldr	r2, [r7, #20]
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	f023 0304 	bic.w	r3, r3, #4
 8003e94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	4a15      	ldr	r2, [pc, #84]	@ (8003ef0 <TIM_OC1_SetConfig+0xd8>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d003      	beq.n	8003ea6 <TIM_OC1_SetConfig+0x8e>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	4a14      	ldr	r2, [pc, #80]	@ (8003ef4 <TIM_OC1_SetConfig+0xdc>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d111      	bne.n	8003eca <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003eac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003eb4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	695b      	ldr	r3, [r3, #20]
 8003eba:	693a      	ldr	r2, [r7, #16]
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	699b      	ldr	r3, [r3, #24]
 8003ec4:	693a      	ldr	r2, [r7, #16]
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	693a      	ldr	r2, [r7, #16]
 8003ece:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	68fa      	ldr	r2, [r7, #12]
 8003ed4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	685a      	ldr	r2, [r3, #4]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	697a      	ldr	r2, [r7, #20]
 8003ee2:	621a      	str	r2, [r3, #32]
}
 8003ee4:	bf00      	nop
 8003ee6:	371c      	adds	r7, #28
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eee:	4770      	bx	lr
 8003ef0:	40010000 	.word	0x40010000
 8003ef4:	40010400 	.word	0x40010400

08003ef8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b087      	sub	sp, #28
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
 8003f00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6a1b      	ldr	r3, [r3, #32]
 8003f06:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6a1b      	ldr	r3, [r3, #32]
 8003f0c:	f023 0210 	bic.w	r2, r3, #16
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	699b      	ldr	r3, [r3, #24]
 8003f1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003f26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	021b      	lsls	r3, r3, #8
 8003f36:	68fa      	ldr	r2, [r7, #12]
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	f023 0320 	bic.w	r3, r3, #32
 8003f42:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	011b      	lsls	r3, r3, #4
 8003f4a:	697a      	ldr	r2, [r7, #20]
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	4a22      	ldr	r2, [pc, #136]	@ (8003fdc <TIM_OC2_SetConfig+0xe4>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d003      	beq.n	8003f60 <TIM_OC2_SetConfig+0x68>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	4a21      	ldr	r2, [pc, #132]	@ (8003fe0 <TIM_OC2_SetConfig+0xe8>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d10d      	bne.n	8003f7c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003f66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	68db      	ldr	r3, [r3, #12]
 8003f6c:	011b      	lsls	r3, r3, #4
 8003f6e:	697a      	ldr	r2, [r7, #20]
 8003f70:	4313      	orrs	r3, r2
 8003f72:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f7a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	4a17      	ldr	r2, [pc, #92]	@ (8003fdc <TIM_OC2_SetConfig+0xe4>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d003      	beq.n	8003f8c <TIM_OC2_SetConfig+0x94>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	4a16      	ldr	r2, [pc, #88]	@ (8003fe0 <TIM_OC2_SetConfig+0xe8>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d113      	bne.n	8003fb4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003f92:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003f9a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	695b      	ldr	r3, [r3, #20]
 8003fa0:	009b      	lsls	r3, r3, #2
 8003fa2:	693a      	ldr	r2, [r7, #16]
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	699b      	ldr	r3, [r3, #24]
 8003fac:	009b      	lsls	r3, r3, #2
 8003fae:	693a      	ldr	r2, [r7, #16]
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	693a      	ldr	r2, [r7, #16]
 8003fb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	68fa      	ldr	r2, [r7, #12]
 8003fbe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	685a      	ldr	r2, [r3, #4]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	697a      	ldr	r2, [r7, #20]
 8003fcc:	621a      	str	r2, [r3, #32]
}
 8003fce:	bf00      	nop
 8003fd0:	371c      	adds	r7, #28
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd8:	4770      	bx	lr
 8003fda:	bf00      	nop
 8003fdc:	40010000 	.word	0x40010000
 8003fe0:	40010400 	.word	0x40010400

08003fe4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b087      	sub	sp, #28
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
 8003fec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6a1b      	ldr	r3, [r3, #32]
 8003ff2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6a1b      	ldr	r3, [r3, #32]
 8003ff8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	69db      	ldr	r3, [r3, #28]
 800400a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004012:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	f023 0303 	bic.w	r3, r3, #3
 800401a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	68fa      	ldr	r2, [r7, #12]
 8004022:	4313      	orrs	r3, r2
 8004024:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800402c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	689b      	ldr	r3, [r3, #8]
 8004032:	021b      	lsls	r3, r3, #8
 8004034:	697a      	ldr	r2, [r7, #20]
 8004036:	4313      	orrs	r3, r2
 8004038:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	4a21      	ldr	r2, [pc, #132]	@ (80040c4 <TIM_OC3_SetConfig+0xe0>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d003      	beq.n	800404a <TIM_OC3_SetConfig+0x66>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	4a20      	ldr	r2, [pc, #128]	@ (80040c8 <TIM_OC3_SetConfig+0xe4>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d10d      	bne.n	8004066 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004050:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	68db      	ldr	r3, [r3, #12]
 8004056:	021b      	lsls	r3, r3, #8
 8004058:	697a      	ldr	r2, [r7, #20]
 800405a:	4313      	orrs	r3, r2
 800405c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004064:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	4a16      	ldr	r2, [pc, #88]	@ (80040c4 <TIM_OC3_SetConfig+0xe0>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d003      	beq.n	8004076 <TIM_OC3_SetConfig+0x92>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	4a15      	ldr	r2, [pc, #84]	@ (80040c8 <TIM_OC3_SetConfig+0xe4>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d113      	bne.n	800409e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800407c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004084:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	695b      	ldr	r3, [r3, #20]
 800408a:	011b      	lsls	r3, r3, #4
 800408c:	693a      	ldr	r2, [r7, #16]
 800408e:	4313      	orrs	r3, r2
 8004090:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	699b      	ldr	r3, [r3, #24]
 8004096:	011b      	lsls	r3, r3, #4
 8004098:	693a      	ldr	r2, [r7, #16]
 800409a:	4313      	orrs	r3, r2
 800409c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	693a      	ldr	r2, [r7, #16]
 80040a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	68fa      	ldr	r2, [r7, #12]
 80040a8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	685a      	ldr	r2, [r3, #4]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	697a      	ldr	r2, [r7, #20]
 80040b6:	621a      	str	r2, [r3, #32]
}
 80040b8:	bf00      	nop
 80040ba:	371c      	adds	r7, #28
 80040bc:	46bd      	mov	sp, r7
 80040be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c2:	4770      	bx	lr
 80040c4:	40010000 	.word	0x40010000
 80040c8:	40010400 	.word	0x40010400

080040cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b087      	sub	sp, #28
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
 80040d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6a1b      	ldr	r3, [r3, #32]
 80040da:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6a1b      	ldr	r3, [r3, #32]
 80040e0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	69db      	ldr	r3, [r3, #28]
 80040f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80040fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004102:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	021b      	lsls	r3, r3, #8
 800410a:	68fa      	ldr	r2, [r7, #12]
 800410c:	4313      	orrs	r3, r2
 800410e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004116:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	031b      	lsls	r3, r3, #12
 800411e:	693a      	ldr	r2, [r7, #16]
 8004120:	4313      	orrs	r3, r2
 8004122:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	4a12      	ldr	r2, [pc, #72]	@ (8004170 <TIM_OC4_SetConfig+0xa4>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d003      	beq.n	8004134 <TIM_OC4_SetConfig+0x68>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	4a11      	ldr	r2, [pc, #68]	@ (8004174 <TIM_OC4_SetConfig+0xa8>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d109      	bne.n	8004148 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800413a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	695b      	ldr	r3, [r3, #20]
 8004140:	019b      	lsls	r3, r3, #6
 8004142:	697a      	ldr	r2, [r7, #20]
 8004144:	4313      	orrs	r3, r2
 8004146:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	697a      	ldr	r2, [r7, #20]
 800414c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	68fa      	ldr	r2, [r7, #12]
 8004152:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	685a      	ldr	r2, [r3, #4]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	693a      	ldr	r2, [r7, #16]
 8004160:	621a      	str	r2, [r3, #32]
}
 8004162:	bf00      	nop
 8004164:	371c      	adds	r7, #28
 8004166:	46bd      	mov	sp, r7
 8004168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416c:	4770      	bx	lr
 800416e:	bf00      	nop
 8004170:	40010000 	.word	0x40010000
 8004174:	40010400 	.word	0x40010400

08004178 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004178:	b480      	push	{r7}
 800417a:	b087      	sub	sp, #28
 800417c:	af00      	add	r7, sp, #0
 800417e:	60f8      	str	r0, [r7, #12]
 8004180:	60b9      	str	r1, [r7, #8]
 8004182:	607a      	str	r2, [r7, #4]
 8004184:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	6a1b      	ldr	r3, [r3, #32]
 800418a:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	6a1b      	ldr	r3, [r3, #32]
 8004190:	f023 0201 	bic.w	r2, r3, #1
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	699b      	ldr	r3, [r3, #24]
 800419c:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	4a28      	ldr	r2, [pc, #160]	@ (8004244 <TIM_TI1_SetConfig+0xcc>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d01b      	beq.n	80041de <TIM_TI1_SetConfig+0x66>
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041ac:	d017      	beq.n	80041de <TIM_TI1_SetConfig+0x66>
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	4a25      	ldr	r2, [pc, #148]	@ (8004248 <TIM_TI1_SetConfig+0xd0>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d013      	beq.n	80041de <TIM_TI1_SetConfig+0x66>
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	4a24      	ldr	r2, [pc, #144]	@ (800424c <TIM_TI1_SetConfig+0xd4>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d00f      	beq.n	80041de <TIM_TI1_SetConfig+0x66>
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	4a23      	ldr	r2, [pc, #140]	@ (8004250 <TIM_TI1_SetConfig+0xd8>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d00b      	beq.n	80041de <TIM_TI1_SetConfig+0x66>
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	4a22      	ldr	r2, [pc, #136]	@ (8004254 <TIM_TI1_SetConfig+0xdc>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d007      	beq.n	80041de <TIM_TI1_SetConfig+0x66>
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	4a21      	ldr	r2, [pc, #132]	@ (8004258 <TIM_TI1_SetConfig+0xe0>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d003      	beq.n	80041de <TIM_TI1_SetConfig+0x66>
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	4a20      	ldr	r2, [pc, #128]	@ (800425c <TIM_TI1_SetConfig+0xe4>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d101      	bne.n	80041e2 <TIM_TI1_SetConfig+0x6a>
 80041de:	2301      	movs	r3, #1
 80041e0:	e000      	b.n	80041e4 <TIM_TI1_SetConfig+0x6c>
 80041e2:	2300      	movs	r3, #0
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d008      	beq.n	80041fa <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	f023 0303 	bic.w	r3, r3, #3
 80041ee:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80041f0:	697a      	ldr	r2, [r7, #20]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	4313      	orrs	r3, r2
 80041f6:	617b      	str	r3, [r7, #20]
 80041f8:	e003      	b.n	8004202 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	f043 0301 	orr.w	r3, r3, #1
 8004200:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004208:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	011b      	lsls	r3, r3, #4
 800420e:	b2db      	uxtb	r3, r3
 8004210:	697a      	ldr	r2, [r7, #20]
 8004212:	4313      	orrs	r3, r2
 8004214:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	f023 030a 	bic.w	r3, r3, #10
 800421c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	f003 030a 	and.w	r3, r3, #10
 8004224:	693a      	ldr	r2, [r7, #16]
 8004226:	4313      	orrs	r3, r2
 8004228:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	697a      	ldr	r2, [r7, #20]
 800422e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	693a      	ldr	r2, [r7, #16]
 8004234:	621a      	str	r2, [r3, #32]
}
 8004236:	bf00      	nop
 8004238:	371c      	adds	r7, #28
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr
 8004242:	bf00      	nop
 8004244:	40010000 	.word	0x40010000
 8004248:	40000400 	.word	0x40000400
 800424c:	40000800 	.word	0x40000800
 8004250:	40000c00 	.word	0x40000c00
 8004254:	40010400 	.word	0x40010400
 8004258:	40014000 	.word	0x40014000
 800425c:	40001800 	.word	0x40001800

08004260 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004260:	b480      	push	{r7}
 8004262:	b087      	sub	sp, #28
 8004264:	af00      	add	r7, sp, #0
 8004266:	60f8      	str	r0, [r7, #12]
 8004268:	60b9      	str	r1, [r7, #8]
 800426a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	6a1b      	ldr	r3, [r3, #32]
 8004270:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	6a1b      	ldr	r3, [r3, #32]
 8004276:	f023 0201 	bic.w	r2, r3, #1
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	699b      	ldr	r3, [r3, #24]
 8004282:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800428a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	011b      	lsls	r3, r3, #4
 8004290:	693a      	ldr	r2, [r7, #16]
 8004292:	4313      	orrs	r3, r2
 8004294:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	f023 030a 	bic.w	r3, r3, #10
 800429c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800429e:	697a      	ldr	r2, [r7, #20]
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	4313      	orrs	r3, r2
 80042a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	693a      	ldr	r2, [r7, #16]
 80042aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	697a      	ldr	r2, [r7, #20]
 80042b0:	621a      	str	r2, [r3, #32]
}
 80042b2:	bf00      	nop
 80042b4:	371c      	adds	r7, #28
 80042b6:	46bd      	mov	sp, r7
 80042b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042bc:	4770      	bx	lr

080042be <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80042be:	b480      	push	{r7}
 80042c0:	b087      	sub	sp, #28
 80042c2:	af00      	add	r7, sp, #0
 80042c4:	60f8      	str	r0, [r7, #12]
 80042c6:	60b9      	str	r1, [r7, #8]
 80042c8:	607a      	str	r2, [r7, #4]
 80042ca:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	6a1b      	ldr	r3, [r3, #32]
 80042d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	6a1b      	ldr	r3, [r3, #32]
 80042d6:	f023 0210 	bic.w	r2, r3, #16
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	699b      	ldr	r3, [r3, #24]
 80042e2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80042ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	021b      	lsls	r3, r3, #8
 80042f0:	693a      	ldr	r2, [r7, #16]
 80042f2:	4313      	orrs	r3, r2
 80042f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80042fc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	031b      	lsls	r3, r3, #12
 8004302:	b29b      	uxth	r3, r3
 8004304:	693a      	ldr	r2, [r7, #16]
 8004306:	4313      	orrs	r3, r2
 8004308:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004310:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	011b      	lsls	r3, r3, #4
 8004316:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800431a:	697a      	ldr	r2, [r7, #20]
 800431c:	4313      	orrs	r3, r2
 800431e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	693a      	ldr	r2, [r7, #16]
 8004324:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	697a      	ldr	r2, [r7, #20]
 800432a:	621a      	str	r2, [r3, #32]
}
 800432c:	bf00      	nop
 800432e:	371c      	adds	r7, #28
 8004330:	46bd      	mov	sp, r7
 8004332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004336:	4770      	bx	lr

08004338 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004338:	b480      	push	{r7}
 800433a:	b087      	sub	sp, #28
 800433c:	af00      	add	r7, sp, #0
 800433e:	60f8      	str	r0, [r7, #12]
 8004340:	60b9      	str	r1, [r7, #8]
 8004342:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	6a1b      	ldr	r3, [r3, #32]
 8004348:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	6a1b      	ldr	r3, [r3, #32]
 800434e:	f023 0210 	bic.w	r2, r3, #16
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	699b      	ldr	r3, [r3, #24]
 800435a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004362:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	031b      	lsls	r3, r3, #12
 8004368:	693a      	ldr	r2, [r7, #16]
 800436a:	4313      	orrs	r3, r2
 800436c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004374:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	011b      	lsls	r3, r3, #4
 800437a:	697a      	ldr	r2, [r7, #20]
 800437c:	4313      	orrs	r3, r2
 800437e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	693a      	ldr	r2, [r7, #16]
 8004384:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	697a      	ldr	r2, [r7, #20]
 800438a:	621a      	str	r2, [r3, #32]
}
 800438c:	bf00      	nop
 800438e:	371c      	adds	r7, #28
 8004390:	46bd      	mov	sp, r7
 8004392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004396:	4770      	bx	lr

08004398 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004398:	b480      	push	{r7}
 800439a:	b087      	sub	sp, #28
 800439c:	af00      	add	r7, sp, #0
 800439e:	60f8      	str	r0, [r7, #12]
 80043a0:	60b9      	str	r1, [r7, #8]
 80043a2:	607a      	str	r2, [r7, #4]
 80043a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	6a1b      	ldr	r3, [r3, #32]
 80043aa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	6a1b      	ldr	r3, [r3, #32]
 80043b0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	69db      	ldr	r3, [r3, #28]
 80043bc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	f023 0303 	bic.w	r3, r3, #3
 80043c4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80043c6:	693a      	ldr	r2, [r7, #16]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	4313      	orrs	r3, r2
 80043cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80043d4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	011b      	lsls	r3, r3, #4
 80043da:	b2db      	uxtb	r3, r3
 80043dc:	693a      	ldr	r2, [r7, #16]
 80043de:	4313      	orrs	r3, r2
 80043e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 80043e8:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	021b      	lsls	r3, r3, #8
 80043ee:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 80043f2:	697a      	ldr	r2, [r7, #20]
 80043f4:	4313      	orrs	r3, r2
 80043f6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	693a      	ldr	r2, [r7, #16]
 80043fc:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	697a      	ldr	r2, [r7, #20]
 8004402:	621a      	str	r2, [r3, #32]
}
 8004404:	bf00      	nop
 8004406:	371c      	adds	r7, #28
 8004408:	46bd      	mov	sp, r7
 800440a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440e:	4770      	bx	lr

08004410 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004410:	b480      	push	{r7}
 8004412:	b087      	sub	sp, #28
 8004414:	af00      	add	r7, sp, #0
 8004416:	60f8      	str	r0, [r7, #12]
 8004418:	60b9      	str	r1, [r7, #8]
 800441a:	607a      	str	r2, [r7, #4]
 800441c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	6a1b      	ldr	r3, [r3, #32]
 8004422:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	6a1b      	ldr	r3, [r3, #32]
 8004428:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	69db      	ldr	r3, [r3, #28]
 8004434:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800443c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	021b      	lsls	r3, r3, #8
 8004442:	693a      	ldr	r2, [r7, #16]
 8004444:	4313      	orrs	r3, r2
 8004446:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800444e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	031b      	lsls	r3, r3, #12
 8004454:	b29b      	uxth	r3, r3
 8004456:	693a      	ldr	r2, [r7, #16]
 8004458:	4313      	orrs	r3, r2
 800445a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8004462:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	031b      	lsls	r3, r3, #12
 8004468:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 800446c:	697a      	ldr	r2, [r7, #20]
 800446e:	4313      	orrs	r3, r2
 8004470:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	693a      	ldr	r2, [r7, #16]
 8004476:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	697a      	ldr	r2, [r7, #20]
 800447c:	621a      	str	r2, [r3, #32]
}
 800447e:	bf00      	nop
 8004480:	371c      	adds	r7, #28
 8004482:	46bd      	mov	sp, r7
 8004484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004488:	4770      	bx	lr

0800448a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800448a:	b480      	push	{r7}
 800448c:	b085      	sub	sp, #20
 800448e:	af00      	add	r7, sp, #0
 8004490:	6078      	str	r0, [r7, #4]
 8004492:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80044a2:	683a      	ldr	r2, [r7, #0]
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	4313      	orrs	r3, r2
 80044a8:	f043 0307 	orr.w	r3, r3, #7
 80044ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	68fa      	ldr	r2, [r7, #12]
 80044b2:	609a      	str	r2, [r3, #8]
}
 80044b4:	bf00      	nop
 80044b6:	3714      	adds	r7, #20
 80044b8:	46bd      	mov	sp, r7
 80044ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044be:	4770      	bx	lr

080044c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80044c0:	b480      	push	{r7}
 80044c2:	b087      	sub	sp, #28
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	60f8      	str	r0, [r7, #12]
 80044c8:	60b9      	str	r1, [r7, #8]
 80044ca:	607a      	str	r2, [r7, #4]
 80044cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80044da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	021a      	lsls	r2, r3, #8
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	431a      	orrs	r2, r3
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	4313      	orrs	r3, r2
 80044e8:	697a      	ldr	r2, [r7, #20]
 80044ea:	4313      	orrs	r3, r2
 80044ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	697a      	ldr	r2, [r7, #20]
 80044f2:	609a      	str	r2, [r3, #8]
}
 80044f4:	bf00      	nop
 80044f6:	371c      	adds	r7, #28
 80044f8:	46bd      	mov	sp, r7
 80044fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fe:	4770      	bx	lr

08004500 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004500:	b480      	push	{r7}
 8004502:	b085      	sub	sp, #20
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
 8004508:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004510:	2b01      	cmp	r3, #1
 8004512:	d101      	bne.n	8004518 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004514:	2302      	movs	r3, #2
 8004516:	e05a      	b.n	80045ce <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2201      	movs	r2, #1
 800451c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2202      	movs	r2, #2
 8004524:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800453e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	68fa      	ldr	r2, [r7, #12]
 8004546:	4313      	orrs	r3, r2
 8004548:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	68fa      	ldr	r2, [r7, #12]
 8004550:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a21      	ldr	r2, [pc, #132]	@ (80045dc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d022      	beq.n	80045a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004564:	d01d      	beq.n	80045a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a1d      	ldr	r2, [pc, #116]	@ (80045e0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d018      	beq.n	80045a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a1b      	ldr	r2, [pc, #108]	@ (80045e4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d013      	beq.n	80045a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a1a      	ldr	r2, [pc, #104]	@ (80045e8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d00e      	beq.n	80045a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a18      	ldr	r2, [pc, #96]	@ (80045ec <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d009      	beq.n	80045a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a17      	ldr	r2, [pc, #92]	@ (80045f0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d004      	beq.n	80045a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a15      	ldr	r2, [pc, #84]	@ (80045f4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d10c      	bne.n	80045bc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80045a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	68ba      	ldr	r2, [r7, #8]
 80045b0:	4313      	orrs	r3, r2
 80045b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	68ba      	ldr	r2, [r7, #8]
 80045ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2201      	movs	r2, #1
 80045c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2200      	movs	r2, #0
 80045c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80045cc:	2300      	movs	r3, #0
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	3714      	adds	r7, #20
 80045d2:	46bd      	mov	sp, r7
 80045d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d8:	4770      	bx	lr
 80045da:	bf00      	nop
 80045dc:	40010000 	.word	0x40010000
 80045e0:	40000400 	.word	0x40000400
 80045e4:	40000800 	.word	0x40000800
 80045e8:	40000c00 	.word	0x40000c00
 80045ec:	40010400 	.word	0x40010400
 80045f0:	40014000 	.word	0x40014000
 80045f4:	40001800 	.word	0x40001800

080045f8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b085      	sub	sp, #20
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
 8004600:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004602:	2300      	movs	r3, #0
 8004604:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800460c:	2b01      	cmp	r3, #1
 800460e:	d101      	bne.n	8004614 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004610:	2302      	movs	r3, #2
 8004612:	e03d      	b.n	8004690 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2201      	movs	r2, #1
 8004618:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	68db      	ldr	r3, [r3, #12]
 8004626:	4313      	orrs	r3, r2
 8004628:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	689b      	ldr	r3, [r3, #8]
 8004634:	4313      	orrs	r3, r2
 8004636:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	4313      	orrs	r3, r2
 8004644:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4313      	orrs	r3, r2
 8004652:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	691b      	ldr	r3, [r3, #16]
 800465e:	4313      	orrs	r3, r2
 8004660:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	695b      	ldr	r3, [r3, #20]
 800466c:	4313      	orrs	r3, r2
 800466e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	69db      	ldr	r3, [r3, #28]
 800467a:	4313      	orrs	r3, r2
 800467c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	68fa      	ldr	r2, [r7, #12]
 8004684:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2200      	movs	r2, #0
 800468a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800468e:	2300      	movs	r3, #0
}
 8004690:	4618      	mov	r0, r3
 8004692:	3714      	adds	r7, #20
 8004694:	46bd      	mov	sp, r7
 8004696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469a:	4770      	bx	lr

0800469c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800469c:	b480      	push	{r7}
 800469e:	b083      	sub	sp, #12
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80046a4:	bf00      	nop
 80046a6:	370c      	adds	r7, #12
 80046a8:	46bd      	mov	sp, r7
 80046aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ae:	4770      	bx	lr

080046b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b083      	sub	sp, #12
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80046b8:	bf00      	nop
 80046ba:	370c      	adds	r7, #12
 80046bc:	46bd      	mov	sp, r7
 80046be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c2:	4770      	bx	lr

080046c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b082      	sub	sp, #8
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d101      	bne.n	80046d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	e042      	b.n	800475c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046dc:	b2db      	uxtb	r3, r3
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d106      	bne.n	80046f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2200      	movs	r2, #0
 80046e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f7fc ffb8 	bl	8001660 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2224      	movs	r2, #36	@ 0x24
 80046f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	68da      	ldr	r2, [r3, #12]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004706:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004708:	6878      	ldr	r0, [r7, #4]
 800470a:	f000 fc85 	bl	8005018 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	691a      	ldr	r2, [r3, #16]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800471c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	695a      	ldr	r2, [r3, #20]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800472c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	68da      	ldr	r2, [r3, #12]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800473c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2200      	movs	r2, #0
 8004742:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2220      	movs	r2, #32
 8004748:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2220      	movs	r2, #32
 8004750:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2200      	movs	r2, #0
 8004758:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800475a:	2300      	movs	r3, #0
}
 800475c:	4618      	mov	r0, r3
 800475e:	3708      	adds	r7, #8
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}

08004764 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b0ba      	sub	sp, #232	@ 0xe8
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	68db      	ldr	r3, [r3, #12]
 800477c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	695b      	ldr	r3, [r3, #20]
 8004786:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800478a:	2300      	movs	r3, #0
 800478c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004790:	2300      	movs	r3, #0
 8004792:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004796:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800479a:	f003 030f 	and.w	r3, r3, #15
 800479e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80047a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d10f      	bne.n	80047ca <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80047aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80047ae:	f003 0320 	and.w	r3, r3, #32
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d009      	beq.n	80047ca <HAL_UART_IRQHandler+0x66>
 80047b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80047ba:	f003 0320 	and.w	r3, r3, #32
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d003      	beq.n	80047ca <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f000 fb69 	bl	8004e9a <UART_Receive_IT>
      return;
 80047c8:	e25b      	b.n	8004c82 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80047ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	f000 80de 	beq.w	8004990 <HAL_UART_IRQHandler+0x22c>
 80047d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80047d8:	f003 0301 	and.w	r3, r3, #1
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d106      	bne.n	80047ee <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80047e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80047e4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	f000 80d1 	beq.w	8004990 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80047ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80047f2:	f003 0301 	and.w	r3, r3, #1
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d00b      	beq.n	8004812 <HAL_UART_IRQHandler+0xae>
 80047fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80047fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004802:	2b00      	cmp	r3, #0
 8004804:	d005      	beq.n	8004812 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800480a:	f043 0201 	orr.w	r2, r3, #1
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004812:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004816:	f003 0304 	and.w	r3, r3, #4
 800481a:	2b00      	cmp	r3, #0
 800481c:	d00b      	beq.n	8004836 <HAL_UART_IRQHandler+0xd2>
 800481e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004822:	f003 0301 	and.w	r3, r3, #1
 8004826:	2b00      	cmp	r3, #0
 8004828:	d005      	beq.n	8004836 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800482e:	f043 0202 	orr.w	r2, r3, #2
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004836:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800483a:	f003 0302 	and.w	r3, r3, #2
 800483e:	2b00      	cmp	r3, #0
 8004840:	d00b      	beq.n	800485a <HAL_UART_IRQHandler+0xf6>
 8004842:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004846:	f003 0301 	and.w	r3, r3, #1
 800484a:	2b00      	cmp	r3, #0
 800484c:	d005      	beq.n	800485a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004852:	f043 0204 	orr.w	r2, r3, #4
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800485a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800485e:	f003 0308 	and.w	r3, r3, #8
 8004862:	2b00      	cmp	r3, #0
 8004864:	d011      	beq.n	800488a <HAL_UART_IRQHandler+0x126>
 8004866:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800486a:	f003 0320 	and.w	r3, r3, #32
 800486e:	2b00      	cmp	r3, #0
 8004870:	d105      	bne.n	800487e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004872:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004876:	f003 0301 	and.w	r3, r3, #1
 800487a:	2b00      	cmp	r3, #0
 800487c:	d005      	beq.n	800488a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004882:	f043 0208 	orr.w	r2, r3, #8
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800488e:	2b00      	cmp	r3, #0
 8004890:	f000 81f2 	beq.w	8004c78 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004894:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004898:	f003 0320 	and.w	r3, r3, #32
 800489c:	2b00      	cmp	r3, #0
 800489e:	d008      	beq.n	80048b2 <HAL_UART_IRQHandler+0x14e>
 80048a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80048a4:	f003 0320 	and.w	r3, r3, #32
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d002      	beq.n	80048b2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80048ac:	6878      	ldr	r0, [r7, #4]
 80048ae:	f000 faf4 	bl	8004e9a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	695b      	ldr	r3, [r3, #20]
 80048b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048bc:	2b40      	cmp	r3, #64	@ 0x40
 80048be:	bf0c      	ite	eq
 80048c0:	2301      	moveq	r3, #1
 80048c2:	2300      	movne	r3, #0
 80048c4:	b2db      	uxtb	r3, r3
 80048c6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048ce:	f003 0308 	and.w	r3, r3, #8
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d103      	bne.n	80048de <HAL_UART_IRQHandler+0x17a>
 80048d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d04f      	beq.n	800497e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f000 f9fc 	bl	8004cdc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	695b      	ldr	r3, [r3, #20]
 80048ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048ee:	2b40      	cmp	r3, #64	@ 0x40
 80048f0:	d141      	bne.n	8004976 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	3314      	adds	r3, #20
 80048f8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004900:	e853 3f00 	ldrex	r3, [r3]
 8004904:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004908:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800490c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004910:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	3314      	adds	r3, #20
 800491a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800491e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004922:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004926:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800492a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800492e:	e841 2300 	strex	r3, r2, [r1]
 8004932:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004936:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800493a:	2b00      	cmp	r3, #0
 800493c:	d1d9      	bne.n	80048f2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004942:	2b00      	cmp	r3, #0
 8004944:	d013      	beq.n	800496e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800494a:	4a7e      	ldr	r2, [pc, #504]	@ (8004b44 <HAL_UART_IRQHandler+0x3e0>)
 800494c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004952:	4618      	mov	r0, r3
 8004954:	f7fd fd27 	bl	80023a6 <HAL_DMA_Abort_IT>
 8004958:	4603      	mov	r3, r0
 800495a:	2b00      	cmp	r3, #0
 800495c:	d016      	beq.n	800498c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004962:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004964:	687a      	ldr	r2, [r7, #4]
 8004966:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004968:	4610      	mov	r0, r2
 800496a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800496c:	e00e      	b.n	800498c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f000 f99e 	bl	8004cb0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004974:	e00a      	b.n	800498c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f000 f99a 	bl	8004cb0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800497c:	e006      	b.n	800498c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f000 f996 	bl	8004cb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2200      	movs	r2, #0
 8004988:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800498a:	e175      	b.n	8004c78 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800498c:	bf00      	nop
    return;
 800498e:	e173      	b.n	8004c78 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004994:	2b01      	cmp	r3, #1
 8004996:	f040 814f 	bne.w	8004c38 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800499a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800499e:	f003 0310 	and.w	r3, r3, #16
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	f000 8148 	beq.w	8004c38 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80049a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80049ac:	f003 0310 	and.w	r3, r3, #16
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	f000 8141 	beq.w	8004c38 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80049b6:	2300      	movs	r3, #0
 80049b8:	60bb      	str	r3, [r7, #8]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	60bb      	str	r3, [r7, #8]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	60bb      	str	r3, [r7, #8]
 80049ca:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	695b      	ldr	r3, [r3, #20]
 80049d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049d6:	2b40      	cmp	r3, #64	@ 0x40
 80049d8:	f040 80b6 	bne.w	8004b48 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80049e8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	f000 8145 	beq.w	8004c7c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80049f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80049fa:	429a      	cmp	r2, r3
 80049fc:	f080 813e 	bcs.w	8004c7c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004a06:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a0c:	69db      	ldr	r3, [r3, #28]
 8004a0e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a12:	f000 8088 	beq.w	8004b26 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	330c      	adds	r3, #12
 8004a1c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a20:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004a24:	e853 3f00 	ldrex	r3, [r3]
 8004a28:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004a2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004a30:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004a34:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	330c      	adds	r3, #12
 8004a3e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004a42:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004a46:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a4a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004a4e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004a52:	e841 2300 	strex	r3, r2, [r1]
 8004a56:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004a5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d1d9      	bne.n	8004a16 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	3314      	adds	r3, #20
 8004a68:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a6a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004a6c:	e853 3f00 	ldrex	r3, [r3]
 8004a70:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004a72:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004a74:	f023 0301 	bic.w	r3, r3, #1
 8004a78:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	3314      	adds	r3, #20
 8004a82:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004a86:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004a8a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a8c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004a8e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004a92:	e841 2300 	strex	r3, r2, [r1]
 8004a96:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004a98:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d1e1      	bne.n	8004a62 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	3314      	adds	r3, #20
 8004aa4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aa6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004aa8:	e853 3f00 	ldrex	r3, [r3]
 8004aac:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004aae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004ab0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004ab4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	3314      	adds	r3, #20
 8004abe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004ac2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004ac4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ac6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004ac8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004aca:	e841 2300 	strex	r3, r2, [r1]
 8004ace:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004ad0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d1e3      	bne.n	8004a9e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2220      	movs	r2, #32
 8004ada:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	330c      	adds	r3, #12
 8004aea:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004aee:	e853 3f00 	ldrex	r3, [r3]
 8004af2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004af4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004af6:	f023 0310 	bic.w	r3, r3, #16
 8004afa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	330c      	adds	r3, #12
 8004b04:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004b08:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004b0a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b0c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004b0e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004b10:	e841 2300 	strex	r3, r2, [r1]
 8004b14:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004b16:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d1e3      	bne.n	8004ae4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b20:	4618      	mov	r0, r3
 8004b22:	f7fd fbd0 	bl	80022c6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2202      	movs	r2, #2
 8004b2a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004b34:	b29b      	uxth	r3, r3
 8004b36:	1ad3      	subs	r3, r2, r3
 8004b38:	b29b      	uxth	r3, r3
 8004b3a:	4619      	mov	r1, r3
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	f000 f8c1 	bl	8004cc4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004b42:	e09b      	b.n	8004c7c <HAL_UART_IRQHandler+0x518>
 8004b44:	08004da3 	.word	0x08004da3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004b50:	b29b      	uxth	r3, r3
 8004b52:	1ad3      	subs	r3, r2, r3
 8004b54:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004b5c:	b29b      	uxth	r3, r3
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	f000 808e 	beq.w	8004c80 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004b64:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	f000 8089 	beq.w	8004c80 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	330c      	adds	r3, #12
 8004b74:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b78:	e853 3f00 	ldrex	r3, [r3]
 8004b7c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004b7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b80:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004b84:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	330c      	adds	r3, #12
 8004b8e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004b92:	647a      	str	r2, [r7, #68]	@ 0x44
 8004b94:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b96:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004b98:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004b9a:	e841 2300 	strex	r3, r2, [r1]
 8004b9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004ba0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d1e3      	bne.n	8004b6e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	3314      	adds	r3, #20
 8004bac:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bb0:	e853 3f00 	ldrex	r3, [r3]
 8004bb4:	623b      	str	r3, [r7, #32]
   return(result);
 8004bb6:	6a3b      	ldr	r3, [r7, #32]
 8004bb8:	f023 0301 	bic.w	r3, r3, #1
 8004bbc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	3314      	adds	r3, #20
 8004bc6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004bca:	633a      	str	r2, [r7, #48]	@ 0x30
 8004bcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004bd0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004bd2:	e841 2300 	strex	r3, r2, [r1]
 8004bd6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004bd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d1e3      	bne.n	8004ba6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2220      	movs	r2, #32
 8004be2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2200      	movs	r2, #0
 8004bea:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	330c      	adds	r3, #12
 8004bf2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	e853 3f00 	ldrex	r3, [r3]
 8004bfa:	60fb      	str	r3, [r7, #12]
   return(result);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	f023 0310 	bic.w	r3, r3, #16
 8004c02:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	330c      	adds	r3, #12
 8004c0c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004c10:	61fa      	str	r2, [r7, #28]
 8004c12:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c14:	69b9      	ldr	r1, [r7, #24]
 8004c16:	69fa      	ldr	r2, [r7, #28]
 8004c18:	e841 2300 	strex	r3, r2, [r1]
 8004c1c:	617b      	str	r3, [r7, #20]
   return(result);
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d1e3      	bne.n	8004bec <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2202      	movs	r2, #2
 8004c28:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004c2a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004c2e:	4619      	mov	r1, r3
 8004c30:	6878      	ldr	r0, [r7, #4]
 8004c32:	f000 f847 	bl	8004cc4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004c36:	e023      	b.n	8004c80 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004c38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d009      	beq.n	8004c58 <HAL_UART_IRQHandler+0x4f4>
 8004c44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d003      	beq.n	8004c58 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004c50:	6878      	ldr	r0, [r7, #4]
 8004c52:	f000 f8ba 	bl	8004dca <UART_Transmit_IT>
    return;
 8004c56:	e014      	b.n	8004c82 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004c58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d00e      	beq.n	8004c82 <HAL_UART_IRQHandler+0x51e>
 8004c64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d008      	beq.n	8004c82 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004c70:	6878      	ldr	r0, [r7, #4]
 8004c72:	f000 f8fa 	bl	8004e6a <UART_EndTransmit_IT>
    return;
 8004c76:	e004      	b.n	8004c82 <HAL_UART_IRQHandler+0x51e>
    return;
 8004c78:	bf00      	nop
 8004c7a:	e002      	b.n	8004c82 <HAL_UART_IRQHandler+0x51e>
      return;
 8004c7c:	bf00      	nop
 8004c7e:	e000      	b.n	8004c82 <HAL_UART_IRQHandler+0x51e>
      return;
 8004c80:	bf00      	nop
  }
}
 8004c82:	37e8      	adds	r7, #232	@ 0xe8
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bd80      	pop	{r7, pc}

08004c88 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b083      	sub	sp, #12
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004c90:	bf00      	nop
 8004c92:	370c      	adds	r7, #12
 8004c94:	46bd      	mov	sp, r7
 8004c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9a:	4770      	bx	lr

08004c9c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b083      	sub	sp, #12
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004ca4:	bf00      	nop
 8004ca6:	370c      	adds	r7, #12
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cae:	4770      	bx	lr

08004cb0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b083      	sub	sp, #12
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004cb8:	bf00      	nop
 8004cba:	370c      	adds	r7, #12
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc2:	4770      	bx	lr

08004cc4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b083      	sub	sp, #12
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
 8004ccc:	460b      	mov	r3, r1
 8004cce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004cd0:	bf00      	nop
 8004cd2:	370c      	adds	r7, #12
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cda:	4770      	bx	lr

08004cdc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b095      	sub	sp, #84	@ 0x54
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	330c      	adds	r3, #12
 8004cea:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004cee:	e853 3f00 	ldrex	r3, [r3]
 8004cf2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004cf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cf6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004cfa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	330c      	adds	r3, #12
 8004d02:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004d04:	643a      	str	r2, [r7, #64]	@ 0x40
 8004d06:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d08:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004d0a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004d0c:	e841 2300 	strex	r3, r2, [r1]
 8004d10:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004d12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d1e5      	bne.n	8004ce4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	3314      	adds	r3, #20
 8004d1e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d20:	6a3b      	ldr	r3, [r7, #32]
 8004d22:	e853 3f00 	ldrex	r3, [r3]
 8004d26:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d28:	69fb      	ldr	r3, [r7, #28]
 8004d2a:	f023 0301 	bic.w	r3, r3, #1
 8004d2e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	3314      	adds	r3, #20
 8004d36:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004d38:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004d3a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d3c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004d3e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004d40:	e841 2300 	strex	r3, r2, [r1]
 8004d44:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d1e5      	bne.n	8004d18 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	d119      	bne.n	8004d88 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	330c      	adds	r3, #12
 8004d5a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	e853 3f00 	ldrex	r3, [r3]
 8004d62:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	f023 0310 	bic.w	r3, r3, #16
 8004d6a:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	330c      	adds	r3, #12
 8004d72:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004d74:	61ba      	str	r2, [r7, #24]
 8004d76:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d78:	6979      	ldr	r1, [r7, #20]
 8004d7a:	69ba      	ldr	r2, [r7, #24]
 8004d7c:	e841 2300 	strex	r3, r2, [r1]
 8004d80:	613b      	str	r3, [r7, #16]
   return(result);
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d1e5      	bne.n	8004d54 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2220      	movs	r2, #32
 8004d8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2200      	movs	r2, #0
 8004d94:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004d96:	bf00      	nop
 8004d98:	3754      	adds	r7, #84	@ 0x54
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da0:	4770      	bx	lr

08004da2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004da2:	b580      	push	{r7, lr}
 8004da4:	b084      	sub	sp, #16
 8004da6:	af00      	add	r7, sp, #0
 8004da8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dae:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	2200      	movs	r2, #0
 8004db4:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	2200      	movs	r2, #0
 8004dba:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004dbc:	68f8      	ldr	r0, [r7, #12]
 8004dbe:	f7ff ff77 	bl	8004cb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004dc2:	bf00      	nop
 8004dc4:	3710      	adds	r7, #16
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}

08004dca <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004dca:	b480      	push	{r7}
 8004dcc:	b085      	sub	sp, #20
 8004dce:	af00      	add	r7, sp, #0
 8004dd0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004dd8:	b2db      	uxtb	r3, r3
 8004dda:	2b21      	cmp	r3, #33	@ 0x21
 8004ddc:	d13e      	bne.n	8004e5c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	689b      	ldr	r3, [r3, #8]
 8004de2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004de6:	d114      	bne.n	8004e12 <UART_Transmit_IT+0x48>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	691b      	ldr	r3, [r3, #16]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d110      	bne.n	8004e12 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6a1b      	ldr	r3, [r3, #32]
 8004df4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	881b      	ldrh	r3, [r3, #0]
 8004dfa:	461a      	mov	r2, r3
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e04:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6a1b      	ldr	r3, [r3, #32]
 8004e0a:	1c9a      	adds	r2, r3, #2
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	621a      	str	r2, [r3, #32]
 8004e10:	e008      	b.n	8004e24 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6a1b      	ldr	r3, [r3, #32]
 8004e16:	1c59      	adds	r1, r3, #1
 8004e18:	687a      	ldr	r2, [r7, #4]
 8004e1a:	6211      	str	r1, [r2, #32]
 8004e1c:	781a      	ldrb	r2, [r3, #0]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004e28:	b29b      	uxth	r3, r3
 8004e2a:	3b01      	subs	r3, #1
 8004e2c:	b29b      	uxth	r3, r3
 8004e2e:	687a      	ldr	r2, [r7, #4]
 8004e30:	4619      	mov	r1, r3
 8004e32:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d10f      	bne.n	8004e58 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	68da      	ldr	r2, [r3, #12]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004e46:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	68da      	ldr	r2, [r3, #12]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004e56:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004e58:	2300      	movs	r3, #0
 8004e5a:	e000      	b.n	8004e5e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004e5c:	2302      	movs	r3, #2
  }
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	3714      	adds	r7, #20
 8004e62:	46bd      	mov	sp, r7
 8004e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e68:	4770      	bx	lr

08004e6a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004e6a:	b580      	push	{r7, lr}
 8004e6c:	b082      	sub	sp, #8
 8004e6e:	af00      	add	r7, sp, #0
 8004e70:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	68da      	ldr	r2, [r3, #12]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004e80:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2220      	movs	r2, #32
 8004e86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	f7ff fefc 	bl	8004c88 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004e90:	2300      	movs	r3, #0
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	3708      	adds	r7, #8
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}

08004e9a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004e9a:	b580      	push	{r7, lr}
 8004e9c:	b08c      	sub	sp, #48	@ 0x30
 8004e9e:	af00      	add	r7, sp, #0
 8004ea0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004ea8:	b2db      	uxtb	r3, r3
 8004eaa:	2b22      	cmp	r3, #34	@ 0x22
 8004eac:	f040 80ae 	bne.w	800500c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004eb8:	d117      	bne.n	8004eea <UART_Receive_IT+0x50>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	691b      	ldr	r3, [r3, #16]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d113      	bne.n	8004eea <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004eca:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	b29b      	uxth	r3, r3
 8004ed4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ed8:	b29a      	uxth	r2, r3
 8004eda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004edc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ee2:	1c9a      	adds	r2, r3, #2
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	629a      	str	r2, [r3, #40]	@ 0x28
 8004ee8:	e026      	b.n	8004f38 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004eee:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	689b      	ldr	r3, [r3, #8]
 8004ef8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004efc:	d007      	beq.n	8004f0e <UART_Receive_IT+0x74>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	689b      	ldr	r3, [r3, #8]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d10a      	bne.n	8004f1c <UART_Receive_IT+0x82>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	691b      	ldr	r3, [r3, #16]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d106      	bne.n	8004f1c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	b2da      	uxtb	r2, r3
 8004f16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f18:	701a      	strb	r2, [r3, #0]
 8004f1a:	e008      	b.n	8004f2e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	b2db      	uxtb	r3, r3
 8004f24:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004f28:	b2da      	uxtb	r2, r3
 8004f2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f2c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f32:	1c5a      	adds	r2, r3, #1
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004f3c:	b29b      	uxth	r3, r3
 8004f3e:	3b01      	subs	r3, #1
 8004f40:	b29b      	uxth	r3, r3
 8004f42:	687a      	ldr	r2, [r7, #4]
 8004f44:	4619      	mov	r1, r3
 8004f46:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d15d      	bne.n	8005008 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	68da      	ldr	r2, [r3, #12]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f022 0220 	bic.w	r2, r2, #32
 8004f5a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	68da      	ldr	r2, [r3, #12]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004f6a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	695a      	ldr	r2, [r3, #20]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f022 0201 	bic.w	r2, r2, #1
 8004f7a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2220      	movs	r2, #32
 8004f80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2200      	movs	r2, #0
 8004f88:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f8e:	2b01      	cmp	r3, #1
 8004f90:	d135      	bne.n	8004ffe <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2200      	movs	r2, #0
 8004f96:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	330c      	adds	r3, #12
 8004f9e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	e853 3f00 	ldrex	r3, [r3]
 8004fa6:	613b      	str	r3, [r7, #16]
   return(result);
 8004fa8:	693b      	ldr	r3, [r7, #16]
 8004faa:	f023 0310 	bic.w	r3, r3, #16
 8004fae:	627b      	str	r3, [r7, #36]	@ 0x24
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	330c      	adds	r3, #12
 8004fb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fb8:	623a      	str	r2, [r7, #32]
 8004fba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fbc:	69f9      	ldr	r1, [r7, #28]
 8004fbe:	6a3a      	ldr	r2, [r7, #32]
 8004fc0:	e841 2300 	strex	r3, r2, [r1]
 8004fc4:	61bb      	str	r3, [r7, #24]
   return(result);
 8004fc6:	69bb      	ldr	r3, [r7, #24]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d1e5      	bne.n	8004f98 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f003 0310 	and.w	r3, r3, #16
 8004fd6:	2b10      	cmp	r3, #16
 8004fd8:	d10a      	bne.n	8004ff0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004fda:	2300      	movs	r3, #0
 8004fdc:	60fb      	str	r3, [r7, #12]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	60fb      	str	r3, [r7, #12]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	60fb      	str	r3, [r7, #12]
 8004fee:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004ff4:	4619      	mov	r1, r3
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f7ff fe64 	bl	8004cc4 <HAL_UARTEx_RxEventCallback>
 8004ffc:	e002      	b.n	8005004 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f7ff fe4c 	bl	8004c9c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005004:	2300      	movs	r3, #0
 8005006:	e002      	b.n	800500e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005008:	2300      	movs	r3, #0
 800500a:	e000      	b.n	800500e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800500c:	2302      	movs	r3, #2
  }
}
 800500e:	4618      	mov	r0, r3
 8005010:	3730      	adds	r7, #48	@ 0x30
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}
	...

08005018 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005018:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800501c:	b0c0      	sub	sp, #256	@ 0x100
 800501e:	af00      	add	r7, sp, #0
 8005020:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005024:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	691b      	ldr	r3, [r3, #16]
 800502c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005030:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005034:	68d9      	ldr	r1, [r3, #12]
 8005036:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800503a:	681a      	ldr	r2, [r3, #0]
 800503c:	ea40 0301 	orr.w	r3, r0, r1
 8005040:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005042:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005046:	689a      	ldr	r2, [r3, #8]
 8005048:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800504c:	691b      	ldr	r3, [r3, #16]
 800504e:	431a      	orrs	r2, r3
 8005050:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005054:	695b      	ldr	r3, [r3, #20]
 8005056:	431a      	orrs	r2, r3
 8005058:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800505c:	69db      	ldr	r3, [r3, #28]
 800505e:	4313      	orrs	r3, r2
 8005060:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005064:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	68db      	ldr	r3, [r3, #12]
 800506c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005070:	f021 010c 	bic.w	r1, r1, #12
 8005074:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005078:	681a      	ldr	r2, [r3, #0]
 800507a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800507e:	430b      	orrs	r3, r1
 8005080:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005082:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	695b      	ldr	r3, [r3, #20]
 800508a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800508e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005092:	6999      	ldr	r1, [r3, #24]
 8005094:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005098:	681a      	ldr	r2, [r3, #0]
 800509a:	ea40 0301 	orr.w	r3, r0, r1
 800509e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80050a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050a4:	681a      	ldr	r2, [r3, #0]
 80050a6:	4b8f      	ldr	r3, [pc, #572]	@ (80052e4 <UART_SetConfig+0x2cc>)
 80050a8:	429a      	cmp	r2, r3
 80050aa:	d005      	beq.n	80050b8 <UART_SetConfig+0xa0>
 80050ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050b0:	681a      	ldr	r2, [r3, #0]
 80050b2:	4b8d      	ldr	r3, [pc, #564]	@ (80052e8 <UART_SetConfig+0x2d0>)
 80050b4:	429a      	cmp	r2, r3
 80050b6:	d104      	bne.n	80050c2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80050b8:	f7fe f8fe 	bl	80032b8 <HAL_RCC_GetPCLK2Freq>
 80050bc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80050c0:	e003      	b.n	80050ca <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80050c2:	f7fe f8e5 	bl	8003290 <HAL_RCC_GetPCLK1Freq>
 80050c6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80050ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050ce:	69db      	ldr	r3, [r3, #28]
 80050d0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80050d4:	f040 810c 	bne.w	80052f0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80050d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80050dc:	2200      	movs	r2, #0
 80050de:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80050e2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80050e6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80050ea:	4622      	mov	r2, r4
 80050ec:	462b      	mov	r3, r5
 80050ee:	1891      	adds	r1, r2, r2
 80050f0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80050f2:	415b      	adcs	r3, r3
 80050f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80050f6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80050fa:	4621      	mov	r1, r4
 80050fc:	eb12 0801 	adds.w	r8, r2, r1
 8005100:	4629      	mov	r1, r5
 8005102:	eb43 0901 	adc.w	r9, r3, r1
 8005106:	f04f 0200 	mov.w	r2, #0
 800510a:	f04f 0300 	mov.w	r3, #0
 800510e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005112:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005116:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800511a:	4690      	mov	r8, r2
 800511c:	4699      	mov	r9, r3
 800511e:	4623      	mov	r3, r4
 8005120:	eb18 0303 	adds.w	r3, r8, r3
 8005124:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005128:	462b      	mov	r3, r5
 800512a:	eb49 0303 	adc.w	r3, r9, r3
 800512e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005132:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	2200      	movs	r2, #0
 800513a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800513e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005142:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005146:	460b      	mov	r3, r1
 8005148:	18db      	adds	r3, r3, r3
 800514a:	653b      	str	r3, [r7, #80]	@ 0x50
 800514c:	4613      	mov	r3, r2
 800514e:	eb42 0303 	adc.w	r3, r2, r3
 8005152:	657b      	str	r3, [r7, #84]	@ 0x54
 8005154:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005158:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800515c:	f7fb f834 	bl	80001c8 <__aeabi_uldivmod>
 8005160:	4602      	mov	r2, r0
 8005162:	460b      	mov	r3, r1
 8005164:	4b61      	ldr	r3, [pc, #388]	@ (80052ec <UART_SetConfig+0x2d4>)
 8005166:	fba3 2302 	umull	r2, r3, r3, r2
 800516a:	095b      	lsrs	r3, r3, #5
 800516c:	011c      	lsls	r4, r3, #4
 800516e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005172:	2200      	movs	r2, #0
 8005174:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005178:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800517c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005180:	4642      	mov	r2, r8
 8005182:	464b      	mov	r3, r9
 8005184:	1891      	adds	r1, r2, r2
 8005186:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005188:	415b      	adcs	r3, r3
 800518a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800518c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005190:	4641      	mov	r1, r8
 8005192:	eb12 0a01 	adds.w	sl, r2, r1
 8005196:	4649      	mov	r1, r9
 8005198:	eb43 0b01 	adc.w	fp, r3, r1
 800519c:	f04f 0200 	mov.w	r2, #0
 80051a0:	f04f 0300 	mov.w	r3, #0
 80051a4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80051a8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80051ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80051b0:	4692      	mov	sl, r2
 80051b2:	469b      	mov	fp, r3
 80051b4:	4643      	mov	r3, r8
 80051b6:	eb1a 0303 	adds.w	r3, sl, r3
 80051ba:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80051be:	464b      	mov	r3, r9
 80051c0:	eb4b 0303 	adc.w	r3, fp, r3
 80051c4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80051c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	2200      	movs	r2, #0
 80051d0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80051d4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80051d8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80051dc:	460b      	mov	r3, r1
 80051de:	18db      	adds	r3, r3, r3
 80051e0:	643b      	str	r3, [r7, #64]	@ 0x40
 80051e2:	4613      	mov	r3, r2
 80051e4:	eb42 0303 	adc.w	r3, r2, r3
 80051e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80051ea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80051ee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80051f2:	f7fa ffe9 	bl	80001c8 <__aeabi_uldivmod>
 80051f6:	4602      	mov	r2, r0
 80051f8:	460b      	mov	r3, r1
 80051fa:	4611      	mov	r1, r2
 80051fc:	4b3b      	ldr	r3, [pc, #236]	@ (80052ec <UART_SetConfig+0x2d4>)
 80051fe:	fba3 2301 	umull	r2, r3, r3, r1
 8005202:	095b      	lsrs	r3, r3, #5
 8005204:	2264      	movs	r2, #100	@ 0x64
 8005206:	fb02 f303 	mul.w	r3, r2, r3
 800520a:	1acb      	subs	r3, r1, r3
 800520c:	00db      	lsls	r3, r3, #3
 800520e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005212:	4b36      	ldr	r3, [pc, #216]	@ (80052ec <UART_SetConfig+0x2d4>)
 8005214:	fba3 2302 	umull	r2, r3, r3, r2
 8005218:	095b      	lsrs	r3, r3, #5
 800521a:	005b      	lsls	r3, r3, #1
 800521c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005220:	441c      	add	r4, r3
 8005222:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005226:	2200      	movs	r2, #0
 8005228:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800522c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005230:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005234:	4642      	mov	r2, r8
 8005236:	464b      	mov	r3, r9
 8005238:	1891      	adds	r1, r2, r2
 800523a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800523c:	415b      	adcs	r3, r3
 800523e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005240:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005244:	4641      	mov	r1, r8
 8005246:	1851      	adds	r1, r2, r1
 8005248:	6339      	str	r1, [r7, #48]	@ 0x30
 800524a:	4649      	mov	r1, r9
 800524c:	414b      	adcs	r3, r1
 800524e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005250:	f04f 0200 	mov.w	r2, #0
 8005254:	f04f 0300 	mov.w	r3, #0
 8005258:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800525c:	4659      	mov	r1, fp
 800525e:	00cb      	lsls	r3, r1, #3
 8005260:	4651      	mov	r1, sl
 8005262:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005266:	4651      	mov	r1, sl
 8005268:	00ca      	lsls	r2, r1, #3
 800526a:	4610      	mov	r0, r2
 800526c:	4619      	mov	r1, r3
 800526e:	4603      	mov	r3, r0
 8005270:	4642      	mov	r2, r8
 8005272:	189b      	adds	r3, r3, r2
 8005274:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005278:	464b      	mov	r3, r9
 800527a:	460a      	mov	r2, r1
 800527c:	eb42 0303 	adc.w	r3, r2, r3
 8005280:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005284:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	2200      	movs	r2, #0
 800528c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005290:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005294:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005298:	460b      	mov	r3, r1
 800529a:	18db      	adds	r3, r3, r3
 800529c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800529e:	4613      	mov	r3, r2
 80052a0:	eb42 0303 	adc.w	r3, r2, r3
 80052a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80052a6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80052aa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80052ae:	f7fa ff8b 	bl	80001c8 <__aeabi_uldivmod>
 80052b2:	4602      	mov	r2, r0
 80052b4:	460b      	mov	r3, r1
 80052b6:	4b0d      	ldr	r3, [pc, #52]	@ (80052ec <UART_SetConfig+0x2d4>)
 80052b8:	fba3 1302 	umull	r1, r3, r3, r2
 80052bc:	095b      	lsrs	r3, r3, #5
 80052be:	2164      	movs	r1, #100	@ 0x64
 80052c0:	fb01 f303 	mul.w	r3, r1, r3
 80052c4:	1ad3      	subs	r3, r2, r3
 80052c6:	00db      	lsls	r3, r3, #3
 80052c8:	3332      	adds	r3, #50	@ 0x32
 80052ca:	4a08      	ldr	r2, [pc, #32]	@ (80052ec <UART_SetConfig+0x2d4>)
 80052cc:	fba2 2303 	umull	r2, r3, r2, r3
 80052d0:	095b      	lsrs	r3, r3, #5
 80052d2:	f003 0207 	and.w	r2, r3, #7
 80052d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4422      	add	r2, r4
 80052de:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80052e0:	e106      	b.n	80054f0 <UART_SetConfig+0x4d8>
 80052e2:	bf00      	nop
 80052e4:	40011000 	.word	0x40011000
 80052e8:	40011400 	.word	0x40011400
 80052ec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80052f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80052f4:	2200      	movs	r2, #0
 80052f6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80052fa:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80052fe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005302:	4642      	mov	r2, r8
 8005304:	464b      	mov	r3, r9
 8005306:	1891      	adds	r1, r2, r2
 8005308:	6239      	str	r1, [r7, #32]
 800530a:	415b      	adcs	r3, r3
 800530c:	627b      	str	r3, [r7, #36]	@ 0x24
 800530e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005312:	4641      	mov	r1, r8
 8005314:	1854      	adds	r4, r2, r1
 8005316:	4649      	mov	r1, r9
 8005318:	eb43 0501 	adc.w	r5, r3, r1
 800531c:	f04f 0200 	mov.w	r2, #0
 8005320:	f04f 0300 	mov.w	r3, #0
 8005324:	00eb      	lsls	r3, r5, #3
 8005326:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800532a:	00e2      	lsls	r2, r4, #3
 800532c:	4614      	mov	r4, r2
 800532e:	461d      	mov	r5, r3
 8005330:	4643      	mov	r3, r8
 8005332:	18e3      	adds	r3, r4, r3
 8005334:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005338:	464b      	mov	r3, r9
 800533a:	eb45 0303 	adc.w	r3, r5, r3
 800533e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005342:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	2200      	movs	r2, #0
 800534a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800534e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005352:	f04f 0200 	mov.w	r2, #0
 8005356:	f04f 0300 	mov.w	r3, #0
 800535a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800535e:	4629      	mov	r1, r5
 8005360:	008b      	lsls	r3, r1, #2
 8005362:	4621      	mov	r1, r4
 8005364:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005368:	4621      	mov	r1, r4
 800536a:	008a      	lsls	r2, r1, #2
 800536c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005370:	f7fa ff2a 	bl	80001c8 <__aeabi_uldivmod>
 8005374:	4602      	mov	r2, r0
 8005376:	460b      	mov	r3, r1
 8005378:	4b60      	ldr	r3, [pc, #384]	@ (80054fc <UART_SetConfig+0x4e4>)
 800537a:	fba3 2302 	umull	r2, r3, r3, r2
 800537e:	095b      	lsrs	r3, r3, #5
 8005380:	011c      	lsls	r4, r3, #4
 8005382:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005386:	2200      	movs	r2, #0
 8005388:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800538c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005390:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005394:	4642      	mov	r2, r8
 8005396:	464b      	mov	r3, r9
 8005398:	1891      	adds	r1, r2, r2
 800539a:	61b9      	str	r1, [r7, #24]
 800539c:	415b      	adcs	r3, r3
 800539e:	61fb      	str	r3, [r7, #28]
 80053a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80053a4:	4641      	mov	r1, r8
 80053a6:	1851      	adds	r1, r2, r1
 80053a8:	6139      	str	r1, [r7, #16]
 80053aa:	4649      	mov	r1, r9
 80053ac:	414b      	adcs	r3, r1
 80053ae:	617b      	str	r3, [r7, #20]
 80053b0:	f04f 0200 	mov.w	r2, #0
 80053b4:	f04f 0300 	mov.w	r3, #0
 80053b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80053bc:	4659      	mov	r1, fp
 80053be:	00cb      	lsls	r3, r1, #3
 80053c0:	4651      	mov	r1, sl
 80053c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80053c6:	4651      	mov	r1, sl
 80053c8:	00ca      	lsls	r2, r1, #3
 80053ca:	4610      	mov	r0, r2
 80053cc:	4619      	mov	r1, r3
 80053ce:	4603      	mov	r3, r0
 80053d0:	4642      	mov	r2, r8
 80053d2:	189b      	adds	r3, r3, r2
 80053d4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80053d8:	464b      	mov	r3, r9
 80053da:	460a      	mov	r2, r1
 80053dc:	eb42 0303 	adc.w	r3, r2, r3
 80053e0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80053e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	2200      	movs	r2, #0
 80053ec:	67bb      	str	r3, [r7, #120]	@ 0x78
 80053ee:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80053f0:	f04f 0200 	mov.w	r2, #0
 80053f4:	f04f 0300 	mov.w	r3, #0
 80053f8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80053fc:	4649      	mov	r1, r9
 80053fe:	008b      	lsls	r3, r1, #2
 8005400:	4641      	mov	r1, r8
 8005402:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005406:	4641      	mov	r1, r8
 8005408:	008a      	lsls	r2, r1, #2
 800540a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800540e:	f7fa fedb 	bl	80001c8 <__aeabi_uldivmod>
 8005412:	4602      	mov	r2, r0
 8005414:	460b      	mov	r3, r1
 8005416:	4611      	mov	r1, r2
 8005418:	4b38      	ldr	r3, [pc, #224]	@ (80054fc <UART_SetConfig+0x4e4>)
 800541a:	fba3 2301 	umull	r2, r3, r3, r1
 800541e:	095b      	lsrs	r3, r3, #5
 8005420:	2264      	movs	r2, #100	@ 0x64
 8005422:	fb02 f303 	mul.w	r3, r2, r3
 8005426:	1acb      	subs	r3, r1, r3
 8005428:	011b      	lsls	r3, r3, #4
 800542a:	3332      	adds	r3, #50	@ 0x32
 800542c:	4a33      	ldr	r2, [pc, #204]	@ (80054fc <UART_SetConfig+0x4e4>)
 800542e:	fba2 2303 	umull	r2, r3, r2, r3
 8005432:	095b      	lsrs	r3, r3, #5
 8005434:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005438:	441c      	add	r4, r3
 800543a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800543e:	2200      	movs	r2, #0
 8005440:	673b      	str	r3, [r7, #112]	@ 0x70
 8005442:	677a      	str	r2, [r7, #116]	@ 0x74
 8005444:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005448:	4642      	mov	r2, r8
 800544a:	464b      	mov	r3, r9
 800544c:	1891      	adds	r1, r2, r2
 800544e:	60b9      	str	r1, [r7, #8]
 8005450:	415b      	adcs	r3, r3
 8005452:	60fb      	str	r3, [r7, #12]
 8005454:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005458:	4641      	mov	r1, r8
 800545a:	1851      	adds	r1, r2, r1
 800545c:	6039      	str	r1, [r7, #0]
 800545e:	4649      	mov	r1, r9
 8005460:	414b      	adcs	r3, r1
 8005462:	607b      	str	r3, [r7, #4]
 8005464:	f04f 0200 	mov.w	r2, #0
 8005468:	f04f 0300 	mov.w	r3, #0
 800546c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005470:	4659      	mov	r1, fp
 8005472:	00cb      	lsls	r3, r1, #3
 8005474:	4651      	mov	r1, sl
 8005476:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800547a:	4651      	mov	r1, sl
 800547c:	00ca      	lsls	r2, r1, #3
 800547e:	4610      	mov	r0, r2
 8005480:	4619      	mov	r1, r3
 8005482:	4603      	mov	r3, r0
 8005484:	4642      	mov	r2, r8
 8005486:	189b      	adds	r3, r3, r2
 8005488:	66bb      	str	r3, [r7, #104]	@ 0x68
 800548a:	464b      	mov	r3, r9
 800548c:	460a      	mov	r2, r1
 800548e:	eb42 0303 	adc.w	r3, r2, r3
 8005492:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005494:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	2200      	movs	r2, #0
 800549c:	663b      	str	r3, [r7, #96]	@ 0x60
 800549e:	667a      	str	r2, [r7, #100]	@ 0x64
 80054a0:	f04f 0200 	mov.w	r2, #0
 80054a4:	f04f 0300 	mov.w	r3, #0
 80054a8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80054ac:	4649      	mov	r1, r9
 80054ae:	008b      	lsls	r3, r1, #2
 80054b0:	4641      	mov	r1, r8
 80054b2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80054b6:	4641      	mov	r1, r8
 80054b8:	008a      	lsls	r2, r1, #2
 80054ba:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80054be:	f7fa fe83 	bl	80001c8 <__aeabi_uldivmod>
 80054c2:	4602      	mov	r2, r0
 80054c4:	460b      	mov	r3, r1
 80054c6:	4b0d      	ldr	r3, [pc, #52]	@ (80054fc <UART_SetConfig+0x4e4>)
 80054c8:	fba3 1302 	umull	r1, r3, r3, r2
 80054cc:	095b      	lsrs	r3, r3, #5
 80054ce:	2164      	movs	r1, #100	@ 0x64
 80054d0:	fb01 f303 	mul.w	r3, r1, r3
 80054d4:	1ad3      	subs	r3, r2, r3
 80054d6:	011b      	lsls	r3, r3, #4
 80054d8:	3332      	adds	r3, #50	@ 0x32
 80054da:	4a08      	ldr	r2, [pc, #32]	@ (80054fc <UART_SetConfig+0x4e4>)
 80054dc:	fba2 2303 	umull	r2, r3, r2, r3
 80054e0:	095b      	lsrs	r3, r3, #5
 80054e2:	f003 020f 	and.w	r2, r3, #15
 80054e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4422      	add	r2, r4
 80054ee:	609a      	str	r2, [r3, #8]
}
 80054f0:	bf00      	nop
 80054f2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80054f6:	46bd      	mov	sp, r7
 80054f8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80054fc:	51eb851f 	.word	0x51eb851f

08005500 <memset>:
 8005500:	4402      	add	r2, r0
 8005502:	4603      	mov	r3, r0
 8005504:	4293      	cmp	r3, r2
 8005506:	d100      	bne.n	800550a <memset+0xa>
 8005508:	4770      	bx	lr
 800550a:	f803 1b01 	strb.w	r1, [r3], #1
 800550e:	e7f9      	b.n	8005504 <memset+0x4>

08005510 <__libc_init_array>:
 8005510:	b570      	push	{r4, r5, r6, lr}
 8005512:	4d0d      	ldr	r5, [pc, #52]	@ (8005548 <__libc_init_array+0x38>)
 8005514:	4c0d      	ldr	r4, [pc, #52]	@ (800554c <__libc_init_array+0x3c>)
 8005516:	1b64      	subs	r4, r4, r5
 8005518:	10a4      	asrs	r4, r4, #2
 800551a:	2600      	movs	r6, #0
 800551c:	42a6      	cmp	r6, r4
 800551e:	d109      	bne.n	8005534 <__libc_init_array+0x24>
 8005520:	4d0b      	ldr	r5, [pc, #44]	@ (8005550 <__libc_init_array+0x40>)
 8005522:	4c0c      	ldr	r4, [pc, #48]	@ (8005554 <__libc_init_array+0x44>)
 8005524:	f000 f818 	bl	8005558 <_init>
 8005528:	1b64      	subs	r4, r4, r5
 800552a:	10a4      	asrs	r4, r4, #2
 800552c:	2600      	movs	r6, #0
 800552e:	42a6      	cmp	r6, r4
 8005530:	d105      	bne.n	800553e <__libc_init_array+0x2e>
 8005532:	bd70      	pop	{r4, r5, r6, pc}
 8005534:	f855 3b04 	ldr.w	r3, [r5], #4
 8005538:	4798      	blx	r3
 800553a:	3601      	adds	r6, #1
 800553c:	e7ee      	b.n	800551c <__libc_init_array+0xc>
 800553e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005542:	4798      	blx	r3
 8005544:	3601      	adds	r6, #1
 8005546:	e7f2      	b.n	800552e <__libc_init_array+0x1e>
 8005548:	08005590 	.word	0x08005590
 800554c:	08005590 	.word	0x08005590
 8005550:	08005590 	.word	0x08005590
 8005554:	08005594 	.word	0x08005594

08005558 <_init>:
 8005558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800555a:	bf00      	nop
 800555c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800555e:	bc08      	pop	{r3}
 8005560:	469e      	mov	lr, r3
 8005562:	4770      	bx	lr

08005564 <_fini>:
 8005564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005566:	bf00      	nop
 8005568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800556a:	bc08      	pop	{r3}
 800556c:	469e      	mov	lr, r3
 800556e:	4770      	bx	lr
